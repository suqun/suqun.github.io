<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[入耳箸心]]></title>
  <subtitle><![CDATA[成长路上的点滴记录]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://suqun.github.io/"/>
  <updated>2016-09-08T01:22:15.000Z</updated>
  <id>http://suqun.github.io/</id>
  
  <author>
    <name><![CDATA[Larry]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[基于Docker的java微服务(二) CentOS7部署Kubernetes集群]]></title>
    <link href="http://suqun.github.io/2016/09/07/dockerjavamicroservice2/"/>
    <id>http://suqun.github.io/2016/09/07/dockerjavamicroservice2/</id>
    <published>2016-09-07T11:23:15.000Z</published>
    <updated>2016-09-08T01:22:15.000Z</updated>
    <content type="html"><![CDATA[<p>本文主要参考美团云的<a href="https://mos.meituan.com/library/37/how-to-setup-k8s-cluster-on-CentOS7/" target="_blank" rel="external">在CentOS7上部署Kubernetes集群</a></p>
<h3 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h3><p>Kubernetes(k8s)是Google开源的大规模容器集群管理系统, 本文将基于CentOS7自带的Kubernetes组件、分布式键值存储系统etcd以及Flannel实现的overlay网络来搭建一个简单的k8s集群。</p>
<h3 id="vagrant_u5B89_u88C5_u591A_u53F0CentOS7"><a href="#vagrant_u5B89_u88C5_u591A_u53F0CentOS7" class="headerlink" title="vagrant安装多台CentOS7"></a>vagrant安装多台CentOS7</h3><p>使用vagrant创建多个CentOS7虚拟机用于集群部署。vagrant的安装非常简单,网上一大堆教程，可以参考<a href="http://www.tuicool.com/articles/miE7vm6" target="_blank" rel="external">这里</a>。我使用的是1.8.5版本。同时还需要下载CentOS的box文件,<br>由于box文件都在国外的网站上下载速度缓慢,可以从我的云盘上下载<a href="https://pan.baidu.com/s/1jI6T4EE" target="_blank" rel="external">CentOS-7-x86_64-Minimal-1511.box</a>。<br>有了box文件后,执行以下命令添加box</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant add box CentOS-<span class="number">7</span>-x86_64-Minimal-<span class="number">1511</span>.box</span><br></pre></td></tr></table></figure>
<p>查看vagrant已添加的box</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box list</span><br></pre></td></tr></table></figure>
<p>创建单台CentOS很简单，需要下面的步骤</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkidr centos7</span><br><span class="line"><span class="built_in">cd</span> centos7</span><br><span class="line">vagrant init</span><br><span class="line">vagrant up</span><br></pre></td></tr></table></figure>
<p>vagrant init会初始化一个Vagrantfile的文件，CentOS的配置都是这个文件设定的。这里给出创建多台centos的Vagrantfile配置。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">boxes = [</span><br><span class="line">  &#123; <span class="symbol">:name</span> =&gt; <span class="symbol">:master</span>,<span class="symbol">:ip</span> =&gt; <span class="string">'192.168.253.7'</span>,<span class="symbol">:cpus</span> =&gt; <span class="number">1</span>,<span class="symbol">:mem</span> =&gt; <span class="number">1024</span>&#125;,</span><br><span class="line">  &#123; <span class="symbol">:name</span> =&gt; <span class="symbol">:worker1</span>,<span class="symbol">:ip</span> =&gt; <span class="string">'192.168.253.8'</span>,<span class="symbol">:cpus</span> =&gt; <span class="number">1</span>,<span class="symbol">:mem</span> =&gt; <span class="number">1024</span>&#125;,</span><br><span class="line">  &#123; <span class="symbol">:name</span> =&gt; <span class="symbol">:worker2</span>,<span class="symbol">:ip</span> =&gt; <span class="string">'192.168.253.9'</span>,<span class="symbol">:cpus</span> =&gt; <span class="number">1</span>,<span class="symbol">:mem</span> =&gt; <span class="number">1024</span>&#125;,</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"><span class="constant">VAGRANTFILE_API_VERSION</span> = <span class="string">"2"</span></span><br><span class="line"></span><br><span class="line"><span class="constant">Vagrant</span>.configure(<span class="constant">VAGRANTFILE_API_VERSION</span>) <span class="keyword">do</span> |config|</span><br><span class="line">    boxes.each <span class="keyword">do</span> |opts|</span><br><span class="line">        config.vm.define opts[<span class="symbol">:name</span>] <span class="keyword">do</span> |config|</span><br><span class="line">            config.vm.box       = <span class="string">"centos7"</span></span><br><span class="line">            config.vm.boot_timeout = <span class="number">360</span></span><br><span class="line">            config.ssh.username = <span class="string">"vagrant"</span></span><br><span class="line">            config.ssh.password = <span class="string">"vagrant"</span></span><br><span class="line">            config.vm.synced_folder <span class="string">"."</span>, <span class="string">"/vagrant"</span>, <span class="symbol">disabled:</span><span class="keyword">true</span></span><br><span class="line">            config.vm.network  <span class="string">"private_network"</span>, <span class="symbol">ip:</span> opts[<span class="symbol">:ip</span>]</span><br><span class="line">            config.vm.hostname = <span class="string">"%s.vagrant"</span> % opts[<span class="symbol">:name</span>].to_s</span><br><span class="line">            config.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |vb|</span><br><span class="line">                vb.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--cpus"</span>, opts[<span class="symbol">:cpus</span>] ] <span class="keyword">if</span> opts[<span class="symbol">:cpus</span>]</span><br><span class="line">                vb.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--memory"</span>, opts[<span class="symbol">:mem</span>] ] <span class="keyword">if</span> opts[<span class="symbol">:mem</span>]</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">#config.vm.provision "shell", inline: $update_script</span></span><br><span class="line">            <span class="comment">#config.vm.provision "shell", path: opts[:provision] if opts[:provision]</span></span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在这个文件的目录下执行<code>vagrant up</code>就可以创建3台虚拟机。我们把其中master作为k8s的Master节点，worker1，worker2作为k8s的Node节点来创建k8s集群。</p>
<h3 id="u73AF_u5883_u51C6_u5907"><a href="#u73AF_u5883_u51C6_u5907" class="headerlink" title="环境准备"></a>环境准备</h3><table>
<thead>
<tr>
<th>master</th>
<th style="text-align:center">worker1</th>
<th style="text-align:center">worker2</th>
</tr>
</thead>
<tbody>
<tr>
<td>192.168.253.7</td>
<td style="text-align:center">192.168.253.8</td>
<td style="text-align:center">192.168.253.9</td>
</tr>
<tr>
<td>kubernetes</td>
<td style="text-align:center">ntpd</td>
<td style="text-align:center">ntpd</td>
</tr>
<tr>
<td>etcd</td>
<td style="text-align:center">flannel</td>
<td style="text-align:center">flannel</td>
</tr>
<tr>
<td>ntpd</td>
<td style="text-align:center">kubernetes</td>
<td style="text-align:center">kubernetes</td>
</tr>
</tbody>
</table>
<p>Master节点禁用CentOS7自带防火墙，安装kubernetes、etcd、ntpd等软件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld &amp;&amp; sudo systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">sudo yum install -y kubernetes etcd ntp.x86_64</span><br></pre></td></tr></table></figure>
<p>Node节点同样禁用CentOS7自带防火墙，安装kubernetes、flannel、ntpd等软件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld &amp;&amp; sudo systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">sudo yum install -y ntp.x86_64 flannel kubernetes</span><br></pre></td></tr></table></figure>
<h3 id="Master_u914D_u7F6E"><a href="#Master_u914D_u7F6E" class="headerlink" title="Master配置"></a>Master配置</h3><p>修改etcd配置<code>/etc/etcd/etcd.conf</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">"http://0.0.0.0:2379"</span></span><br></pre></td></tr></table></figure>
<p>修改kubernetes全局配置<code>/etc/kubernetes/config</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KUBE_LOG_LEVEL=<span class="string">"--v=2"</span></span><br></pre></td></tr></table></figure>
<p>修改kubernetes apiserver的配置<code>/etc/kubernetes/apiserver</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">KUBE_API_ADDRESS=<span class="string">"--address=0.0.0.0"</span></span><br><span class="line">KUBE_API_PORT=<span class="string">"--port=8080"</span></span><br><span class="line">KUBELET_PORT=<span class="string">"--kubelet_port=10250"</span></span><br></pre></td></tr></table></figure>
<p>启动master的ntpd、etcd、kube-apiserver、kube-scheduler、kube-controller-manager服务，设置为开机启动，并查看启动后的状态。如果每一个服务都启动成功，那么sudo systemctl status $SRV显示的信息则包含Active: active (running)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> SRV <span class="keyword">in</span> ntpd etcd kube-apiserver kube-scheduler kube-controller-manager;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    sudo systemctl start <span class="variable">$SRV</span></span><br><span class="line">    sudo systemctl <span class="built_in">enable</span> <span class="variable">$SRV</span></span><br><span class="line">    sudo systemctl status <span class="variable">$SRV</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>修改etcd配置，在设定Node中flannel所使用的子网范围为172.17.1.0~172.17.254.0（每一个Node节点都有一个独立的flannel子网）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">etcdctl mk /coreos.com/network/config <span class="string">'&#123;"Network":"172.17.0.0/16", "SubnetMin": "172.17.1.0", "SubnetMax": "172.17.254.0"&#125;'</span></span><br></pre></td></tr></table></figure>
<h3 id="Node_u914D_u7F6E"><a href="#Node_u914D_u7F6E" class="headerlink" title="Node配置"></a>Node配置</h3><p>修改Node节点上flannel的配置<code>/etc/sysconfig/</code>flanneld，设定etcd的相关信息，其中192.168.253.7为Master的IP地址。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLANNEL_ETCD=<span class="string">"http://192.168.253.7:2379"</span></span><br></pre></td></tr></table></figure>
<p>修改Node节点kubernetes的全局配置文件<code>/etc/kubernetes/config</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">KUBE_LOG_LEVEL=<span class="string">"--v=2"</span></span><br><span class="line">KUBE_MASTER=<span class="string">"--master=http://192.168.253.7:8080"</span></span><br></pre></td></tr></table></figure>
<p>修改Node节点上kubernetes kubelet的配置<code>/etc/kubernetes/kubelet</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">KUBELET_ADDRESS=<span class="string">"--address=0.0.0.0"</span></span><br><span class="line">KUBELET_PORT=<span class="string">"--port=10250"</span></span><br><span class="line">KUBELET_API_SERVER=<span class="string">"--api_servers=http://192.168.253.7:8080"</span></span><br><span class="line">KUBELET_HOSTNAME=<span class="string">""</span></span><br></pre></td></tr></table></figure>
<p>启动Node节点上的相关服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> SRV <span class="keyword">in</span> ntpd flanneld docker kube-proxy kubelet;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    sudo systemctl start <span class="variable">$SRV</span></span><br><span class="line">    sudo systemctl <span class="built_in">enable</span> <span class="variable">$SRV</span></span><br><span class="line">    sudo systemctl status <span class="variable">$SRV</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p>
<p>类似Master节点，如果每一个服务都启动成功，那么sudo systemctl status $SRV显示的信息则包含Active: active (running)。</p>
<p>配置步骤都是参考<a href="https://mos.meituan.com/library/37/how-to-setup-k8s-cluster-on-CentOS7/" target="_blank" rel="external">美团云在CentOS7上部署Kubernetes集群</a>。<br>不巧的是，我在这一步上花了1周的时间。。。。Node节点上的flanneld和docker服务死活起不起来。<br>通过<code>systemctl status flanneld</code>，发现一直报错<code>Failed to retrieve network config</code>。</p>
<p><strong>解决方法</strong>：</p>
<p>修改Node节点上的flanneld配置<code>/etc/sysconfig/flanneld</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLANNEL_ETCD_KEY=<span class="string">"/coreos.com/network"</span></span><br></pre></td></tr></table></figure>
<p>然后重新启动flanneld和docker服务即可。</p>
<h3 id="u6D4B_u8BD5"><a href="#u6D4B_u8BD5" class="headerlink" title="测试"></a>测试</h3><p>在Master上查看节点信息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@master ~]$ kubectl get nodes</span><br><span class="line">NAME              STATUS    AGE</span><br><span class="line">worker1.vagrant   Ready     <span class="number">4</span>m</span><br><span class="line">worker2.vagrant   Ready     <span class="number">10</span>s</span><br></pre></td></tr></table></figure>
<p>在Master节点查看flannel子网分配情况</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@master ~]$ etcdctl ls /coreos.com/network/subnets</span><br><span class="line">/coreos.com/network/subnets/<span class="number">172.17</span>.<span class="number">29.0</span>-<span class="number">24</span></span><br></pre></td></tr></table></figure>
<h3 id="Guestbook_u90E8_u7F72_u5230k8s_u4E2D"><a href="#Guestbook_u90E8_u7F72_u5230k8s_u4E2D" class="headerlink" title="Guestbook部署到k8s中"></a>Guestbook部署到k8s中</h3><p><a href="https://github.com/kubernetes/kubernetes/blob/release-1.2/examples/guestbook/README.md" target="_blank" rel="external">Guestbook example</a></p>
<h3 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h3><p>这里的集群部署参考的是美团云分享的。都只是练手用的。</p>
<p>k8s部署还可以更简单，一键部署。使用vagrant+coreOs，安装完虚拟机后，Master节点c1会自动下在k8s所需的环境，奈何大陆的程序员比较苦逼，有墙的存在。在翻墙的情况下可以尝试一键部署k8s集群。详情请移步<a href="https://coreos.com/kubernetes/docs/latest/kubernetes-on-vagrant.html" target="_blank" rel="external">要翻才能看的到</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文主要参考美团云的<a href="https://mos.meituan.com/library/37/how-to-setup-k8s-cluster-on-CentOS7/" target="_blank" rel="external">在CentOS7上部署Kub]]>
    </summary>
    
      <category term="DOCKER" scheme="http://suqun.github.io/tags/DOCKER/"/>
    
      <category term="K8s" scheme="http://suqun.github.io/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于Docker的java微服务(一) 部署Chris Richardson的转账案例]]></title>
    <link href="http://suqun.github.io/2016/08/24/dockerjavamicroservice1/"/>
    <id>http://suqun.github.io/2016/08/24/dockerjavamicroservice1/</id>
    <published>2016-08-24T11:23:15.000Z</published>
    <updated>2016-08-25T04:34:50.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h3><p>本文主要参考<a href="http://www.infoq.com/cn/articles/Automate-Docker-Cloud-Java-Microservice-Deployment-with-DCHQ" target="_blank" rel="external">使用DCHQ自动部署和管理基于Docker的云/虚拟化环境Java微服务</a></p>
<p>最近在学习微服务,前两周了解基于Spring Cloud的微服务框架,这两天开始看看关于Docker的微服务。</p>
<p>Spring Cloud整合了Netflix开源的Eureka,Hystrix,Ribbon,Feign,ZUUL等,<br>是一个基于Spring Boot实现的云应用开发工具，它为基于JVM的云应用开发中的配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、<br>分布式会话和集群状态管理等操作提供了一种简单的开发方式(<a href="http://blog.didispace.com/springcloud1/" target="_blank" rel="external">参考DIDI</a>)。</p>
<p>那么Docker的微服务是什么样的呢。有空的同学可以看看Spring Cloud和Docker的比较<br><a href="http://www.infoq.com/cn/articles/netflix-oss-spring-cloud-kubernetes?utm_campaign=rightbar_v2&amp;utm_source=infoq&amp;utm_medium=articles_link&amp;utm_content=link_text" target="_blank" rel="external">Netflix OSS、Spring Cloud还是Kubernetes?</a>。<br>简单的说,就是基于Docker的调度器Kubernetes可以帮忙把大家从服务发现、负载均衡、容错等功能中解放出来,更专注于业务逻辑开发。</p>
<p>Kubernetes是个什么鬼?要了解它,我们得先了解下,我们开发好的项目是怎么在Docker上部署应用的,多个Docker容器又是如何管理的。<br>这篇文章是Chris Richardson针对事件溯源、CQRS和Docker所创建的转账<a href="https://github.com/cer/event-sourcing-examples" target="_blank" rel="external">案例</a>。</p>
<p>案例主要功能如下:</p>
<ul>
<li>基于一个初始的余额，创建新账户</li>
<li>查询某个账户，得到其余额</li>
<li>从一个账户到另一个账户进行转账</li>
</ul>
<p>我们就用这个例子,来了解下整个开发部署流程(<strong>仅仅是了解</strong>)。案例的具体业务逻辑介绍请移步<a href="https://github.com/cer/event-sourcing-examples" target="_blank" rel="external">event-sourcing-examples</a></p>
<h3 id="u83B7_u53D6Event_Store_u51ED_u8BC1"><a href="#u83B7_u53D6Event_Store_u51ED_u8BC1" class="headerlink" title="获取Event Store凭证"></a>获取Event Store凭证</h3><p>架构使用事件驱动的方式来确保数据的一致性,这里面使用的是Event Store。</p>
<p>在使用之前,需要获取Event Store凭证。<br>进入<a href="http://eventuate.io/" target="_blank" rel="external">Event Store</a>官网,注册个账号,过几个小时一般就会收到来自<a href="/chris@chrisrichardson.net">chris</a>的邮件。<br>邮件中有EVENTUATE_API_KEY_ID和EVENTUATE_API_KEY_SECRET,这个在后面的yml模板里会用到。</p>
<h3 id="gradle_u6784_u5EFA"><a href="#gradle_u6784_u5EFA" class="headerlink" title="gradle构建"></a>gradle构建</h3><p>从<a href="https://github.com/cer/event-sourcing-examples" target="_blank" rel="external">event-sourcing-examples</a>clone项目到本地。</p>
<p>直接下载下来的例子，部署测试的时候，会报几个错误，需要对代码做部分修改</p>
<ul>
<li>修改 xx-xx-side-service模块中build.gradle文件,添加如下内容<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jar &#123;</span><br><span class="line">    manifest &#123;</span><br><span class="line">        attributes <span class="string">'Main-Class'</span>: <span class="string">'net.chrisrichardson.eventstore.javaexamples.banking.web.main.XxxxSideServiceMain'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>添加这个解决部署时遇到的找不到manifest错误</p>
<ul>
<li>xx-xx-side-service主方法添加注解@SpringBootApplication</li>
</ul>
<p>主方法没有@SpringBootApplication这个注解，是无法启动spring boot滴。</p>
<p>修改后，使用gradle的assemble命令构建，构建成功后，模块的/build/libs会生成jar包。</p>
<h3 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h3><p>gradle构建完毕后，我们要把service模块的jar包放到一个docker镜像中，然后启动这个docker。<br>这里使用了docker-compose来生成启动镜像。</p>
<p>docker-compose的安装及介绍，请移步：<a href="https://yeasy.gitbooks.io/docker_practice/content/compose/" target="_blank" rel="external">Docker Compose 项目</a></p>
<h4 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h4><p>docker-compose管理调度docker容器默认是根据docker-compose.yml模板进行的。这个模板里定义了生成镜像部署镜像的一些步骤。</p>
<p>本案例的yml如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">accountscommandside:&#10;  image: openjdk:8u92-jdk-alpine&#10;  working_dir: /app&#10;  volumes:&#10;    - ./accounts-command-side-service/build/libs:/app&#10;  command: java -jar /app/accounts-command-side-service.jar&#10;  ports:&#10;    - &#34;8080:8080&#34;&#10;  environment:&#10;    EVENTUATE_API_KEY_ID: 5NJSVTRJ6UTYVL8U4RN8TKDRM&#10;    EVENTUATE_API_KEY_SECRET: fiAKWYEEj7EVxNi6yKXF8WDcVLbYA8Cu5RnFFKjwVOw&#10;&#10;transactionscommandside:&#10;  image: openjdk:8u92-jdk-alpine&#10;  working_dir: /app&#10;  volumes:&#10;    - ./transactions-command-side-service/build/libs:/app&#10;  command: java -jar /app/transactions-command-side-service.jar&#10;  ports:&#10;    - &#34;8082:8080&#34;&#10;  environment:&#10;    EVENTUATE_API_KEY_ID: 5NJSVTRJ6UTYVL8U4RN8TKDRM&#10;    EVENTUATE_API_KEY_SECRET: fiAKWYEEj7EVxNi6yKXF8WDcVLbYA8Cu5RnFFKjwVOw&#10;&#10;&#10;accountsqueryside:&#10;  image: openjdk:8u92-jdk-alpine&#10;  working_dir: /app&#10;  volumes:&#10;    - ./accounts-query-side-service/build/libs:/app&#10;  command: java -jar /app/accounts-query-side-service.jar&#10;  ports:&#10;    - &#34;8081:8080&#34;&#10;  links:&#10;    - mongodb&#10;  environment:&#10;    EVENTUATE_API_KEY_ID: 5NJSVTRJ6UTYVL8U4RN8TKDRM&#10;    EVENTUATE_API_KEY_SECRET: fiAKWYEEj7EVxNi6yKXF8WDcVLbYA8Cu5RnFFKjwVOw&#10;    SPRING_DATA_MONGODB_URI: mongodb://mongodb/mydb&#10;&#10;mongodb:&#10;  image: mongo:3.2.9&#10;  hostname: mongodb&#10;  command: mongod --smallfiles&#10;  ports:&#10;    - &#34;27017:27017&#34;</span><br></pre></td></tr></table></figure>
<p>这里面定义了4个容器内容，分别是accountscommandside，transactionscommandside，accountsqueryside，mongodb</p>
<ul>
<li>image：指定为镜像名称或镜像 ID。如果镜像在本地不存在，Compose 将会尝试拉取这个镜像</li>
<li>volumes：卷挂载路径设置，这里是将容器的/app路径挂载到宿主机/build/libs 路径上</li>
<li>command：覆盖容器启动后默认执行的命令，这里是默认直接启动spring boot项目</li>
<li>ports：暴露端口信息，格式如下<ul>
<li>宿主：容器 （HOST:CONTAINER）</li>
<li>容器（宿主会随机选择端口）</li>
</ul>
</li>
<li>links：链接到其它服务中的容器。使用服务名称（同时作为别名）或服务名称：服务别名 （SERVICE:ALIAS）格式都可以。 <ul>
<li>db</li>
<li>db:database</li>
<li>redis</li>
</ul>
</li>
<li>environment：设置环境变量</li>
</ul>
<p>替换成你自己的EVENTUATE_API_KEY_ID和EVENTUATE_API_KEY_SECRET，否则部署后运行测试，会报401未授权错误。</p>
<h4 id="docker-compse_up"><a href="#docker-compse_up" class="headerlink" title="docker-compse up"></a>docker-compse up</h4><p>设置好yml模板以后，使用docker-compse up来启动这4个容器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  java-spring git:(master) ✗ docker-compose up</span><br></pre></td></tr></table></figure>
<p>再开个shell，看下启动的四个容器的状态</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  java-spring git:(master) ✗ docker-compose ps</span><br><span class="line">                Name                              Command               State            Ports</span><br><span class="line">--------------------------------------------------------------------------------------------------------</span><br><span class="line">javaspring_accountscommandside_1       java -jar /app/accounts-co ...   Up      <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8080</span>-&gt;<span class="number">8080</span>/tcp</span><br><span class="line">javaspring_accountsqueryside_1         java -jar /app/accounts-qu ...   Up      <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8081</span>-&gt;<span class="number">8080</span>/tcp</span><br><span class="line">javaspring_mongodb_1                   /entrypoint.sh mongod --sm ...   Up      <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">27017</span>-&gt;<span class="number">27017</span>/tcp</span><br><span class="line">javaspring_transactionscommandside_1   java -jar /app/transaction ...   Up      <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8082</span>-&gt;<span class="number">8080</span>/tcp</span><br></pre></td></tr></table></figure>
<p>四个状态都是up，好了，访问服务测试下。</p>
<h3 id="u6D4B_u8BD5"><a href="#u6D4B_u8BD5" class="headerlink" title="测试"></a>测试</h3><p>先创建2个账户，每个都初始500美元<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  java-spring git:(master) ✗ curl -X POST -H <span class="string">"Content-Type: application/json"</span> -H <span class="string">"Cache-Control: no-cache"</span> <span class="operator">-d</span> <span class="string">'&#123;"initialBalance": 500&#125;'</span> <span class="string">"http://localhost:8080/accounts"</span></span><br><span class="line">&#123;<span class="string">"accountId"</span>:<span class="string">"00000156bfc1c044-0242ac1100460000"</span>&#125;%                                                                            </span><br><span class="line">➜  java-spring git:(master) ✗ curl -X POST -H <span class="string">"Content-Type: application/json"</span> -H <span class="string">"Cache-Control: no-cache"</span> <span class="operator">-d</span> <span class="string">'&#123;"initialBalance": 500&#125;'</span> <span class="string">"http://localhost:8080/accounts"</span></span><br><span class="line">&#123;<span class="string">"accountId"</span>:<span class="string">"00000156bfc1da88-0242ac1100960000"</span>&#125;%</span><br></pre></td></tr></table></figure></p>
<p>根据账户ID查询<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  java-spring git:(master) ✗ curl -X GET <span class="string">"http://localhost:8081/accounts/00000156bfc1c044-0242ac1100460000"</span></span><br><span class="line">&#123;<span class="string">"accountId"</span>:<span class="string">"00000156bfc1c044-0242ac1100460000"</span>,<span class="string">"balance"</span>:<span class="number">50000</span>&#125;%                                                        </span><br><span class="line">➜  java-spring git:(master) ✗ curl -X GET <span class="string">"http://localhost:8081/accounts/00000156bfc1da88-0242ac1100960000"</span></span><br><span class="line">&#123;<span class="string">"accountId"</span>:<span class="string">"00000156bfc1da88-0242ac1100960000"</span>,<span class="string">"balance"</span>:<span class="number">50000</span>&#125;%</span><br></pre></td></tr></table></figure></p>
<p>可以看到每个账户里都有50000美分。试试转账，然后再查询<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  java-spring git:(master) ✗ curl -X POST -H <span class="string">"Content-Type: application/json"</span> <span class="operator">-d</span> <span class="string">'&#123;"fromAccountId" : "00000156bfc1c044-0242ac1100460000", "toAccountId" : "00000156bfc1da88-0242ac1100960000", "amount" : 500&#125;'</span> <span class="string">"http://localhost:8082/transfers"</span></span><br><span class="line">&#123;<span class="string">"moneyTransferId"</span>:<span class="string">"00000156bfc75387-0242ac1100ac0000"</span>&#125;%                                                                                                                                                    </span><br><span class="line">➜  java-spring git:(master) ✗ curl -X GET <span class="string">"http://localhost:8081/accounts/00000156bfc1da88-0242ac1100960000"</span></span><br><span class="line">&#123;<span class="string">"accountId"</span>:<span class="string">"00000156bfc1da88-0242ac1100960000"</span>,<span class="string">"balance"</span>:<span class="number">50000</span>&#125;%                                                                                                                                          </span><br><span class="line">➜  java-spring git:(master) ✗ curl -X GET <span class="string">"http://localhost:8081/accounts/00000156bfc1c044-0242ac1100460000"</span></span><br><span class="line">&#123;<span class="string">"accountId"</span>:<span class="string">"00000156bfc1c044-0242ac1100460000"</span>,<span class="string">"balance"</span>:<span class="number">0</span>&#125;%                                                                                                                                              </span><br><span class="line">➜  java-spring git:(master) ✗ curl -X GET <span class="string">"http://localhost:8081/accounts/00000156bfc1da88-0242ac1100960000"</span></span><br><span class="line">&#123;<span class="string">"accountId"</span>:<span class="string">"00000156bfc1da88-0242ac1100960000"</span>,<span class="string">"balance"</span>:<span class="number">100000</span>&#125;%</span><br></pre></td></tr></table></figure></p>
<p>可以看到中间有个状态是不对的，这个基于事件驱动的，还没有自己看，应该是有延迟，后来再查询就是准确的了。事件驱动的后面会专门看看再整理篇文章。</p>
<h3 id="u7ED3_u8BED"><a href="#u7ED3_u8BED" class="headerlink" title="结语"></a>结语</h3><p>本篇主要描述了如何使用docker-compose构建基于docker的java微服务框架。后续会对里面的知识点做些详细的学习。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h3><p>本文主要参考<a href="http://www.infoq.com/cn/articles/Auto]]>
    </summary>
    
      <category term="CQRS" scheme="http://suqun.github.io/tags/CQRS/"/>
    
      <category term="DOCKER" scheme="http://suqun.github.io/tags/DOCKER/"/>
    
      <category term="Event-Sourcing" scheme="http://suqun.github.io/tags/Event-Sourcing/"/>
    
      <category term="SPRING BOOT" scheme="http://suqun.github.io/tags/SPRING-BOOT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring Cloud构建微服务架构（六）服务网关]]></title>
    <link href="http://suqun.github.io/2016/08/09/springcloud6/"/>
    <id>http://suqun.github.io/2016/08/09/springcloud6/</id>
    <published>2016-08-09T07:47:33.000Z</published>
    <updated>2016-08-09T07:49:45.000Z</updated>
    <content type="html"><![CDATA[<p>原文 : <a href="http://blog.didispace.com/springcloud5/" target="_blank" rel="external">Spring Cloud构建微服务架构（五）服务网关</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文 : <a href="http://blog.didispace.com/springcloud5/" target="_blank" rel="external">Spring Cloud构建微服务架构（五）服务网关</a></p>
]]>
    </summary>
    
      <category term="SPRING BOOT" scheme="http://suqun.github.io/tags/SPRING-BOOT/"/>
    
      <category term="ZUUL" scheme="http://suqun.github.io/tags/ZUUL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring Cloud构建微服务架构（五）分布式配置中心]]></title>
    <link href="http://suqun.github.io/2016/08/09/SpringCloud5/"/>
    <id>http://suqun.github.io/2016/08/09/SpringCloud5/</id>
    <published>2016-08-09T02:38:46.000Z</published>
    <updated>2016-08-09T02:45:07.000Z</updated>
    <content type="html"><![CDATA[<p>原文 : <a href="http://blog.didispace.com/springcloud4/" target="_blank" rel="external">Spring Cloud构建微服务架构（四）分布式配置中心</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文 : <a href="http://blog.didispace.com/springcloud4/" target="_blank" rel="external">Spring Cloud构建微服务架构（四）分布式配置中心</a></p>
]]>
    </summary>
    
      <category term="SPRING BOOT" scheme="http://suqun.github.io/tags/SPRING-BOOT/"/>
    
      <category term="SPRING CLOUD CONFIG" scheme="http://suqun.github.io/tags/SPRING-CLOUD-CONFIG/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring Cloud构建微服务架构（四）集群]]></title>
    <link href="http://suqun.github.io/2016/08/05/Spring-Cloud%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%88%E5%9B%9B%EF%BC%89%E9%9B%86%E7%BE%A4/"/>
    <id>http://suqun.github.io/2016/08/05/Spring-Cloud构建微服务架构（四）集群/</id>
    <published>2016-08-05T02:07:59.000Z</published>
    <updated>2016-08-06T02:22:56.000Z</updated>
    <content type="html"><![CDATA[<p>前面三篇都分享自<a href="http://blog.didispace.com/" target="_blank" rel="external">程序猿DD</a>的博客,暂时(2016年08月05日)还没有更新关于Eureka集群的博客。<br>这里参考了<a href="https://segmentfault.com/blog/mumubin" target="_blank" rel="external">木木彬</a>的<a href="https://segmentfault.com/a/1190000006149891" target="_blank" rel="external">Spring Cloud实战(二)-Spring Cloud Eureka</a>博客内容。<br>对集群配置简单记录下,方便以后查阅。同时也期待<code>程序猿DD</code>更新更多更精彩的博客。</p>
<p>本文代码基于<a href="https://git.oschina.net/didispace/SpringBoot-Learning/tree/master/Chapter9-1-3?dir=1&amp;filepath=Chapter9-1-3&amp;oid=cc93af44af30b42320041332790d071ed72a2450&amp;sha=4329c564d673b6cf7a53893ad9770abb7a67b328" target="_blank" rel="external">程序猿DD / SpringBoot-Learning / Chapter9-1-3</a>进行集群配置。</p>
<p>Spring Cloud 官方文档上对集群配置介绍的非常简单，对Eureka Server进行<a href="http://cloud.spring.io/spring-cloud-static/docs/1.0.x/spring-cloud.html#_peer_awareness" target="_blank" rel="external">Peer Awareness</a>配置，这样多个服务端就可以关联到一起。好了，下面看看具体的配置。</p>
<h4 id="hosts_u4FEE_u6539"><a href="#hosts_u4FEE_u6539" class="headerlink" title="hosts修改"></a>hosts修改</h4><p>在hosts（路径：/etc/hosts）文件中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1       eureka-primary&#10;127.0.0.1       eureka-secondary&#10;127.0.0.1       eureka-tertiary</span><br></pre></td></tr></table></figure>
<h4 id="u670D_u52A1_u7AEF_u914D_u7F6E"><a href="#u670D_u52A1_u7AEF_u914D_u7F6E" class="headerlink" title="服务端配置"></a>服务端配置</h4><p>先注释掉application.properties中的配置，添加application.yml，在yml添加多个profiles,和instanceId，此时Eureka Server 同时也是个Eureka Client,需要设置eureka.client.serviceUrl.defaultZone,值是另外两个（这就是官网所说的<code>Peer Awareness</code>）:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---&#10;spring:&#10;  application:&#10;    name: eureka-server-clustered&#10;  profiles: primary&#10;server:&#10;  port: 1111&#10;eureka:&#10;  instance:&#10;    hostname: eureka-primary&#10;  client:&#10;    registerWithEureka: true&#10;    fetchRegistry: true&#10;    serviceUrl:&#10;      defaultZone: http://eureka-secondary:1112/eureka/,http://eureka-tertiary:1113/eureka/&#10;---&#10;spring:&#10;  application:&#10;    name: eureka-server-clustered&#10;  profiles: secondary&#10;server:&#10;  port: 1112&#10;eureka:&#10;  instance:&#10;    hostname: eureka-secondary&#10;  client:&#10;    registerWithEureka: true&#10;    fetchRegistry: true&#10;    serviceUrl:&#10;      defaultZone: http://eureka-secondary:1111/eureka/,http://eureka-tertiary:1113/eureka/&#10;---&#10;spring:&#10;  application:&#10;    name: eureka-server-clustered&#10;  profiles: tertiary&#10;server:&#10;  port: 1113&#10;eureka:&#10;  instance:&#10;    hostname: eureka-tertiary&#10;  client:&#10;    registerWithEureka: true&#10;    fetchRegistry: true&#10;    serviceUrl:&#10;      defaultZone: http://eureka-secondary:1111/eureka/,http://eureka-tertiary:1112/eureka/</span><br></pre></td></tr></table></figure>
<h4 id="u670D_u52A1_u7AEF_u542F_u52A8"><a href="#u670D_u52A1_u7AEF_u542F_u52A8" class="headerlink" title="服务端启动"></a>服务端启动</h4><p>配置完成，要分别启动3个Server，分别执行下面的命令即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  eureka-server git:(master) ✗ mvn clean &amp;&amp; mvn install</span><br><span class="line">➜  eureka-server git:(master) ✗ <span class="built_in">cd</span> target</span><br><span class="line">➜  target git:(master) ✗ java -Dspring.profiles.active=primary -jar eureka-server-<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  target git:(master) ✗ java -Dspring.profiles.active=secondary -jar eureka-server-<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  target git:(master) ✗ java -Dspring.profiles.active=tertiary -jar eureka-server-<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<p>我们访问其中一个服务地址<a href="http://localhost:1111/" target="_blank" rel="external">http://localhost:1111/</a> 可以看到如下内容，说明服务启动成功：</p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/eureka-server-1.png" alt="Eureka Server"></p>
<h4 id="u5BA2_u6237_u7AEF_u914D_u7F6E"><a href="#u5BA2_u6237_u7AEF_u914D_u7F6E" class="headerlink" title="客户端配置"></a>客户端配置</h4><p>服务端已准备就绪，客户端如何注册到多个服务地址呢？其实在服务端配置defaultZone时，指定多个地址，就告诉我们客户端也这么指定就可以啦。</p>
<p>修改compute-service的application.properties中的defaultZone值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#25351;&#23450;&#24494;&#26381;&#21153;&#30340;&#21517;&#31216;&#21518;&#32493;&#22312;&#35843;&#29992;&#30340;&#26102;&#20505;&#21482;&#38656;&#35201;&#20351;&#29992;&#35813;&#21517;&#31216;&#23601;&#21487;&#20197;&#36827;&#34892;&#26381;&#21153;&#30340;&#35775;&#38382;&#10;spring.application.name=compute-service&#10;#&#24212;&#29992;&#31471;&#21475;&#10;server.port=2222&#10;#&#25351;&#23450;&#26381;&#21153;&#27880;&#20876;&#20013;&#24515;&#30340;&#20301;&#32622;&#10;#eureka.client.serviceUrl.defaultZone=http://localhost:1111/eureka/&#10;eureka.client.serviceUrl.defaultZone=http://eureka-primary:1111/eureka/,http://eureka-secondary:1112/eureka/,http://eureka-tertiary:1113/eureka/</span><br></pre></td></tr></table></figure>
<h4 id="u542F_u52A8_u5BA2_u6237_u7AEF"><a href="#u542F_u52A8_u5BA2_u6237_u7AEF" class="headerlink" title="启动客户端"></a>启动客户端</h4><p>客户端默认端口是2222，我们启动2个客户端，另一个端口用2223好了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  compute-service git:(master) ✗ mvn clean &amp;&amp; mvn insatll</span><br><span class="line">➜  compute-service git:(master) ✗ <span class="built_in">cd</span> target</span><br><span class="line">➜  target git:(master) ✗ java -jar compute-service-<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  target git:(master) ✗ java -DServer.port=<span class="number">2223</span> -jar compute-service-<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<p>重新查看下<a href="http://localhost:1111/" target="_blank" rel="external">http://localhost:1111/</a></p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/eureka-server-2.png" alt="client starting"></p>
<p>2个客户端启动成功了。</p>
<h4 id="u6D4B_u8BD5"><a href="#u6D4B_u8BD5" class="headerlink" title="测试"></a>测试</h4><p>启动消费者eureka-ribbon成功后，简单测试下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ curl localhost:<span class="number">3333</span>/add</span><br><span class="line"><span class="number">30</span>%</span><br></pre></td></tr></table></figure>
<p>一个客户端也打出了日志</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">11</span>:<span class="number">18</span>:<span class="number">23.554</span>  INFO <span class="number">5127</span> --- [nio-<span class="number">2223</span>-exec-<span class="number">1</span>] com.ow.wises.web.ComputeController       : /add, host:<span class="number">192.168</span>.<span class="number">1.145</span>, service_id:compute-service, result:<span class="number">30</span></span><br></pre></td></tr></table></figure>
<p>好了，就先这样了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前面三篇都分享自<a href="http://blog.didispace.com/" target="_blank" rel="external">程序猿DD</a>的博客,暂时(2016年08月05日)还没有更新关于Eureka集群的博客。<br>这里参考了<a hr]]>
    </summary>
    
      <category term="EUREKA" scheme="http://suqun.github.io/tags/EUREKA/"/>
    
      <category term="NETFLIX" scheme="http://suqun.github.io/tags/NETFLIX/"/>
    
      <category term="RIBBON" scheme="http://suqun.github.io/tags/RIBBON/"/>
    
      <category term="SPRING BOOT" scheme="http://suqun.github.io/tags/SPRING-BOOT/"/>
    
      <category term="SPRING CLOUD" scheme="http://suqun.github.io/tags/SPRING-CLOUD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring Cloud构建微服务架构（三）断路器]]></title>
    <link href="http://suqun.github.io/2016/08/05/Spring-Cloud%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%88%E4%B8%89%EF%BC%89%E6%96%AD%E8%B7%AF%E5%99%A8/"/>
    <id>http://suqun.github.io/2016/08/05/Spring-Cloud构建微服务架构（三）断路器/</id>
    <published>2016-08-05T02:02:21.000Z</published>
    <updated>2016-08-06T02:22:56.000Z</updated>
    <content type="html"><![CDATA[<p>原文 : <a href="http://blog.didispace.com/springcloud3/" target="_blank" rel="external">Spring Cloud构建微服务架构（三）断路器</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文 : <a href="http://blog.didispace.com/springcloud3/" target="_blank" rel="external">Spring Cloud构建微服务架构（三）断路器</a></p>
]]>
    </summary>
    
      <category term="EUREKA" scheme="http://suqun.github.io/tags/EUREKA/"/>
    
      <category term="HYSTRIX" scheme="http://suqun.github.io/tags/HYSTRIX/"/>
    
      <category term="NETFLIX" scheme="http://suqun.github.io/tags/NETFLIX/"/>
    
      <category term="SPRING BOOT" scheme="http://suqun.github.io/tags/SPRING-BOOT/"/>
    
      <category term="SPRING CLOUD" scheme="http://suqun.github.io/tags/SPRING-CLOUD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring Cloud构建微服务架构（二）服务消费者]]></title>
    <link href="http://suqun.github.io/2016/08/05/Spring-Cloud%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%88%E4%BA%8C%EF%BC%89%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9%E8%80%85/"/>
    <id>http://suqun.github.io/2016/08/05/Spring-Cloud构建微服务架构（二）服务消费者/</id>
    <published>2016-08-05T02:00:33.000Z</published>
    <updated>2016-08-06T02:22:56.000Z</updated>
    <content type="html"><![CDATA[<p>原文 : <a href="http://blog.didispace.com/springcloud2/" target="_blank" rel="external">Spring Cloud构建微服务架构（二）服务消费者</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文 : <a href="http://blog.didispace.com/springcloud2/" target="_blank" rel="external">Spring Cloud构建微服务架构（二）服务消费者</a></p>
]]>
    </summary>
    
      <category term="EUREKA" scheme="http://suqun.github.io/tags/EUREKA/"/>
    
      <category term="FEIGN" scheme="http://suqun.github.io/tags/FEIGN/"/>
    
      <category term="NETFLIX" scheme="http://suqun.github.io/tags/NETFLIX/"/>
    
      <category term="RIBBON" scheme="http://suqun.github.io/tags/RIBBON/"/>
    
      <category term="SPRING BOOT" scheme="http://suqun.github.io/tags/SPRING-BOOT/"/>
    
      <category term="SPRING CLOUD" scheme="http://suqun.github.io/tags/SPRING-CLOUD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring Cloud构建微服务架构（一）服务注册与发现]]></title>
    <link href="http://suqun.github.io/2016/08/05/Spring-Cloud%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%88%E4%B8%80%EF%BC%89%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"/>
    <id>http://suqun.github.io/2016/08/05/Spring-Cloud构建微服务架构（一）服务注册与发现/</id>
    <published>2016-08-05T01:55:21.000Z</published>
    <updated>2016-08-05T08:44:37.000Z</updated>
    <content type="html"><![CDATA[<p>原文 : <a href="http://blog.didispace.com/springcloud1/" target="_blank" rel="external">Spring Cloud构建微服务架构（一）服务注册与发现</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文 : <a href="http://blog.didispace.com/springcloud1/" target="_blank" rel="external">Spring Cloud构建微服务架构（一）服务注册与发现</a></p>
]]>
    </summary>
    
      <category term="EUREKA" scheme="http://suqun.github.io/tags/EUREKA/"/>
    
      <category term="NETFLIX" scheme="http://suqun.github.io/tags/NETFLIX/"/>
    
      <category term="SPRING BOOT" scheme="http://suqun.github.io/tags/SPRING-BOOT/"/>
    
      <category term="SPRING CLOUD" scheme="http://suqun.github.io/tags/SPRING-CLOUD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java NIO Buffer]]></title>
    <link href="http://suqun.github.io/2016/06/28/Java-NIO-Buffer/"/>
    <id>http://suqun.github.io/2016/06/28/Java-NIO-Buffer/</id>
    <published>2016-06-28T14:10:31.000Z</published>
    <updated>2016-08-06T02:15:42.000Z</updated>
    <content type="html"><![CDATA[<p>Java NIO Buffers是和NIO的Channels交互使用的。你知道的，数据是从Channel中读到Buffer里，数据从Buffer里写入到Channel中。 </p>
<p>Buffer本质上是可以读写数据的内存块。这个内存块被NIO的Buffer对象包裹，然后提供很多方法以便能够简单的操作这个内存块。</p>
<h4 id="Basic_Buffer_Usage"><a href="#Basic_Buffer_Usage" class="headerlink" title="Basic Buffer Usage"></a>Basic Buffer Usage</h4><p>使用Buffer读写数据基本上就4步：</p>
<ol>
<li>数据写入Buffer</li>
<li>调用 buffer.flip()</li>
<li>Read data out of the Buffer</li>
<li>Call buffer.clear() or buffer.compact()</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>Java NIO Buffers是和NIO的Channels交互使用的。你知道的，数据是从Channel中读到Buffer里，数据从Buffer里写入到Channel中。 </p>
<p>Buffer本质上是可以读写数据的内存块。这个内存块被NIO的Buffer对象包裹，然]]>
    </summary>
    
      <category term="JAVA NIO" scheme="http://suqun.github.io/tags/JAVA-NIO/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java NIO Channel]]></title>
    <link href="http://suqun.github.io/2016/06/26/Java-NIO-Channel/"/>
    <id>http://suqun.github.io/2016/06/26/Java-NIO-Channel/</id>
    <published>2016-06-26T13:04:43.000Z</published>
    <updated>2016-08-06T02:15:42.000Z</updated>
    <content type="html"><![CDATA[<p>Java NIO 的Channels有些像流，但是也有一些区别：</p>
<ul>
<li>可以向一个Channel即读又写。流是典型的单向的（写或者读）</li>
<li>Channels的读写是异步的</li>
<li>Channels总是读数据到Buffer中，或者将Buffer中的数据写入Channel</li>
</ul>
<p>上面提到的，从channel中读取数据至buffer中，将buffer中的数据写入channel中：</p>
<p><img src="http://tutorials.jenkov.com/images/java-nio/overview-channels-buffers.png" alt="Java NIO: Channels read data into Buffers, and Buffers write data into Channels"><br><strong>Java NIO: Channels read data into Buffers, and Buffers write data into Channels</strong></p>
<h4 id="Channel_Implementations"><a href="#Channel_Implementations" class="headerlink" title="Channel Implementations"></a>Channel Implementations</h4><p>在Java NIO中有一些比较重要的channel实现类：</p>
<ul>
<li>FileChannel</li>
<li>DatagramChannel</li>
<li>SocketChannel</li>
<li>ServerSocketChannel</li>
</ul>
<p><code>FileChannel</code>从文件中读取数据。<br><code>DatagramChannel</code>通过UDP读写网络中的数据。<br><code>SocketChannel</code>通过TCP读写网络中的数据。<br><code>ServerSocketChannel</code>可以监听新进来的TCP连接，像Web服务器那样，对每一个新进来的连接都会创建一个SocketChannel。</p>
<h4 id="Basic_Channel_Example"><a href="#Basic_Channel_Example" class="headerlink" title="Basic Channel Example"></a>Basic Channel Example</h4><p>下面是一个使用<code>FileChannel</code>读数据到Buffer中的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        RandomAccessFile accessFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"nio-data.txt"</span>,<span class="string">"rw"</span>);</span><br><span class="line">        FileChannel fileChannel = accessFile.getChannel();</span><br><span class="line"></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> bytesRead = fileChannel.read(buffer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (bytesRead != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Read "</span> + bytesRead);</span><br><span class="line">            buffer.flip();</span><br><span class="line">            <span class="keyword">if</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>) buffer.get());</span><br><span class="line">            &#125;</span><br><span class="line">            buffer.clear();</span><br><span class="line">            bytesRead = fileChannel.read(buffer);</span><br><span class="line">        &#125;</span><br><span class="line">        accessFile.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意 buf.flip() 的调用，首先读取数据到Buffer，然后反转Buffer，接着再从Buffer中读取数据。下一节会深入讲解Buffer的更多细节。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Java NIO 的Channels有些像流，但是也有一些区别：</p>
<ul>
<li>可以向一个Channel即读又写。流是典型的单向的（写或者读）</li>
<li>Channels的读写是异步的</li>
<li>Channels总是读数据到Buffer中，或者将]]>
    </summary>
    
      <category term="JAVA NIO" scheme="http://suqun.github.io/tags/JAVA-NIO/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java NIO 概述]]></title>
    <link href="http://suqun.github.io/2016/06/25/Java-NIO-Overview/"/>
    <id>http://suqun.github.io/2016/06/25/Java-NIO-Overview/</id>
    <published>2016-06-25T05:27:34.000Z</published>
    <updated>2016-08-06T02:15:42.000Z</updated>
    <content type="html"><![CDATA[<p>Java NIO 包含下面三个核心组件:</p>
<ul>
<li>Channels</li>
<li>Buffers</li>
<li>Selectors</li>
</ul>
<p>Java NIO 还有很多其他的类和组件,Channel,Buffer,Selector是核心的API。其他的组件,诸如Pipe、FileLock仅仅只是这3个核心组组件的实际应用。</p>
<h4 id="Channels_and_Buffers"><a href="#Channels_and_Buffers" class="headerlink" title="Channels  and Buffers"></a>Channels  and Buffers</h4><p>典型的,NIO中的所有IO都是起始于Channel。Channel有点像流。可以将Channel中数据读到Buffer里,也可以将Buffer里的数据写入Channel中。说明如下:</p>
<p><img src="http://tutorials.jenkov.com/images/java-nio/overview-channels-buffers.png" alt="Java NIO: Channels read data into Buffers, and Buffers write data into Channels"><br><strong>Java NIO: Channels read data into Buffers, and Buffers write data into Channels</strong></p>
<p>Java NIO中主要的Channel实现类有：</p>
<ul>
<li>FileChannel</li>
<li>DatagramChannel</li>
<li>SocketChannel</li>
<li>ServerSocketChannel</li>
</ul>
<p>可以看出,这些channels覆盖了UDP+TCP的网络IO,以及文件IO。</p>
<p>Java NIO中主要的Buffer实现类有:</p>
<ul>
<li>ByteBuffer</li>
<li>CharBuffer</li>
<li>DoubleBuffer</li>
<li>FloatBuffer</li>
<li>IntBuffer</li>
<li>LongBuffer</li>
<li>ShortBuffer</li>
</ul>
<p>这些实现类也包含了通过IO发送数据所需要的基本的数据类型：byte、short、int、long、float、double、Char型。</p>
<p>Java NIO也有 MappedByteBuffer类型，用于表示内存映射文件。</p>
<h4 id="Selectors"><a href="#Selectors" class="headerlink" title="Selectors"></a>Selectors</h4><p>一个Selectors允许一个单线程同时处理多个Channel。如果应用中有很多打开的连接（Channels）这么做是很方便的，但是每个连接的流量都很低。比如，聊天服务器。</p>
<p>下面是一个Selector处理3个Channel的说明：</p>
<p><img src="http://tutorials.jenkov.com/images/java-nio/overview-selectors.png" alt="Java NIO: A Thread uses a Selector to handle 3 Channel&#39;s"><br><strong>Java NIO: A Thread uses a Selector to handle 3 Channel’s</strong></p>
<p>先将Channels注册到Selector中，然后调用他的select()方法。这个方法会阻塞直到有注册的channel相应的事件触发。一旦这个方法返回，线程就可以处理这个事件。比如正在打开的连接，获取到数据的事件等等。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Java NIO 包含下面三个核心组件:</p>
<ul>
<li>Channels</li>
<li>Buffers</li>
<li>Selectors</li>
</ul>
<p>Java NIO 还有很多其他的类和组件,Channel,Buffer,Selector]]>
    </summary>
    
      <category term="JAVA NIO" scheme="http://suqun.github.io/tags/JAVA-NIO/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java NIO 教程]]></title>
    <link href="http://suqun.github.io/2016/06/25/Java-NIO-Tutorial/"/>
    <id>http://suqun.github.io/2016/06/25/Java-NIO-Tutorial/</id>
    <published>2016-06-25T05:24:25.000Z</published>
    <updated>2016-08-06T02:15:42.000Z</updated>
    <content type="html"><![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/classes.html" target="_blank" rel="external">Java Reflection</a></p>
<p>Java NIO(New IO) 是java(从java1.4开始) IO API的一个选择,可以代替Java标准IO和Java网络编程API。对于标准的IO来说,Java NIO提供了不同的处理IO的方式。</p>
<h4 id="Channels_and_Buffers"><a href="#Channels_and_Buffers" class="headerlink" title="Channels and Buffers"></a>Channels and Buffers</h4><p>在标准的IO API中,使用字节流和字符流。在NIO中需要用到channels和buffers。数据总是从channel获取读到buffer中,从buffer中获取写入channel。</p>
<h4 id="Non-blocking_IO"><a href="#Non-blocking_IO" class="headerlink" title="Non-blocking IO"></a>Non-blocking IO</h4><p>Java NIO 可以非阻塞式的处理IO。比如,一个线程将channel的数据读到buffer。在读的过程中,线程可以做其他事情。一旦数据读取完毕放到buffer中,线程在继续处理。写数据也是一样的操作。</p>
<h4 id="Selectors"><a href="#Selectors" class="headerlink" title="Selectors"></a>Selectors</h4><p>Java NIO 有个 『selectors』的概念,一个selector就是一个对象,通过事件(比如:连接打开,数据到达等等)监控多个channels。这样,一个单独的线程就可以监控多个channel的数据。</p>
<p>这些都是如何工作的,本系列的下一章 <a href="/">the Java NIO overview</a>会详细描述。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/classes.html" target="_blank" rel="external">Java Reflection</a></p>
<p>Java NIO]]>
    </summary>
    
      <category term="JAVA NIO" scheme="http://suqun.github.io/tags/JAVA-NIO/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java反射之数组]]></title>
    <link href="http://suqun.github.io/2016/06/24/JavaReflectionArray/"/>
    <id>http://suqun.github.io/2016/06/24/JavaReflectionArray/</id>
    <published>2016-06-24T12:52:55.000Z</published>
    <updated>2016-08-06T02:15:42.000Z</updated>
    <content type="html"><![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/arrays.html" target="_blank" rel="external">Java Reflection Arrays</a></p>
<p>在Java反射里面处理数组有时是比较棘手的.特别是你需要获得数组对象的实际类型.例如 int[]等待.这篇文字就来讨论通过反射如何创建数组如何获取数组中的对象.</p>
<h4 id="java-lang-reflect-Array"><a href="#java-lang-reflect-Array" class="headerlink" title="java.lang.reflect.Array"></a>java.lang.reflect.Array</h4><p>通过Java反射使用数组用到的是类java.lang.reflect.Array,不要和Java集合中的java.util.Arrays混淆.</p>
<h4 id="Creating_Arrays"><a href="#Creating_Arrays" class="headerlink" title="Creating Arrays"></a>Creating Arrays</h4><p>通过Java反射创建数组使用类java.lang.reflect.Array,下面给出了创建数组的例子:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] intArray = (<span class="keyword">int</span>[]) Array.newInstance(<span class="keyword">int</span>.class,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>这是创建int类型数组的例子. Array.newInstance()方法的第一个参数<code>int.class</code>给出了数组元素类型,第二个参数<code>3</code>是数组需要分配的空间</p>
<h4 id="Accessing_Arrays"><a href="#Accessing_Arrays" class="headerlink" title="Accessing Arrays"></a>Accessing Arrays</h4><p>通过反射访问数组元素可以使用<code>Array.get()</code>和<code>Array.set()</code>方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] intArray = (<span class="keyword">int</span>[]) Array.newInstance(<span class="keyword">int</span>.class,<span class="number">3</span>);</span><br><span class="line">Array.set(intArray,<span class="number">0</span>,<span class="number">123</span>)</span><br><span class="line">Array.set(intArray,<span class="number">1</span>,<span class="number">456</span>)</span><br><span class="line">Array.set(intArray,<span class="number">1</span>,<span class="number">789</span>)</span><br><span class="line">   </span><br><span class="line">System.out.println(<span class="string">"intArray[0] = "</span> + Array.get(intArray, <span class="number">0</span>));</span><br><span class="line">System.out.println(<span class="string">"intArray[1] = "</span> + Array.get(intArray, <span class="number">1</span>));</span><br><span class="line">System.out.println(<span class="string">"intArray[2] = "</span> + Array.get(intArray, <span class="number">2</span>));</span><br></pre></td></tr></table></figure>
<p>打印出来的结果为:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">intArray[<span class="number">0</span>] = <span class="number">123</span></span><br><span class="line">intArray[<span class="number">1</span>] = <span class="number">456</span></span><br><span class="line">intArray[<span class="number">2</span>] = <span class="number">789</span></span><br></pre></td></tr></table></figure>
<h4 id="u83B7_u53D6_u6570_u7EC4_u7684Class_u5BF9_u8C61"><a href="#u83B7_u53D6_u6570_u7EC4_u7684Class_u5BF9_u8C61" class="headerlink" title="获取数组的Class对象"></a>获取数组的Class对象</h4><p>在我编写<a href="http://butterfly.jenkov.com/" target="_blank" rel="external">Butterfly DI Container</a>的脚本语言时，当我想通过反射获取数组的Class对象时遇到了一点麻烦。如果不通过反射的话你可以这样来获取数组的Class对象：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class stringArrayClass = String[].class;</span><br></pre></td></tr></table></figure>
<p>如果使用Class.forName()方法来获取Class对象则不是那么简单。比如你可以像这样来获得一个原生数据类型（primitive）int数组的Class对象：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class intArray = Class.forName(<span class="string">"[I"</span>);</span><br></pre></td></tr></table></figure>
<p>在JVM中字母I代表int类型，左边的‘[’代表我想要的是一个int类型的数组，这个规则同样适用于其他的原生数据类型。对于普通对象类型的数组有一点细微的不同：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class stringArrayClass = Class.forName(<span class="string">"[Ljava.lang.String;"</span>);</span><br></pre></td></tr></table></figure>
<p>注意‘[L’的右边是类名，类名的右边是一个‘;’符号。这个的含义是一个指定类型的数组。需要注意的是，你不能通过Class.forName()方法获取一个原生数据类型的Class对象。下面这两个例子都会报ClassNotFoundException：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class intClass1 = Class.forName(<span class="string">"I"</span>);</span><br><span class="line">Class intClass2 = Class.forName(<span class="string">"int"</span>);</span><br></pre></td></tr></table></figure>
<p>我通常会用下面这个方法来获取普通对象以及原生对象的Class对象：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">getClass</span><span class="params">(String className)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="string">"int"</span> .equals(className)) <span class="keyword">return</span> <span class="keyword">int</span> .class;</span><br><span class="line">  <span class="keyword">if</span>(<span class="string">"long"</span>.equals(className)) <span class="keyword">return</span> <span class="keyword">long</span>.class;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> Class.forName(className);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一旦你获取了类型的Class对象，你就有办法轻松的获取到它的数组的Class对象，你可以通过指定的类型创建一个空的数组，然后通过这个空的数组来获取数组的Class对象。这样做有点讨巧，不过很有效。如下例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class theClass = getClass(theClassName);</span><br><span class="line">Class stringArrayClass = Array.newInstance(theClass, <span class="number">0</span>).getClass();</span><br></pre></td></tr></table></figure>
<p>这是一个特别的方式来获取指定类型的指定数组的Class对象。无需使用类名或其他方式来获取这个Class对象。<br>为了确保Class对象是不是代表一个数组，你可以使用Class.isArray()方法来进行校验：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class stringArrayClass = Array.newInstance(String.class, <span class="number">0</span>).getClass();</span><br><span class="line">System.out.println(<span class="string">"is array: "</span> + stringArrayClass.isArray());</span><br></pre></td></tr></table></figure>
<h4 id="u83B7_u53D6_u6570_u7EC4_u7684_u6210_u5458_u7C7B_u578B"><a href="#u83B7_u53D6_u6570_u7EC4_u7684_u6210_u5458_u7C7B_u578B" class="headerlink" title="获取数组的成员类型"></a>获取数组的成员类型</h4><p>一旦你获取了一个数组的Class对象，你就可以通过Class.getComponentType()方法获取这个数组的成员类型。成员类型就是数组存储的数据类型。例如，数组int[]的成员类型就是一个Class对象int.class。String[]的成员类型就是java.lang.String类的Class对象。<br>下面是一个访问数组成员类型的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String[] strings = <span class="keyword">new</span> String[<span class="number">3</span>];</span><br><span class="line">Class stringArrayClass = strings.getClass();</span><br><span class="line">Class stringArrayComponentType = stringArrayClass.getComponentType();</span><br><span class="line">System.out.println(stringArrayComponentType);</span><br></pre></td></tr></table></figure>
<p>下面这个例子会打印<code>java.lang.String</code>代表这个数组的成员类型是字符串。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/arrays.html" target="_blank" rel="external">Java Reflection Arrays</a></p>
<p>在J]]>
    </summary>
    
      <category term="JAVA" scheme="http://suqun.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java反射之泛型]]></title>
    <link href="http://suqun.github.io/2016/05/21/JavaReflectionGenerics/"/>
    <id>http://suqun.github.io/2016/05/21/JavaReflectionGenerics/</id>
    <published>2016-05-20T16:52:55.000Z</published>
    <updated>2016-08-06T02:15:42.000Z</updated>
    <content type="html"><![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/generics.html" target="_blank" rel="external">Java Reflection Generics</a></p>
<h4 id="Generic_Method_Return_Types"><a href="#Generic_Method_Return_Types" class="headerlink" title="Generic Method Return Types"></a>Generic Method Return Types</h4><p>如果你已经获取一个<code>java.lang.reflect.Method</code>的对象，就可以获取到该对象上的泛型返回类型信息。如果方法是在一个被参数化类型之中（如T fun()）那么你无法获取他的具体类型，但是如果方法返回一个泛型类（如List fun()）那么你就可以获得这个泛型类的具体参数化类型。下面这个例子定义了一个类这个类中的方法返回类型是一个泛型类型：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getStringList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个例子是可以获取到<code>getStringList()</code>方法的泛型返回类型。可以检测到<code>getStringList()</code>方法返回的List并不仅仅是一个List。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">       Method method = MyClass.class.getMethod(<span class="string">"getStringList"</span>);</span><br><span class="line">       Type returnType = method.getGenericReturnType();</span><br><span class="line">       <span class="keyword">if</span> (returnType <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">           ParameterizedType type = (ParameterizedType) returnType;</span><br><span class="line">           Type[] typeArguments = type.getActualTypeArguments();</span><br><span class="line">           <span class="keyword">for</span> (Type typeArgument : typeArguments) &#123;</span><br><span class="line">               Class typeArgClass = (Class) typeArgument;</span><br><span class="line">               System.out.println(<span class="string">"typeArgClass:"</span> + typeArgClass);<span class="comment">//typeArgClass:class java.lang.String</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>Type[]数组typeArguments只有一个结果 – 一个代表java.lang.String的Class类的实例。Class类实现了Type接口。</p>
<h4 id="Generic_Method_Parameter_Types"><a href="#Generic_Method_Parameter_Types" class="headerlink" title="Generic Method Parameter Types"></a>Generic Method Parameter Types</h4><p>使用Java反射还可以获取参数上的泛型，例子如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStringList</span><span class="params">(List&lt;String&gt; stringList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stringList = stringList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>像下面这样获取参数上的泛型：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Method method2 = MyClass.class.getMethod(<span class="string">"setStringList"</span>, List.class);</span><br><span class="line">Type[] genericParameterTypes = method2.getGenericParameterTypes();</span><br><span class="line"><span class="keyword">for</span> (Type genericParameterType : genericParameterTypes) &#123;</span><br><span class="line">    <span class="keyword">if</span>(genericParameterType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">        ParameterizedType aType = (ParameterizedType) genericParameterType;</span><br><span class="line">        Type[] parameterArgTypes = aType.getActualTypeArguments();</span><br><span class="line">        <span class="keyword">for</span>(Type parameterArgType : parameterArgTypes)&#123;</span><br><span class="line">            Class parameterArgClass = (Class) parameterArgType;</span><br><span class="line">            System.out.println(<span class="string">"parameterArgClass = "</span> + parameterArgClass);<span class="comment">//parameterArgClass = class java.lang.String</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码打印出”parameterArgType = java.lang.String”。parameterArgTypes这个数组包含的是代表java.lang.String的Class类的实例。Class类实现了Type接口。</p>
<h4 id="Generic_Field_Types"><a href="#Generic_Field_Types" class="headerlink" title="Generic Field Types"></a>Generic Field Types</h4><p>访问public的泛型变量，无论这个变量是一个类的静态成员变量或是实例成员变量。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Field field = MyClass.class.getField(<span class="string">"stringList"</span>);</span><br><span class="line"></span><br><span class="line">Type genericFieldType = field.getGenericType();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(genericFieldType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">    ParameterizedType aType = (ParameterizedType) genericFieldType;</span><br><span class="line">    Type[] fieldArgTypes = aType.getActualTypeArguments();</span><br><span class="line">    <span class="keyword">for</span>(Type fieldArgType : fieldArgTypes)&#123;</span><br><span class="line">        Class fieldArgClass = (Class) fieldArgType;</span><br><span class="line">        System.out.println(<span class="string">"fieldArgClass = "</span> + fieldArgClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码打印出”fieldArgClass = java.lang.String”。fieldArgTypes这个数组包含的是代表java.lang.String的Class类的实例。Class类实现了Type接口。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/generics.html" target="_blank" rel="external">Java Reflection Generics</a></p>
<]]>
    </summary>
    
      <category term="JAVA" scheme="http://suqun.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java反射之注解]]></title>
    <link href="http://suqun.github.io/2016/05/18/JavaReflectionAnnotations/"/>
    <id>http://suqun.github.io/2016/05/18/JavaReflectionAnnotations/</id>
    <published>2016-05-17T16:52:55.000Z</published>
    <updated>2016-08-06T02:15:42.000Z</updated>
    <content type="html"><![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/annotations.html" target="_blank" rel="external">Java Reflection Annotations</a></p>
<p>在运行时状态下，你可以通过反射获取java对象上的注解。</p>
<h4 id="What_are_Java_Annotations_3F"><a href="#What_are_Java_Annotations_3F" class="headerlink" title="What are Java Annotations?"></a>What are Java Annotations?</h4><p>注解是Java5增加的功能。注解是一种注释或者是元数据可以直接插入到Java代码中。在编译时，通过预编译工具处理；或者在运行时，通过java反射处理。下面是个注解的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@MyAnnotation</span>(name=<span class="string">"someName"</span>,  value = <span class="string">"Hello World"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类TheClass的上面有个<code>@MyAnnotation</code>的注解。注解的定义类似接口定义，下面是注解定义的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="annotation">@Target</span>(ElementType.TYPE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="annotation">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建注解是，在interface前面使用<code>@</code>即可。创建之后就可以在代码里使用了，例如上面的例子。</p>
<p><code>@Retention(RetentionPolicy.RUNTIME)</code> 和 <code>@Target(ElementType.TYPE)</code>这两个指令，指明了这个注解如何被使用。</p>
<p><code>@Retention(RetentionPolicy.RUNTIME)</code> 意味着在运行时状态可以使用java反射获取注解，如果不设置这个指令，在运行时状态，注解不会被保存，同样的也就不能通过反射获取。 </p>
<p><code>@Target(ElementType.TYPE)</code>意味着注解只能用在Types上（比如类和接口）。你也可以指定为<code>METHOD</code>或者是<code>FIELD</code>，或者是不使用Target这个指令，这样你就可以在类，方法，变量上使用了。</p>
<h4 id="Class_Annotations"><a href="#Class_Annotations" class="headerlink" title="Class Annotations"></a>Class Annotations</h4><p>你可以在运行期访问类，方法，变量的注解。下面是类注解的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Class aClass = TheClass.class;</span><br><span class="line">Annotation[] annotations = aClass.getAnnotations();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Annotation annotation : annotations)&#123;</span><br><span class="line">    <span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</span><br><span class="line">        MyAnnotation myAnnotation = (MyAnnotation) annotation;</span><br><span class="line">        System.out.println(<span class="string">"name: "</span> + myAnnotation.name());</span><br><span class="line">        System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以指定类进行访问，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Class aClass = TheClass.class;</span><br><span class="line">Annotation annotation = aClass.getAnnotation(MyAnnotation.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</span><br><span class="line">    MyAnnotation myAnnotation = (MyAnnotation) annotation;</span><br><span class="line">    System.out.println(<span class="string">"name: "</span> + myAnnotation.name());</span><br><span class="line">    System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Method_Annotations"><a href="#Method_Annotations" class="headerlink" title="Method Annotations"></a>Method Annotations</h4><p>下面是注解在方法上的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheClass2</span> </span>&#123;</span><br><span class="line">  <span class="annotation">@MyAnnotation</span>(name=<span class="string">"someName"</span>,  value = <span class="string">"Hello World"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以像下面这样访问方法注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Method method = TheClass2.class.getMethod(<span class="string">"doSomething"</span>);</span><br><span class="line">Annotation[] annotations = method.getDeclaredAnnotations();</span><br><span class="line"><span class="keyword">for</span>(Annotation annotation : annotations)&#123;</span><br><span class="line">    <span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</span><br><span class="line">        MyAnnotation myAnnotation = (MyAnnotation) annotation;</span><br><span class="line">        System.out.println(<span class="string">"name: "</span> + myAnnotation.name());</span><br><span class="line">        System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者是指定方法注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Method method = TheClass2.class.getMethod(<span class="string">"doSomething"</span>);</span><br><span class="line">Annotation annotation = method.getAnnotation(MyAnnotation.class);</span><br><span class="line"><span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> MyAnnotation) &#123;</span><br><span class="line">    MyAnnotation myAnnotation = (MyAnnotation) annotation;</span><br><span class="line">    System.out.println(<span class="string">"name:"</span>+myAnnotation.name());</span><br><span class="line">    System.out.println(<span class="string">"value:"</span>+myAnnotation.value());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Parameter_Annotations"><a href="#Parameter_Annotations" class="headerlink" title="Parameter Annotations"></a>Parameter Annotations</h4><p>在方法的参数上使用注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheClass3</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomethingElse</span><span class="params">(</span><br><span class="line">        @MyAnnotation(name=<span class="string">"aName"</span>, value=<span class="string">"aValue"</span>)</span> String parameter)</span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问方法参数上的注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Method method = TheClass3.class.getMethod(<span class="string">"doSomethingElse"</span>);</span><br><span class="line">Annotation[][] parameterAnnotations = method.getParameterAnnotations();</span><br><span class="line">Class[] parameterTypes = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(Annotation[] annotations : parameterAnnotations)&#123;</span><br><span class="line">  Class parameterType = parameterTypes[i++];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(Annotation annotation : annotations)&#123;</span><br><span class="line">    <span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</span><br><span class="line">        MyAnnotation myAnnotation = (MyAnnotation) annotation;</span><br><span class="line">        System.out.println(<span class="string">"param: "</span> + parameterType.getName());</span><br><span class="line">        System.out.println(<span class="string">"name : "</span> + myAnnotation.name());</span><br><span class="line">        System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意Method.getParameterAnnotations()返回的是二维数组，包含每个参数的注解数组。</p>
<h4 id="Field_Annotations"><a href="#Field_Annotations" class="headerlink" title="Field Annotations"></a>Field Annotations</h4><p>变量上的注解使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheClass4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@MyAnnotation</span>(name=<span class="string">"someName"</span>,  value = <span class="string">"Hello World"</span>)</span><br><span class="line">  <span class="keyword">public</span> String myField = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问变量上的注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Field field = TheClass4.class.getField(<span class="string">"myField"</span>);</span><br><span class="line">Annotation[] annotations = field.getDeclaredAnnotations();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Annotation annotation : annotations)&#123;</span><br><span class="line">    <span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</span><br><span class="line">        MyAnnotation myAnnotation = (MyAnnotation) annotation;</span><br><span class="line">        System.out.println(<span class="string">"name: "</span> + myAnnotation.name());</span><br><span class="line">        System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Field field = TheClass4.class.getField(<span class="string">"myField"</span>);</span><br><span class="line">Annotation annotation = field.getAnnotation(MyAnnotation.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</span><br><span class="line">    MyAnnotation myAnnotation = (MyAnnotation) annotation;</span><br><span class="line">    System.out.println(<span class="string">"name: "</span> + myAnnotation.name());</span><br><span class="line">    System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/annotations.html" target="_blank" rel="external">Java Reflection Annotations</a>]]>
    </summary>
    
      <category term="JAVA" scheme="http://suqun.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java反射之私有变量和私有方法]]></title>
    <link href="http://suqun.github.io/2016/05/14/JavaReflectionPrivateFieldsAndMethods/"/>
    <id>http://suqun.github.io/2016/05/14/JavaReflectionPrivateFieldsAndMethods/</id>
    <published>2016-05-13T16:52:55.000Z</published>
    <updated>2016-08-06T02:15:42.000Z</updated>
    <content type="html"><![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/private-fields-and-methods.html" target="_blank" rel="external">Java Reflection Methods</a></p>
<p>通常情况下，从对象外部访问私有变量和私有方法是不被允许的，但是通过反射可以很容易获取私有变量和私有方法，在单元测试的时候很有用。</p>
<h6 id="Accessing_Private_Fields"><a href="#Accessing_Private_Fields" class="headerlink" title="Accessing Private Fields"></a>Accessing Private Fields</h6><p>获取私有变量你需要用到<code>Class.getDeclaredField(String name)</code>或者<code>Class.getDeclaredFields(String name)</code>方法。<code>Class.getField(String name)</code>和<code>Class.getFields(String name)</code>方法只能返回公有变量。下面是通过java的反射获取私有变量代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Order privateObject = <span class="keyword">new</span> Order(<span class="string">"2016051901"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Field privateField = Order.class.getDeclaredField(<span class="string">"orderId"</span>);</span><br><span class="line">    privateField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    String orderId = (String) privateField.get(privateObject);</span><br><span class="line">    System.out.println(<span class="string">"orderId:"</span> + orderId);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码会打印出『orderId:2016051901』，值为Order实例私有变量orderId的值。</p>
<p><code>Order.class.getDeclaredField(&quot;orderId&quot;)</code>这个方法返回一个私有变量，这个私有变量是Order类中自己定义的变量，而不是继承自其父类的变量。</p>
<p><code>privateField.setAccessible(true);</code>这个方法会关闭实例类的反射访问检查。现在你可以访问私有的，受保护的和包级访问的变量。</p>
<h6 id="Accessing_Private_Methods"><a href="#Accessing_Private_Methods" class="headerlink" title="Accessing Private Methods"></a>Accessing Private Methods</h6><p>要获取私有方法你需要使用方法<code>Class.getDeclaredMethod(String name, Class[] parameterTypes)</code>或者<code>Class.getDeclaredMethods()</code>。<code>Class.getMethod()</code>和<code>Class.getMethods()</code>方法只是返回的公有方法。下面是使用java反射访问私有方法的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Order privateObject = <span class="keyword">new</span> Order(<span class="string">"2016051901"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Method privateMethod = Order.class.getDeclaredMethod(<span class="string">"getOrderId"</span>);</span><br><span class="line">    privateMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    String returnValue = (String) privateMethod.invoke(privateObject);</span><br><span class="line">    System.out.println(<span class="string">"returnValue = "</span> + returnValue);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码会打印出『returnValue=2016051901』，其值是通过反射调用Order实例的私有方法『getOrderId()』获取到的。</p>
<p><code>Order.class.getDeclaredMethod(&quot;getOrderId&quot;)</code>,这个方法也之后返回Order类自己的私有方法，而非其继承自父类的私有方法。</p>
<p><code>privateMethod.setAcessible(true)</code>，这个方法会关闭实例类的私有方法反射访问检查，现在你可以通过反射获取的实例的私有，受保护和包级访问权限的方法。 </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/private-fields-and-methods.html" target="_blank" rel="external">Java Reflection ]]>
    </summary>
    
      <category term="JAVA" scheme="http://suqun.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java反射之方法]]></title>
    <link href="http://suqun.github.io/2016/05/13/JavaReflectionMethods/"/>
    <id>http://suqun.github.io/2016/05/13/JavaReflectionMethods/</id>
    <published>2016-05-12T16:52:55.000Z</published>
    <updated>2016-08-06T02:15:42.000Z</updated>
    <content type="html"><![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/methods.html" target="_blank" rel="external">Java Reflection Methods</a></p>
<h5 id="Obtaining_Method_Objects"><a href="#Obtaining_Method_Objects" class="headerlink" title="Obtaining Method Objects"></a>Obtaining Method Objects</h5><p>获取类的方法，Method[]数组里面只包含类中public修饰的方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Method[] methods = orderClass.getMethods();</span><br></pre></td></tr></table></figure>
<p>也可以使用具体的方法名及参数类型直接获取,以Order类中的getState()，setState()方法为例:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Method methodHaveNoParameter = orderClass.getMethod(<span class="string">"getState"</span>,<span class="keyword">null</span>);<span class="comment">//该方法没有参数,null省略也可以</span></span><br><span class="line">    System.out.println(methodHaveNoParameter.getName());<span class="comment">//getState</span></span><br><span class="line">    </span><br><span class="line">    Method methodHaveParameter = orderClass.getMethod(<span class="string">"setState"</span>,<span class="keyword">new</span> Class[]&#123;String.class&#125;);<span class="comment">//该方有String类型参数</span></span><br><span class="line">    System.out.println(methodHaveParameter.getName());<span class="comment">//setState</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Method_Parameters_and_Return_Types"><a href="#Method_Parameters_and_Return_Types" class="headerlink" title="Method Parameters and Return Types"></a>Method Parameters and Return Types</h4><p>获取方法的参数类型及返回类型</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class[] parameters = methodHaveParameter.getParameterTypes();</span><br><span class="line">System.out.println(parameters[<span class="number">0</span>].getName());<span class="comment">//class java.lang.String</span></span><br><span class="line"></span><br><span class="line">Class returnType = methodHaveParameter.getReturnType();</span><br><span class="line">System.out.println(returnType);<span class="comment">//void</span></span><br></pre></td></tr></table></figure>
<h4 id="Invoking_Methods_using_Method_Object"><a href="#Invoking_Methods_using_Method_Object" class="headerlink" title="Invoking Methods using Method Object"></a>Invoking Methods using Method Object</h4><p>使用<code>invoke</code>调用方法,以Order类中的pay()方法为例，该方法直接返回一个字符串</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Method methodPay = orderClass.getMethod(<span class="string">"pay"</span>,<span class="keyword">new</span> Class[]&#123;String.class&#125;);</span><br><span class="line">    Order order = <span class="keyword">new</span> Order();</span><br><span class="line">    Object returnValue = methodPay.invoke(order,<span class="string">"2016050902"</span>);</span><br><span class="line">    System.out.println(returnValue);<span class="comment">//2016050902 pay success</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果方法是static的，那么在调用invoke时，第一个参数（类的实例）可以传null(传入类的实例也是可以的)。</p>
<h5 id="u83B7_u53D6getter/setter_u65B9_u6CD5"><a href="#u83B7_u53D6getter/setter_u65B9_u6CD5" class="headerlink" title="获取getter/setter方法"></a>获取getter/setter方法</h5><p>使用反射时，如果需要获取类的getter和setter方法，需要获取所有methods，并根据getter/setter的特点找到他们。</p>
<ul>
<li>Getter<br>  getter方法以「get」开头，没有参数，有返回值</li>
<li>Setter<br>  setter方法以「set」开头，有一个参数，返回值可能有可能没有</li>
</ul>
<p>下面是从类中找到get/set方法的例子</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printGettersSetters</span><span class="params">(Class aClass)</span></span>&#123;</span><br><span class="line">  Method[] methods = aClass.getMethods();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(Method method : methods)&#123;</span><br><span class="line">    <span class="keyword">if</span>(isGetter(method)) System.out.println(<span class="string">"getter: "</span> + method);</span><br><span class="line">    <span class="keyword">if</span>(isSetter(method)) System.out.println(<span class="string">"setter: "</span> + method);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isGetter</span><span class="params">(Method method)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!method.getName().startsWith(<span class="string">"get"</span>))      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">if</span>(method.getParameterTypes().length != <span class="number">0</span>)   <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">void</span>.class.equals(method.getReturnType()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSetter</span><span class="params">(Method method)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!method.getName().startsWith(<span class="string">"set"</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">if</span>(method.getParameterTypes().length != <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/methods.html" target="_blank" rel="external">Java Reflection Methods</a></p>
<h5]]>
    </summary>
    
      <category term="JAVA" scheme="http://suqun.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java反射之变量]]></title>
    <link href="http://suqun.github.io/2016/05/12/JavaReflectionFields/"/>
    <id>http://suqun.github.io/2016/05/12/JavaReflectionFields/</id>
    <published>2016-05-11T16:52:55.000Z</published>
    <updated>2016-08-06T02:15:42.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Java_Reflection_Fields"><a href="#Java_Reflection_Fields" class="headerlink" title="Java Reflection Fields"></a>Java Reflection Fields</h3><p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/fields.html" target="_blank" rel="external">Java Reflection Fields</a></p>
<h4 id="Obtaining_Field_Objects"><a href="#Obtaining_Field_Objects" class="headerlink" title="Obtaining Field Objects"></a>Obtaining Field Objects</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Field[] fields = orderClass.getFields();</span><br></pre></td></tr></table></figure>
<p>Field[]数组里面只包含类中public修饰的成员变量</p>
<p>如果知道类的成员变量名称，可以直接通过getField()方法获取到，成员变量的访问权限同样需要是public的</p>
<h4 id="Field_Name_and_Type"><a href="#Field_Name_and_Type" class="headerlink" title="Field Name and Type"></a>Field Name and Type</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Field field = orderClass.getField(<span class="string">"description"</span>);</span><br><span class="line">    System.out.println(field.getName());<span class="comment">//成员变量名称description</span></span><br><span class="line">    System.out.println(field.getType());<span class="comment">//成员变量类型class java.lang.String</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;<span class="comment">//如果不存在description的变量，会抛出NoSuchFieldException</span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Getting_and_Setting_Field_Values"><a href="#Getting_and_Setting_Field_Values" class="headerlink" title="Getting and Setting Field Values"></a>Getting and Setting Field Values</h4><p>获得了field的引用，就可以通过get()，set()方法，获取和设置成员变量的值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Field field = orderClass.getField(<span class="string">"description"</span>);</span><br><span class="line">    Order order = <span class="keyword">new</span> Order();</span><br><span class="line">    Object value = field.get(order);</span><br><span class="line">    field.set(order, value);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>传入Field.get()/Field.set()方法的参数order是Order类的实例。<br>如果变量是静态变量的话(public static)那么在调用Field.get()/Field.set()方法的时候传入null做为参数而不用传递拥有该变量的类的实例(传入类的实例也是可以的)。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Java_Reflection_Fields"><a href="#Java_Reflection_Fields" class="headerlink" title="Java Reflection Fields"></a>Java Reflection Fiel]]>
    </summary>
    
      <category term="JAVA" scheme="http://suqun.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java反射之构造函数]]></title>
    <link href="http://suqun.github.io/2016/05/11/JavaReflectionConstructors/"/>
    <id>http://suqun.github.io/2016/05/11/JavaReflectionConstructors/</id>
    <published>2016-05-10T16:52:55.000Z</published>
    <updated>2016-08-06T02:15:42.000Z</updated>
    <content type="html"><![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/constructors.html" target="_blank" rel="external">Java Reflection Constructors</a></p>
<h4 id="u83B7_u53D6_u6784_u9020_u51FD_u6570_u7684_u5BF9_u8C61"><a href="#u83B7_u53D6_u6784_u9020_u51FD_u6570_u7684_u5BF9_u8C61" class="headerlink" title="获取构造函数的对象"></a>获取构造函数的对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Constructor[] constructors = orderClass.getConstructors();</span><br></pre></td></tr></table></figure>
<p>可以通过构造函数的具体参数类型直接获取单独的构造函数，而不用获取全部的Constructors</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Constructor constructor = orderClass.getConstructor(<span class="keyword">new</span> Class[]&#123;String.class&#125;);</span><br><span class="line">    System.out.println(constructor.getName());<span class="comment">//com.larry.bean.Order</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;<span class="comment">//没有找到匹配的构造函数会抛出NoSuchMethodException</span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u6784_u9020_u51FD_u6570_u7684_u53C2_u6570_u7C7B_u578B"><a href="#u6784_u9020_u51FD_u6570_u7684_u53C2_u6570_u7C7B_u578B" class="headerlink" title="构造函数的参数类型"></a>构造函数的参数类型</h4><p>可以像下面这样获取构造函数的参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class[] parameterTypes = constructor.getParameterTypes();</span><br><span class="line">parameterTypes[<span class="number">0</span>].getName();<span class="comment">//java.lang.String</span></span><br></pre></td></tr></table></figure>
<h4 id="u7528_u6784_u9020_u51FD_u6570_u5BF9_u8C61_u5B9E_u4F8B_u5316_u4E00_u4E2A_u7C7B"><a href="#u7528_u6784_u9020_u51FD_u6570_u5BF9_u8C61_u5B9E_u4F8B_u5316_u4E00_u4E2A_u7C7B" class="headerlink" title="用构造函数对象实例化一个类"></a>用构造函数对象实例化一个类</h4><p>constructor.newInstance()方法的方法参数是一个可变参数列表，但是当你调用构造方法的时候你必须提供精确的参数，即形参与实参必须一一对应。在这个例子中构造方法需要一个String类型的参数，那我们在调用newInstance方法的时候就必须传入一个String类型的参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Constructor constructor = Order.class.getConstructor(String.class);</span><br><span class="line">    Order order = (Order) constructor.newInstance(<span class="string">"2016050901"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/constructors.html" target="_blank" rel="external">Java Reflection Constructors</]]>
    </summary>
    
      <category term="JAVA" scheme="http://suqun.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java反射之对象]]></title>
    <link href="http://suqun.github.io/2016/05/09/JavaReflectionClasses/"/>
    <id>http://suqun.github.io/2016/05/09/JavaReflectionClasses/</id>
    <published>2016-05-08T16:52:55.000Z</published>
    <updated>2016-08-06T02:15:42.000Z</updated>
    <content type="html"><![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/classes.html" target="_blank" rel="external">Java Reflection Classes</a></p>
<h5 id="u83B7_u53D6class_u5BF9_u8C61"><a href="#u83B7_u53D6class_u5BF9_u8C61" class="headerlink" title="获取class对象"></a>获取class对象</h5><p>Java中的所有类型包括基本类型(int, long, float等等)，即使是数组都有与之关联的Class类的对象。<br>如果你在编译期知道一个类的名字的话，那么你可以使用如下的方式获取一个类的Class对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class orderClass = Order.class;</span><br></pre></td></tr></table></figure>
<p>如果你在编译期不知道类的名字，但是你可以在运行期获得到类名的字符串,那么你则可以这么做来获取Class对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String className = ... ;<span class="comment">//在运行期获取的类名字符串</span></span><br><span class="line">Class <span class="class"><span class="keyword">class</span> </span>= Class.forName(className);</span><br></pre></td></tr></table></figure>
<p>在使用Class.forName()方法时，你必须提供一个类的全名，这个全名包括类所在的包的名字</p>
<h5 id="Class_Name__u7C7B_u540D"><a href="#Class_Name__u7C7B_u540D" class="headerlink" title="Class Name 类名"></a>Class Name 类名</h5><p>通过<code>getName()</code> 方法返回类的全限定类名,不包含包名使用<code>getSimpleName()</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">orderClass.getName();<span class="comment">//com.larry.bean.Order</span></span><br><span class="line">orderClass.getSimpleName();</span><br></pre></td></tr></table></figure>
<h5 id="Modifiers__u4FEE_u9970_u7B26"><a href="#Modifiers__u4FEE_u9970_u7B26" class="headerlink" title="Modifiers 修饰符"></a>Modifiers 修饰符</h5><p>通过Class对象来访问一个类的修饰符，即public,private,static等的关键字;</p>
<p>修饰符都被包装成一个int类型的数字，这样每个修饰符都是一个位标识(flag bit)，这个位标识可以设置和清除修饰符的类型;</p>
<p>使用java.lang.reflect.Modifier类中的方法来检查修饰符的类型。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> modifiers = orderClass.getModifiers();</span><br><span class="line"></span><br><span class="line">Modifier.isAbstract(modifiers);</span><br><span class="line">Modifier.isFinal(modifiers);</span><br><span class="line">Modifier.isInterface(modifiers);</span><br><span class="line">Modifier.isNative(modifiers);</span><br><span class="line">Modifier.isPrivate(modifiers);</span><br><span class="line">Modifier.isProtected(modifiers);</span><br><span class="line">Modifier.isPublic(modifiers);<span class="comment">//true</span></span><br><span class="line">Modifier.isStatic(modifiers);</span><br><span class="line">Modifier.isStrict(modifiers);</span><br><span class="line">Modifier.isSynchronized(modifiers);</span><br><span class="line">Modifier.isTransient(modifiers);</span><br><span class="line">Modifier.isVolatile(modifiers);</span><br></pre></td></tr></table></figure>
<h5 id="Package_Info__u5305"><a href="#Package_Info__u5305" class="headerlink" title="Package Info 包"></a>Package Info 包</h5><p>Package对象你可以获取包的相关信息，比如包名</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Package packages = orderClass.getPackage();</span><br><span class="line">packages.getName();<span class="comment">//com.larry.bean</span></span><br></pre></td></tr></table></figure>
<h5 id="Superclass__u7236_u7C7B"><a href="#Superclass__u7236_u7C7B" class="headerlink" title="Superclass 父类"></a>Superclass 父类</h5><p>superclass对象其实就是一个Class类的实例，所以你可以继续在这个对象上进行反射操作</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class superClass = orderClass.getSuperclass();</span><br><span class="line">superClass.getName();<span class="comment">//java.lang.Object</span></span><br></pre></td></tr></table></figure>
<h5 id="Implemented_Interfaces__u5B9E_u73B0_u7684_u63A5_u53E3"><a href="#Implemented_Interfaces__u5B9E_u73B0_u7684_u63A5_u53E3" class="headerlink" title="Implemented Interfaces 实现的接口"></a>Implemented Interfaces 实现的接口</h5><p>获取指定类所实现的接口集合</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class[] interfaces = orderClass.getInterfaces();</span><br></pre></td></tr></table></figure>
<p>getInterfaces()方法仅仅只返回当前类所实现的接口。当前类的父类如果实现了接口，这些接口是不会在返回的Class集合中的，尽管实际上当前类其实已经实现了父类接口</p>
<h5 id="Constructors__u6784_u9020_u51FD_u6570"><a href="#Constructors__u6784_u9020_u51FD_u6570" class="headerlink" title="Constructors 构造函数"></a>Constructors 构造函数</h5><h6 id="u83B7_u53D6_u6784_u9020_u51FD_u6570_u7684_u5BF9_u8C61"><a href="#u83B7_u53D6_u6784_u9020_u51FD_u6570_u7684_u5BF9_u8C61" class="headerlink" title="获取构造函数的对象"></a>获取构造函数的对象</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Constructor[] constructors = orderClass.getConstructors();</span><br></pre></td></tr></table></figure>
<h5 id="Method__u65B9_u6CD5"><a href="#Method__u65B9_u6CD5" class="headerlink" title="Method 方法"></a>Method 方法</h5><p>获取类的方法，Method[]数组里面只包含类中public修饰的方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Method[] methods = orderClass.getMethods();</span><br></pre></td></tr></table></figure>
<h5 id="Field__u53D8_u91CF"><a href="#Field__u53D8_u91CF" class="headerlink" title="Field 变量"></a>Field 变量</h5><p>获取成员变量</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Field[] fields = orderClass.getFields();</span><br></pre></td></tr></table></figure>
<h5 id="Annotations__u6CE8_u89E3"><a href="#Annotations__u6CE8_u89E3" class="headerlink" title="Annotations 注解"></a>Annotations 注解</h5><p>获取类的注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Annotation[] annotations = orderClass.getAnnotations();</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/classes.html" target="_blank" rel="external">Java Reflection Classes</a></p>
<h5]]>
    </summary>
    
      <category term="JAVA" scheme="http://suqun.github.io/tags/JAVA/"/>
    
  </entry>
  
</feed>
