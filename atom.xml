<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[入耳箸心]]></title>
  <subtitle><![CDATA[成长路上的点滴记录]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://suqun.github.io/"/>
  <updated>2016-05-28T07:32:00.000Z</updated>
  <id>http://suqun.github.io/</id>
  
  <author>
    <name><![CDATA[Larry]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Java反射之注解]]></title>
    <link href="http://suqun.github.io/2016/05/18/JavaReflectionAnnotations/"/>
    <id>http://suqun.github.io/2016/05/18/JavaReflectionAnnotations/</id>
    <published>2016-05-17T16:52:55.000Z</published>
    <updated>2016-05-28T07:32:00.000Z</updated>
    <content type="html"><![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/annotations.html" target="_blank" rel="external">Java Reflection Annotations</a></p>
<p>在运行时状态下，你可以通过反射获取java对象上的注解。</p>
<h5 id="What_are_Java_Annotations_3F"><a href="#What_are_Java_Annotations_3F" class="headerlink" title="What are Java Annotations?"></a>What are Java Annotations?</h5><p>注解是Java5增加的功能。注解是一种注释或者是元数据可以直接插入到Java代码中。在编译时，通过预编译工具处理；或者在运行时，通过java反射处理。下面是个注解的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@MyAnnotation(name=&#34;someName&#34;,  value = &#34;Hello World&#34;)&#10;public class TheClass &#123;&#10;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>类TheClass的上面有个<code>@MyAnnotation</code>的注解。注解的定义类似接口定义，下面是注解定义的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Retention(RetentionPolicy.RUNTIME)&#10;@Target(ElementType.TYPE)&#10;&#10;public @interface MyAnnotation &#123;&#10;    public String name();&#10;    public String value();&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>创建注解是，在interface前面使用<code>@</code>即可。创建之后就可以在代码里使用了，例如上面的例子。</p>
<p><code>@Retention(RetentionPolicy.RUNTIME)</code> 和 <code>@Target(ElementType.TYPE)</code>这两个指令，指明了这个注解如何被使用。</p>
<p><code>@Retention(RetentionPolicy.RUNTIME)</code> 意味着在运行时状态可以使用java反射获取注解，如果不设置这个指令，在运行时状态，注解不会被保存，同样的也就不能通过反射获取。 </p>
<p><code>@Target(ElementType.TYPE)</code>意味着注解只能用在Types上（比如类和接口）。你也可以指定为<code>METHOD</code>或者是<code>FIELD</code>，或者是不使用Target这个指令，这样你就可以在类，方法，变量上使用了。</p>
<h5 id="Class_Annotations"><a href="#Class_Annotations" class="headerlink" title="Class Annotations"></a>Class Annotations</h5><p>你可以在运行期访问类，方法，变量的注解。下面是类注解的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Class aClass = TheClass.class;</span><br><span class="line">Annotation[] annotations = aClass.getAnnotations();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Annotation annotation : annotations)&#123;</span><br><span class="line">    <span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</span><br><span class="line">        MyAnnotation myAnnotation = (MyAnnotation) annotation;</span><br><span class="line">        System.out.println(<span class="string">"name: "</span> + myAnnotation.name());</span><br><span class="line">        System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以指定类进行访问，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Class aClass = TheClass.class;</span><br><span class="line">Annotation annotation = aClass.getAnnotation(MyAnnotation.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</span><br><span class="line">    MyAnnotation myAnnotation = (MyAnnotation) annotation;</span><br><span class="line">    System.out.println(<span class="string">"name: "</span> + myAnnotation.name());</span><br><span class="line">    System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Method_Annotations"><a href="#Method_Annotations" class="headerlink" title="Method Annotations"></a>Method Annotations</h4><p>下面是注解在方法上的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheClass2</span> </span>&#123;</span><br><span class="line">  <span class="annotation">@MyAnnotation</span>(name=<span class="string">"someName"</span>,  value = <span class="string">"Hello World"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以像下面这样访问方法注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Method method = TheClass2.class.getMethod(<span class="string">"doSomething"</span>);</span><br><span class="line">Annotation[] annotations = method.getDeclaredAnnotations();</span><br><span class="line"><span class="keyword">for</span>(Annotation annotation : annotations)&#123;</span><br><span class="line">    <span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</span><br><span class="line">        MyAnnotation myAnnotation = (MyAnnotation) annotation;</span><br><span class="line">        System.out.println(<span class="string">"name: "</span> + myAnnotation.name());</span><br><span class="line">        System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者是指定方法注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Method method = TheClass2.class.getMethod(<span class="string">"doSomething"</span>);</span><br><span class="line">Annotation annotation = method.getAnnotation(MyAnnotation.class);</span><br><span class="line"><span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> MyAnnotation) &#123;</span><br><span class="line">    MyAnnotation myAnnotation = (MyAnnotation) annotation;</span><br><span class="line">    System.out.println(<span class="string">"name:"</span>+myAnnotation.name());</span><br><span class="line">    System.out.println(<span class="string">"value:"</span>+myAnnotation.value());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Parameter_Annotations"><a href="#Parameter_Annotations" class="headerlink" title="Parameter Annotations"></a>Parameter Annotations</h4><p>在方法的参数上使用注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheClass3</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomethingElse</span><span class="params">(</span><br><span class="line">        @MyAnnotation(name=<span class="string">"aName"</span>, value=<span class="string">"aValue"</span>)</span> String parameter)</span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问方法参数上的注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Method method = TheClass3.class.getMethod(<span class="string">"doSomethingElse"</span>);</span><br><span class="line">Annotation[][] parameterAnnotations = method.getParameterAnnotations();</span><br><span class="line">Class[] parameterTypes = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(Annotation[] annotations : parameterAnnotations)&#123;</span><br><span class="line">  Class parameterType = parameterTypes[i++];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(Annotation annotation : annotations)&#123;</span><br><span class="line">    <span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</span><br><span class="line">        MyAnnotation myAnnotation = (MyAnnotation) annotation;</span><br><span class="line">        System.out.println(<span class="string">"param: "</span> + parameterType.getName());</span><br><span class="line">        System.out.println(<span class="string">"name : "</span> + myAnnotation.name());</span><br><span class="line">        System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意Method.getParameterAnnotations()返回的是二维数组，包含每个参数的注解数组。</p>
<h4 id="Field_Annotations"><a href="#Field_Annotations" class="headerlink" title="Field Annotations"></a>Field Annotations</h4><p>变量上的注解使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheClass4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@MyAnnotation</span>(name=<span class="string">"someName"</span>,  value = <span class="string">"Hello World"</span>)</span><br><span class="line">  <span class="keyword">public</span> String myField = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问变量上的注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Field field = TheClass4.class.getField(<span class="string">"myField"</span>);</span><br><span class="line">Annotation[] annotations = field.getDeclaredAnnotations();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Annotation annotation : annotations)&#123;</span><br><span class="line">    <span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</span><br><span class="line">        MyAnnotation myAnnotation = (MyAnnotation) annotation;</span><br><span class="line">        System.out.println(<span class="string">"name: "</span> + myAnnotation.name());</span><br><span class="line">        System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Field field = TheClass4.class.getField(<span class="string">"myField"</span>);</span><br><span class="line">Annotation annotation = field.getAnnotation(MyAnnotation.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</span><br><span class="line">    MyAnnotation myAnnotation = (MyAnnotation) annotation;</span><br><span class="line">    System.out.println(<span class="string">"name: "</span> + myAnnotation.name());</span><br><span class="line">    System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/annotations.html" target="_blank" rel="external">Java Reflection Annotations</a>]]>
    </summary>
    
      <category term="Java" scheme="http://suqun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java反射之私有变量和私有方法]]></title>
    <link href="http://suqun.github.io/2016/05/14/JavaReflectionPrivateFieldsAndMethods/"/>
    <id>http://suqun.github.io/2016/05/14/JavaReflectionPrivateFieldsAndMethods/</id>
    <published>2016-05-13T16:52:55.000Z</published>
    <updated>2016-05-28T07:29:54.000Z</updated>
    <content type="html"><![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/private-fields-and-methods.html" target="_blank" rel="external">Java Reflection Methods</a></p>
<p>通常情况下，从对象外部访问私有变量和私有方法是不被允许的，但是通过反射可以很容易获取私有变量和私有方法，在单元测试的时候很有用。</p>
<h6 id="Accessing_Private_Fields"><a href="#Accessing_Private_Fields" class="headerlink" title="Accessing Private Fields"></a>Accessing Private Fields</h6><p>获取私有变量你需要用到<code>Class.getDeclaredField(String name)</code>或者<code>Class.getDeclaredFields(String name)</code>方法。<code>Class.getField(String name)</code>和<code>Class.getFields(String name)</code>方法只能返回公有变量。下面是通过java的反射获取私有变量代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Order privateObject = <span class="keyword">new</span> Order(<span class="string">"2016051901"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Field privateField = Order.class.getDeclaredField(<span class="string">"orderId"</span>);</span><br><span class="line">    privateField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    String orderId = (String) privateField.get(privateObject);</span><br><span class="line">    System.out.println(<span class="string">"orderId:"</span> + orderId);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码会打印出『orderId:2016051901』，值为Order实例私有变量orderId的值。</p>
<p><code>Order.class.getDeclaredField(&quot;orderId&quot;)</code>这个方法返回一个私有变量，这个私有变量是Order类中自己定义的变量，而不是继承自其父类的变量。</p>
<p><code>privateField.setAccessible(true);</code>这个方法会关闭实例类的反射访问检查。现在你可以访问私有的，受保护的和包级访问的变量。</p>
<h6 id="Accessing_Private_Methods"><a href="#Accessing_Private_Methods" class="headerlink" title="Accessing Private Methods"></a>Accessing Private Methods</h6><p>要获取私有方法你需要使用方法<code>Class.getDeclaredMethod(String name, Class[] parameterTypes)</code>或者<code>Class.getDeclaredMethods()</code>。<code>Class.getMethod()</code>和<code>Class.getMethods()</code>方法只是返回的公有方法。下面是使用java反射访问私有方法的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Order privateObject = <span class="keyword">new</span> Order(<span class="string">"2016051901"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Method privateMethod = Order.class.getDeclaredMethod(<span class="string">"getOrderId"</span>);</span><br><span class="line">    privateMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    String returnValue = (String) privateMethod.invoke(privateObject);</span><br><span class="line">    System.out.println(<span class="string">"returnValue = "</span> + returnValue);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码会打印出『returnValue=2016051901』，其值是通过反射调用Order实例的私有方法『getOrderId()』获取到的。</p>
<p><code>Order.class.getDeclaredMethod(&quot;getOrderId&quot;)</code>,这个方法也之后返回Order类自己的私有方法，而非其继承自父类的私有方法。</p>
<p><code>privateMethod.setAcessible(true)</code>，这个方法会关闭实例类的私有方法反射访问检查，现在你可以通过反射获取的实例的私有，受保护和包级访问权限的方法。 </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/private-fields-and-methods.html" target="_blank" rel="external">Java Reflection ]]>
    </summary>
    
      <category term="Java" scheme="http://suqun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java反射之方法]]></title>
    <link href="http://suqun.github.io/2016/05/13/JavaReflectionMethods/"/>
    <id>http://suqun.github.io/2016/05/13/JavaReflectionMethods/</id>
    <published>2016-05-12T16:52:55.000Z</published>
    <updated>2016-05-28T07:31:48.000Z</updated>
    <content type="html"><![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/methods.html" target="_blank" rel="external">Java Reflection Methods</a></p>
<h5 id="Obtaining_Method_Objects"><a href="#Obtaining_Method_Objects" class="headerlink" title="Obtaining Method Objects"></a>Obtaining Method Objects</h5><p>获取类的方法，Method[]数组里面只包含类中public修饰的方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Method[] methods = orderClass.getMethods();</span><br></pre></td></tr></table></figure>
<p>也可以使用具体的方法名及参数类型直接获取,以Order类中的getState()，setState()方法为例:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Method methodHaveNoParameter = orderClass.getMethod(<span class="string">"getState"</span>,<span class="keyword">null</span>);<span class="comment">//该方法没有参数,null省略也可以</span></span><br><span class="line">    System.out.println(methodHaveNoParameter.getName());<span class="comment">//getState</span></span><br><span class="line">    </span><br><span class="line">    Method methodHaveParameter = orderClass.getMethod(<span class="string">"setState"</span>,<span class="keyword">new</span> Class[]&#123;String.class&#125;);<span class="comment">//该方有String类型参数</span></span><br><span class="line">    System.out.println(methodHaveParameter.getName());<span class="comment">//setState</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Method_Parameters_and_Return_Types"><a href="#Method_Parameters_and_Return_Types" class="headerlink" title="Method Parameters and Return Types"></a>Method Parameters and Return Types</h4><p>获取方法的参数类型及返回类型</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class[] parameters = methodHaveParameter.getParameterTypes();</span><br><span class="line">System.out.println(parameters[<span class="number">0</span>].getName());<span class="comment">//class java.lang.String</span></span><br><span class="line"></span><br><span class="line">Class returnType = methodHaveParameter.getReturnType();</span><br><span class="line">System.out.println(returnType);<span class="comment">//void</span></span><br></pre></td></tr></table></figure>
<h4 id="Invoking_Methods_using_Method_Object"><a href="#Invoking_Methods_using_Method_Object" class="headerlink" title="Invoking Methods using Method Object"></a>Invoking Methods using Method Object</h4><p>使用<code>invoke</code>调用方法,以Order类中的pay()方法为例，该方法直接返回一个字符串</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Method methodPay = orderClass.getMethod(<span class="string">"pay"</span>,<span class="keyword">new</span> Class[]&#123;String.class&#125;);</span><br><span class="line">    Order order = <span class="keyword">new</span> Order();</span><br><span class="line">    Object returnValue = methodPay.invoke(order,<span class="string">"2016050902"</span>);</span><br><span class="line">    System.out.println(returnValue);<span class="comment">//2016050902 pay success</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果方法是static的，那么在调用invoke时，第一个参数（类的实例）可以传null(传入类的实例也是可以的)。</p>
<h5 id="u83B7_u53D6getter/setter_u65B9_u6CD5"><a href="#u83B7_u53D6getter/setter_u65B9_u6CD5" class="headerlink" title="获取getter/setter方法"></a>获取getter/setter方法</h5><p>使用反射时，如果需要获取类的getter和setter方法，需要获取所有methods，并根据getter/setter的特点找到他们。</p>
<ul>
<li>Getter<br>  getter方法以「get」开头，没有参数，有返回值</li>
<li>Setter<br>  setter方法以「set」开头，有一个参数，返回值可能有可能没有</li>
</ul>
<p>下面是从类中找到get/set方法的例子</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printGettersSetters</span><span class="params">(Class aClass)</span></span>&#123;</span><br><span class="line">  Method[] methods = aClass.getMethods();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(Method method : methods)&#123;</span><br><span class="line">    <span class="keyword">if</span>(isGetter(method)) System.out.println(<span class="string">"getter: "</span> + method);</span><br><span class="line">    <span class="keyword">if</span>(isSetter(method)) System.out.println(<span class="string">"setter: "</span> + method);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isGetter</span><span class="params">(Method method)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!method.getName().startsWith(<span class="string">"get"</span>))      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">if</span>(method.getParameterTypes().length != <span class="number">0</span>)   <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">void</span>.class.equals(method.getReturnType()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSetter</span><span class="params">(Method method)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!method.getName().startsWith(<span class="string">"set"</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">if</span>(method.getParameterTypes().length != <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/methods.html" target="_blank" rel="external">Java Reflection Methods</a></p>
<h5]]>
    </summary>
    
      <category term="Java" scheme="http://suqun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java反射之变量]]></title>
    <link href="http://suqun.github.io/2016/05/12/JavaReflectionFields/"/>
    <id>http://suqun.github.io/2016/05/12/JavaReflectionFields/</id>
    <published>2016-05-11T16:52:55.000Z</published>
    <updated>2016-05-28T07:29:12.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Java_Reflection_Fields"><a href="#Java_Reflection_Fields" class="headerlink" title="Java Reflection Fields"></a>Java Reflection Fields</h3><p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/fields.html" target="_blank" rel="external">Java Reflection Fields</a></p>
<h4 id="Obtaining_Field_Objects"><a href="#Obtaining_Field_Objects" class="headerlink" title="Obtaining Field Objects"></a>Obtaining Field Objects</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Field[] fields = orderClass.getFields();</span><br></pre></td></tr></table></figure>
<p>Field[]数组里面只包含类中public修饰的成员变量</p>
<p>如果知道类的成员变量名称，可以直接通过getField()方法获取到，成员变量的访问权限同样需要是public的</p>
<h4 id="Field_Name_and_Type"><a href="#Field_Name_and_Type" class="headerlink" title="Field Name and Type"></a>Field Name and Type</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Field field = orderClass.getField(<span class="string">"description"</span>);</span><br><span class="line">    System.out.println(field.getName());<span class="comment">//成员变量名称description</span></span><br><span class="line">    System.out.println(field.getType());<span class="comment">//成员变量类型class java.lang.String</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;<span class="comment">//如果不存在description的变量，会抛出NoSuchFieldException</span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Getting_and_Setting_Field_Values"><a href="#Getting_and_Setting_Field_Values" class="headerlink" title="Getting and Setting Field Values"></a>Getting and Setting Field Values</h4><p>获得了field的引用，就可以通过get()，set()方法，获取和设置成员变量的值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Field field = orderClass.getField(<span class="string">"description"</span>);</span><br><span class="line">    Order order = <span class="keyword">new</span> Order();</span><br><span class="line">    Object value = field.get(order);</span><br><span class="line">    field.set(order, value);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>传入Field.get()/Field.set()方法的参数order是Order类的实例。<br>如果变量是静态变量的话(public static)那么在调用Field.get()/Field.set()方法的时候传入null做为参数而不用传递拥有该变量的类的实例(传入类的实例也是可以的)。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Java_Reflection_Fields"><a href="#Java_Reflection_Fields" class="headerlink" title="Java Reflection Fields"></a>Java Reflection Fiel]]>
    </summary>
    
      <category term="Java" scheme="http://suqun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java反射之构造函数]]></title>
    <link href="http://suqun.github.io/2016/05/11/JavaReflectionConstructors/"/>
    <id>http://suqun.github.io/2016/05/11/JavaReflectionConstructors/</id>
    <published>2016-05-10T16:52:55.000Z</published>
    <updated>2016-05-28T07:29:02.000Z</updated>
    <content type="html"><![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/constructors.html" target="_blank" rel="external">Java Reflection Constructors</a></p>
<h4 id="u83B7_u53D6_u6784_u9020_u51FD_u6570_u7684_u5BF9_u8C61"><a href="#u83B7_u53D6_u6784_u9020_u51FD_u6570_u7684_u5BF9_u8C61" class="headerlink" title="获取构造函数的对象"></a>获取构造函数的对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Constructor[] constructors = orderClass.getConstructors();</span><br></pre></td></tr></table></figure>
<p>可以通过构造函数的具体参数类型直接获取单独的构造函数，而不用获取全部的Constructors</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Constructor constructor = orderClass.getConstructor(<span class="keyword">new</span> Class[]&#123;String.class&#125;);</span><br><span class="line">    System.out.println(constructor.getName());<span class="comment">//com.larry.bean.Order</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;<span class="comment">//没有找到匹配的构造函数会抛出NoSuchMethodException</span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u6784_u9020_u51FD_u6570_u7684_u53C2_u6570_u7C7B_u578B"><a href="#u6784_u9020_u51FD_u6570_u7684_u53C2_u6570_u7C7B_u578B" class="headerlink" title="构造函数的参数类型"></a>构造函数的参数类型</h4><p>可以像下面这样获取构造函数的参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class[] parameterTypes = constructor.getParameterTypes();</span><br><span class="line">parameterTypes[<span class="number">0</span>].getName();<span class="comment">//java.lang.String</span></span><br></pre></td></tr></table></figure>
<h4 id="u7528_u6784_u9020_u51FD_u6570_u5BF9_u8C61_u5B9E_u4F8B_u5316_u4E00_u4E2A_u7C7B"><a href="#u7528_u6784_u9020_u51FD_u6570_u5BF9_u8C61_u5B9E_u4F8B_u5316_u4E00_u4E2A_u7C7B" class="headerlink" title="用构造函数对象实例化一个类"></a>用构造函数对象实例化一个类</h4><p>constructor.newInstance()方法的方法参数是一个可变参数列表，但是当你调用构造方法的时候你必须提供精确的参数，即形参与实参必须一一对应。在这个例子中构造方法需要一个String类型的参数，那我们在调用newInstance方法的时候就必须传入一个String类型的参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Constructor constructor = Order.class.getConstructor(String.class);</span><br><span class="line">    Order order = (Order) constructor.newInstance(<span class="string">"2016050901"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/constructors.html" target="_blank" rel="external">Java Reflection Constructors</]]>
    </summary>
    
      <category term="Java" scheme="http://suqun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java反射之对象]]></title>
    <link href="http://suqun.github.io/2016/05/09/JavaReflectionClasses/"/>
    <id>http://suqun.github.io/2016/05/09/JavaReflectionClasses/</id>
    <published>2016-05-08T16:52:55.000Z</published>
    <updated>2016-05-28T07:30:52.000Z</updated>
    <content type="html"><![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/classes.html" target="_blank" rel="external">Java Reflection Classes</a></p>
<h5 id="u83B7_u53D6class_u5BF9_u8C61"><a href="#u83B7_u53D6class_u5BF9_u8C61" class="headerlink" title="获取class对象"></a>获取class对象</h5><p>Java中的所有类型包括基本类型(int, long, float等等)，即使是数组都有与之关联的Class类的对象。<br>如果你在编译期知道一个类的名字的话，那么你可以使用如下的方式获取一个类的Class对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class orderClass = Order.class;</span><br></pre></td></tr></table></figure>
<p>如果你在编译期不知道类的名字，但是你可以在运行期获得到类名的字符串,那么你则可以这么做来获取Class对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String className = ... ;<span class="comment">//在运行期获取的类名字符串</span></span><br><span class="line">Class <span class="class"><span class="keyword">class</span> </span>= Class.forName(className);</span><br></pre></td></tr></table></figure>
<p>在使用Class.forName()方法时，你必须提供一个类的全名，这个全名包括类所在的包的名字</p>
<h5 id="Class_Name__u7C7B_u540D"><a href="#Class_Name__u7C7B_u540D" class="headerlink" title="Class Name 类名"></a>Class Name 类名</h5><p>通过<code>getName()</code> 方法返回类的全限定类名,不包含包名使用<code>getSimpleName()</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">orderClass.getName();<span class="comment">//com.larry.bean.Order</span></span><br><span class="line">orderClass.getSimpleName();</span><br></pre></td></tr></table></figure>
<h5 id="Modifiers__u4FEE_u9970_u7B26"><a href="#Modifiers__u4FEE_u9970_u7B26" class="headerlink" title="Modifiers 修饰符"></a>Modifiers 修饰符</h5><p>通过Class对象来访问一个类的修饰符，即public,private,static等的关键字;</p>
<p>修饰符都被包装成一个int类型的数字，这样每个修饰符都是一个位标识(flag bit)，这个位标识可以设置和清除修饰符的类型;</p>
<p>使用java.lang.reflect.Modifier类中的方法来检查修饰符的类型。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> modifiers = orderClass.getModifiers();</span><br><span class="line"></span><br><span class="line">Modifier.isAbstract(modifiers);</span><br><span class="line">Modifier.isFinal(modifiers);</span><br><span class="line">Modifier.isInterface(modifiers);</span><br><span class="line">Modifier.isNative(modifiers);</span><br><span class="line">Modifier.isPrivate(modifiers);</span><br><span class="line">Modifier.isProtected(modifiers);</span><br><span class="line">Modifier.isPublic(modifiers);<span class="comment">//true</span></span><br><span class="line">Modifier.isStatic(modifiers);</span><br><span class="line">Modifier.isStrict(modifiers);</span><br><span class="line">Modifier.isSynchronized(modifiers);</span><br><span class="line">Modifier.isTransient(modifiers);</span><br><span class="line">Modifier.isVolatile(modifiers);</span><br></pre></td></tr></table></figure>
<h5 id="Package_Info__u5305"><a href="#Package_Info__u5305" class="headerlink" title="Package Info 包"></a>Package Info 包</h5><p>Package对象你可以获取包的相关信息，比如包名</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Package packages = orderClass.getPackage();</span><br><span class="line">packages.getName();<span class="comment">//com.larry.bean</span></span><br></pre></td></tr></table></figure>
<h5 id="Superclass__u7236_u7C7B"><a href="#Superclass__u7236_u7C7B" class="headerlink" title="Superclass 父类"></a>Superclass 父类</h5><p>superclass对象其实就是一个Class类的实例，所以你可以继续在这个对象上进行反射操作</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class superClass = orderClass.getSuperclass();</span><br><span class="line">superClass.getName();<span class="comment">//java.lang.Object</span></span><br></pre></td></tr></table></figure>
<h5 id="Implemented_Interfaces__u5B9E_u73B0_u7684_u63A5_u53E3"><a href="#Implemented_Interfaces__u5B9E_u73B0_u7684_u63A5_u53E3" class="headerlink" title="Implemented Interfaces 实现的接口"></a>Implemented Interfaces 实现的接口</h5><p>获取指定类所实现的接口集合</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class[] interfaces = orderClass.getInterfaces();</span><br></pre></td></tr></table></figure>
<p>getInterfaces()方法仅仅只返回当前类所实现的接口。当前类的父类如果实现了接口，这些接口是不会在返回的Class集合中的，尽管实际上当前类其实已经实现了父类接口</p>
<h5 id="Constructors__u6784_u9020_u51FD_u6570"><a href="#Constructors__u6784_u9020_u51FD_u6570" class="headerlink" title="Constructors 构造函数"></a>Constructors 构造函数</h5><h6 id="u83B7_u53D6_u6784_u9020_u51FD_u6570_u7684_u5BF9_u8C61"><a href="#u83B7_u53D6_u6784_u9020_u51FD_u6570_u7684_u5BF9_u8C61" class="headerlink" title="获取构造函数的对象"></a>获取构造函数的对象</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Constructor[] constructors = orderClass.getConstructors();</span><br></pre></td></tr></table></figure>
<h5 id="Method__u65B9_u6CD5"><a href="#Method__u65B9_u6CD5" class="headerlink" title="Method 方法"></a>Method 方法</h5><p>获取类的方法，Method[]数组里面只包含类中public修饰的方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Method[] methods = orderClass.getMethods();</span><br></pre></td></tr></table></figure>
<h5 id="Field__u53D8_u91CF"><a href="#Field__u53D8_u91CF" class="headerlink" title="Field 变量"></a>Field 变量</h5><p>获取成员变量</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Field[] fields = orderClass.getFields();</span><br></pre></td></tr></table></figure>
<h5 id="Annotations__u6CE8_u89E3"><a href="#Annotations__u6CE8_u89E3" class="headerlink" title="Annotations 注解"></a>Annotations 注解</h5><p>获取类的注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Annotation[] annotations = orderClass.getAnnotations();</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文地址<a href="http://tutorials.jenkov.com/java-reflection/classes.html" target="_blank" rel="external">Java Reflection Classes</a></p>
<h5]]>
    </summary>
    
      <category term="Java" scheme="http://suqun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Spring Boot Jquery Datatables实现管理平台的表格]]></title>
    <link href="http://suqun.github.io/2016/04/03/%E4%BD%BF%E7%94%A8Spring-Boot-Jquery-Datatables%E5%AE%9E%E7%8E%B0%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%A1%A8%E6%A0%BC/"/>
    <id>http://suqun.github.io/2016/04/03/使用Spring-Boot-Jquery-Datatables实现管理平台的表格/</id>
    <published>2016-04-03T06:21:46.000Z</published>
    <updated>2016-05-08T16:58:08.000Z</updated>
    <content type="html"><![CDATA[<p>最近在公司做一个运营平台,增删改查的那种,需要一个多功能的表格,网上看到Jquery的DataTables功能很丰富,查询,排序,翻页等等功能完善,<br>但是<a href="http://www.datatables.net/" target="_blank" rel="external">DataTables官网</a>上的例子,表格数据都没有从服务端获取,生产上使用还得自己摸索下.另外,公司使用<br>Spring boot这个框架,配置简单,下面我们一起做一个整合的例子</p>
<h3 id="u65B0_u5EFASpring_boot_u7684_u5E94_u7528"><a href="#u65B0_u5EFASpring_boot_u7684_u5E94_u7528" class="headerlink" title="新建Spring boot的应用"></a>新建Spring boot的应用</h3><p>新建个项目springboot-datatables-demo,我使用的是intellij idea,创建个maven项目,在pom里面引用包后,创建main方法即可主要代码如下:<br>(详细讲解可以参考我的上一篇日志<a href="http://suqun.github.io/2016/02/17/%E7%AC%AC%E4%B8%80%E4%B8%AASpring-Boot%E5%BA%94%E7%94%A8/">第一个Spring Boot应用</a>)</p>
<p>####pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">project</span> <span class="attribute">xmlns</span>=<span class="value">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="line">         <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="title">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.larry<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>springboot-datatables-demo<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.2.5.RELEASE<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="title">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="title">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>net.sourceforge.nekohtml<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>nekohtml<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.9.21<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.16.4<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.mockito<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>mockito-core<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.10.19<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="title">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>net.coobird<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>thumbnailator<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">version</span>&gt;</span>0.4.8<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">id</span>&gt;</span>spring-releases<span class="tag">&lt;/<span class="title">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">name</span>&gt;</span>Spring Releases<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">url</span>&gt;</span>https://repo.spring.io/libs-release<span class="tag">&lt;/<span class="title">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">id</span>&gt;</span>spring-releases<span class="tag">&lt;/<span class="title">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">name</span>&gt;</span>Spring Releases<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">url</span>&gt;</span>https://repo.spring.io/libs-release<span class="tag">&lt;/<span class="title">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">pluginRepositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="SddApplication-java"><a href="#SddApplication-java" class="headerlink" title="SddApplication.java"></a>SddApplication.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.larry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SddApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SddApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ok,添加完上面两个主要的内容maven引入相关包以后,就可以运行啦,在SDDApplication上右击run一下…..额,是不是报错了,貌似把数据库给忘啦.<br>我们使用mysql数据库,需要添加数据库配置类config.java,添加配置文件application.properties</p>
<h4 id="u5EFA_u8868"><a href="#u5EFA_u8868" class="headerlink" title="建表"></a>建表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SET NAMES utf8;</span><br><span class="line">SET FOREIGN_KEY_CHECKS = <span class="number">0</span>;</span><br><span class="line">DROP TABLE IF EXISTS `app`;</span><br><span class="line">CREATE TABLE `app` (</span><br><span class="line">  `id` bigint(<span class="number">20</span>) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `create_time` datetime DEFAULT NULL,</span><br><span class="line">  `description` text,</span><br><span class="line">  `hot` int(<span class="number">8</span>) DEFAULT <span class="string">'0'</span>,</span><br><span class="line">  `keywords` text,</span><br><span class="line">  `url` varchar(<span class="number">255</span>) NOT NULL,</span><br><span class="line">  `disabled` int(<span class="number">2</span>) NOT NULL DEFAULT <span class="string">'0'</span>,</span><br><span class="line">  `name` varchar(<span class="number">50</span>) DEFAULT NULL,</span><br><span class="line">  `update_time` datetime DEFAULT NULL,</span><br><span class="line">  `is_delete` bit(<span class="number">1</span>) DEFAULT NULL COMMENT <span class="string">'是否删除，0：删除'</span>,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=<span class="number">1</span> DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>
<p>####application.properties添加数据库配置信息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spring.thymeleaf.mode=LEGACYHTML5</span><br><span class="line">spring.thymeleaf.encoding=UTF-<span class="number">8</span></span><br><span class="line">spring.thymeleaf.cache=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">spring.datasource.c3p0.driver-class-name=com.mchange.v2.c3p0.ComboPooledDataSource</span><br><span class="line">spring.datasource.c3p0.jdbc-url=jdbc:mysql://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3306</span>/<span class="built_in">test</span>?useUnicode=yes&amp;characterEncoding=UTF-<span class="number">8</span></span><br><span class="line">spring.datasource.c3p0.username=root</span><br><span class="line">spring.datasource.c3p0.password=</span><br><span class="line">spring.datasource.c3p0.min-evictable-idle-time-millis=<span class="number">30000</span></span><br><span class="line">spring.jpa.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect</span><br><span class="line">spring.jpa.hibernate.ddl-auto=update</span><br><span class="line">spring.jpa.show-sql=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>由于我使用的是thymeleaf模板引擎,需要在resource下面添加文件夹templates,再添加个html, 随便建个html叫index.html,在body里面写个 hello world！ 好了。</p>
<p>然后,我们run一下试试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span>-<span class="number">04</span>-<span class="number">03</span> <span class="number">15</span>:<span class="number">29</span>:<span class="number">27.850</span>  INFO <span class="number">1847</span> --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): <span class="number">8080</span> (http)</span><br><span class="line"><span class="number">2016</span>-<span class="number">04</span>-<span class="number">03</span> <span class="number">15</span>:<span class="number">29</span>:<span class="number">27.852</span>  INFO <span class="number">1847</span> --- [           main] com.larry.SddApplication                 : Started SddApplication <span class="keyword">in</span> <span class="number">4.522</span> seconds ...</span><br></pre></td></tr></table></figure></p>
<p>当我们发现这两句话时,说明我们项目已经启动成功了.不过输入<a href="http://localhost:8080/浏览器仍然会报错,我们配置下路由让/路径默认跳转到index模板上" target="_blank" rel="external">http://localhost:8080/浏览器仍然会报错,我们配置下路由让/路径默认跳转到index模板上</a>.</p>
<p>###MvcConfig</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.larry.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">""</span>).setViewName(<span class="string">"index"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重启后,浏览器中输入<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> 哈哈，是不是看到熟悉的 hello world！ 啦。</p>
<h3 id="datatables"><a href="#datatables" class="headerlink" title="datatables"></a>datatables</h3><p>啰嗦了半天终于进入主题了。。。。我在github上发现有个哥们已经封装了一套<a href="https://github.com/darrachequesne/spring-data-jpa-datatables" target="_blank" rel="external">spring data jpa + jquery datatables</a>的项目，直接pom里面引用下，就ok拉，下面看看具体怎么是用</p>
<h4 id="Maven__u4F9D_u8D56"><a href="#Maven__u4F9D_u8D56" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.github.darrachequesne<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-data-jpa-datatables<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意这哥们使用的hibernate包是4.3.10.Final，这个和spring-boot用的hibernate要一致，否则启动的时候就会报错，所以我选择了1.2.5.RELEASE的版本的spring boot。</p>
<h4 id="u542F_u7528DataTablesRepository_u5DE5_u5382"><a href="#u542F_u7528DataTablesRepository_u5DE5_u5382" class="headerlink" title="启用DataTablesRepository工厂"></a>启用DataTablesRepository工厂</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@SpringBootApplication</span></span><br><span class="line"><span class="annotation">@EnableJpaRepositories</span>(repositoryFactoryBeanClass = DataTablesRepositoryFactoryBean.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SddApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SddApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u6269_u5C55DataTablesRepository_u63A5_u53E3"><a href="#u6269_u5C55DataTablesRepository_u63A5_u53E3" class="headerlink" title="扩展DataTablesRepository接口"></a>扩展DataTablesRepository接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppRepository</span> <span class="keyword">extends</span> <span class="title">DataTablesRepository</span>&lt;<span class="title">App</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u8BBE_u7F6Emodel_u5C5E_u6027"><a href="#u8BBE_u7F6Emodel_u5C5E_u6027" class="headerlink" title="设置model属性"></a>设置model属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Id</span></span><br><span class="line">    <span class="annotation">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="annotation">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="annotation">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="annotation">@URL</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="keyword">private</span> String keywords;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> disabled;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hot;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@CreationTimestamp</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="annotation">@UpdateTimestamp</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isDelete;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5305_u542Bjquery-spring-friendly-js"><a href="#u5305_u542Bjquery-spring-friendly-js" class="headerlink" title="包含jquery.spring-friendly.js"></a>包含jquery.spring-friendly.js</h4><p>It overrides jQuery data serialization to allow Spring MVC to correctly map input parameters (by changing column[0][data] to column[0].data in request payload)</p>
<h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><p>index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;link rel="stylesheet" href="//cdn.datatables.net/1.10.11/css/jquery.dataTables.min.css"&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"//cdn.bootcss.com/bootstrap/3.3.6/css/bootstrap.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/dataTables.bootstrap.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"box-header with-border"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">button</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">class</span>=<span class="value">"btn btn-info"</span> &gt;</span>增加12条数据<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span><span class="comment">&lt;!-- /.box-header --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"box-body"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">table</span> <span class="attribute">id</span>=<span class="value">"appTable"</span> <span class="attribute">class</span>=<span class="value">"table table-bordered table-striped"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">th</span>&gt;</span><span class="tag">&lt;/<span class="title">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="title">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="title">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">th</span>&gt;</span>地址<span class="tag">&lt;/<span class="title">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">th</span>&gt;</span>关键字<span class="tag">&lt;/<span class="title">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">th</span>&gt;</span>描述<span class="tag">&lt;/<span class="title">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">th</span>&gt;</span>热度<span class="tag">&lt;/<span class="title">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">th</span>&gt;</span>添加日期<span class="tag">&lt;/<span class="title">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">th</span>&gt;</span>更新时间<span class="tag">&lt;/<span class="title">th</span>&gt;</span> <span class="comment">&lt;!--日期格式在application.properties添加：spring.jackson.date-format=yyyy-MM-dd HH:mm:ss--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">th</span>&gt;</span>状态<span class="tag">&lt;/<span class="title">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span><span class="comment">&lt;!-- /.box-body --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/jQuery-2.1.4.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/jquery.dataTables.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/dataTables.bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/jquery.spring-friendly.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    $().ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">'#appTable'</span>).DataTable(&#123;</span><br><span class="line">            ajax: <span class="string">'/all'</span>,</span><br><span class="line">            serverSide: <span class="literal">true</span>,</span><br><span class="line">            order: [</span><br><span class="line">                [<span class="number">8</span>, <span class="string">'desc'</span>]<span class="comment">//更新时间倒序</span></span><br><span class="line">            ],</span><br><span class="line">            columns: [&#123;</span><br><span class="line">                data: <span class="literal">null</span>,</span><br><span class="line">                orderable: <span class="literal">false</span>,</span><br><span class="line">                searchable: <span class="literal">false</span>,</span><br><span class="line">                render: <span class="function"><span class="keyword">function</span> (<span class="params">data, type, row</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"&lt;td&gt;&lt;input type='checkbox' name='allocated' value='"</span> + row.id + <span class="string">"'&gt;&lt;/td&gt;"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                data: <span class="string">''</span>,</span><br><span class="line">                orderable: <span class="literal">false</span>,</span><br><span class="line">                searchable: <span class="literal">false</span>,</span><br><span class="line">                render: <span class="function"><span class="keyword">function</span> (<span class="params">data, type, row</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"&lt;td&gt;&lt;button type='button' class='btn btn-primary btn-sm' onclick='editApp("</span> + row.id + <span class="string">")'&gt;编辑&lt;/button&gt; &amp;nbsp;"</span> +</span><br><span class="line"><span class="comment">//                            "&lt;button type='button' class='btn btn-info btn-sm' onclick='detail("+row.id+")'&gt;详情&lt;/button&gt;" +</span></span><br><span class="line">                            <span class="string">"&amp;nbsp;&lt;button type='button' class='btn btn-warning btn-sm' onclick='deleteSingle("</span>+row.id+<span class="string">")'&gt;删除&lt;/button&gt;"</span> +</span><br><span class="line">                            <span class="string">"&lt;/td&gt;"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                data: <span class="string">'name'</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                data: <span class="string">'url'</span>,</span><br><span class="line">                render: <span class="function"><span class="keyword">function</span> (<span class="params">data, type, row</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> shortUrl;</span><br><span class="line">                    <span class="keyword">if</span>(data.length&lt;<span class="number">30</span>)&#123;</span><br><span class="line">                        shortUrl = data ;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        shortUrl = data.substring(<span class="number">0</span>,<span class="number">30</span>)+<span class="string">"..."</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"&lt;a href='"</span> + data + <span class="string">"' target='_blank'&gt;"</span>+shortUrl+<span class="string">"&lt;/a&gt;"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                data: <span class="string">'keywords'</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                data: <span class="string">'description'</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                data: <span class="string">'hot'</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                data: <span class="string">'createTime'</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                data: <span class="string">'updateTime'</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                data: <span class="string">'disabled'</span>,</span><br><span class="line">                render: <span class="function"><span class="keyword">function</span> (<span class="params">data, type, row</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (row.disabled) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">"&lt;input type='checkbox' name='state-checkbox' value='"</span> + row.id + <span class="string">"'&gt;"</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">"&lt;input type='checkbox' name='state-checkbox' value='"</span> + row.id + <span class="string">"' checked&gt;"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;]</span><br><span class="line"><span class="comment">//            initComplete: function () &#123;</span></span><br><span class="line"><span class="comment">//                $("input[name='state-checkbox']").bootstrapSwitch();</span></span><br><span class="line"><span class="comment">//            &#125;,</span></span><br><span class="line"><span class="comment">//            drawCallback: function() &#123;//Function that is called every time DataTables performs a draw.</span></span><br><span class="line"><span class="comment">//                $("input[name='state-checkbox']").bootstrapSwitch();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    $(<span class="string">"button"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $.get(<span class="string">"init"</span>)</span><br><span class="line">                .success(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">window</span>.location=<span class="string">"/"</span>;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="AppController"><a href="#AppController" class="headerlink" title="AppController"></a>AppController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@ResponseBody</span></span><br><span class="line"><span class="annotation">@RequestMapping</span>(value = <span class="string">"all"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DataTablesOutput&lt;App&gt; <span class="title">messages</span><span class="params">(@Valid DataTablesInput input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> appRepository.findAll(input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动后，添加数据后，显示效果如下，已经可以分页搜索排序了。<br><img src="http://7xpk5e.com1.z0.glb.clouddn.com/datatables.png" alt="表格"><br>到这里就可以看到，我们的基本目标已经完成了。不过仍然有个问题，现在的这个查询用的是<code>findAll(input)</code>,如果我们要添加过滤条件进行查询呢。其实<a href="https://github.com/darrachequesne" target="_blank" rel="external">darrachequesne</a>这个哥们已经封装了。’DataTablesOutput<t> findAll(DataTablesInput var1, Specification<t> var2);’调用这个就可以，下面我们来看看具体怎么用</t></t></p>
<h3 id="u4F7F_u7528_u8FC7_u6EE4_u6761_u4EF6_u67E5_u8BE2"><a href="#u4F7F_u7528_u8FC7_u6EE4_u6761_u4EF6_u67E5_u8BE2" class="headerlink" title="使用过滤条件查询"></a>使用过滤条件查询</h3><p>过滤查询使用到了<a href="https://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl/" target="_blank" rel="external">Spring Data JPA - Specifications</a>,自己要去熟悉了解下这个。</p>
<p>我们创建个Specification条件，然后调用’DataTablesOutput<t> findAll(DataTablesInput var1, Specification<t> var2);’<br>假设我们要查询所有删除状态为false的记录</t></t></p>
<h4 id="AppSpec"><a href="#AppSpec" class="headerlink" title="AppSpec"></a>AppSpec</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppSpec</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Specification&lt;App&gt; <span class="title">isNotDelete</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (root, criteriaQuery, criteriaBuilder) -&gt; criteriaBuilder.isFalse(root.get(<span class="string">"isDelete"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：使用了lambda表达式，其实就是创建了内部类</p>
<h4 id="u4FEE_u6539AppController"><a href="#u4FEE_u6539AppController" class="headerlink" title="修改AppController"></a>修改AppController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@RequestMapping</span>(value = <span class="string">"all"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataTablesOutput&lt;App&gt; <span class="title">messages</span><span class="params">(@Valid DataTablesInput input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> appRepository.findAll(input, AppSpec.isNotDelete());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>重启，添加12条数据，设置6条记录删除状态为true，看看效果<br><img src="http://7xpk5e.com1.z0.glb.clouddn.com/datatables-delete.png" alt="过滤删除记录"><br>表格下面显示：<br>Showing 1 to 6 of 6 entries (filtered from 12 total entries)<br>说明我们过滤成功了！</p>
<p>打完收工！<br>详细代码，欢迎从我的github上获取：<a href="/">spring-data-jpa-jquery-datatables</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在公司做一个运营平台,增删改查的那种,需要一个多功能的表格,网上看到Jquery的DataTables功能很丰富,查询,排序,翻页等等功能完善,<br>但是<a href="http://www.datatables.net/" target="_blank" rel=]]>
    </summary>
    
      <category term="SpringBoot" scheme="http://suqun.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[第一个Spring Boot应用]]></title>
    <link href="http://suqun.github.io/2016/02/17/%E7%AC%AC%E4%B8%80%E4%B8%AASpring-Boot%E5%BA%94%E7%94%A8/"/>
    <id>http://suqun.github.io/2016/02/17/第一个Spring-Boot应用/</id>
    <published>2016-02-17T14:32:06.000Z</published>
    <updated>2016-02-20T11:27:17.000Z</updated>
    <content type="html"><![CDATA[<p>原文地址：<a href="http://course.tianmaying.com/spring-boot-reference/lesson/lesson-11#0" target="_blank" rel="external">天码营-SpringBoot参考指南</a> 本文只是学习笔记</p>
<h3 id="u51C6_u5907"><a href="#u51C6_u5907" class="headerlink" title="准备"></a>准备</h3><p>让我们使用Java开发一个简单的”Hello World!” web应用，来强调下Spring Boot的一些关键特性。我们将使用Maven构建该项目，因为大多数IDEs都支持它。</p>
<p>注：<a href="/spring.io">spring.io</a>网站包含很多使用Spring Boot的”入门”指南。如果你正在找特定问题的解决方案，可以先去那瞅瞅。</p>
<p>在开始前，你需要打开一个终端，检查是否安装可用的Java版本和Maven：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ java -version</span><br><span class="line">java version <span class="string">"1.8.0_65"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build <span class="number">1.8</span>.<span class="number">0</span>_65-b17)</span><br><span class="line">Java HotSpot(TM) <span class="number">64</span>-Bit Server VM (build <span class="number">25.65</span>-b01, mixed mode)</span><br><span class="line">➜  ~ mvn -v</span><br><span class="line">Apache Maven <span class="number">3.3</span>.<span class="number">9</span> (bb52d8502b132ec0a5a3f4c09453c07478323dc5; <span class="number">2015</span>-<span class="number">11</span>-<span class="number">11</span>T00:<span class="number">41</span>:<span class="number">47</span>+<span class="number">08</span>:<span class="number">00</span>)</span><br><span class="line">Maven home: /usr/<span class="built_in">local</span>/Cellar/maven/<span class="number">3.3</span>.<span class="number">9</span>/libexec</span><br><span class="line">Java version: <span class="number">1.8</span>.<span class="number">0</span>_65, vendor: Oracle Corporation</span><br><span class="line">Java home: /Library/Java/JavaVirtualMachines/jdk1.<span class="number">8.0</span>_65.jdk/Contents/Home/jre</span><br><span class="line">Default locale: zh_CN, platform encoding: UTF-<span class="number">8</span></span><br><span class="line">OS name: <span class="string">"mac os x"</span>, version: <span class="string">"10.11"</span>, arch: <span class="string">"x86_64"</span>, family: <span class="string">"mac"</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h3><p>需要以创建一个Maven pom.xml文件作为开始。该pom.xml是用来构建项目的处方。打开你最喜欢的文本编辑器，然后添加以下内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">project</span> <span class="attribute">xmlns</span>=<span class="value">"http://maven.apache.org/POM/4.0.0"</span> <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">    <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="title">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>myproject<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.3.2.BUILD-SNAPSHOT<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Additional lines to be added here... --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- (you don't need this if you are using a .RELEASE version) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="title">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">url</span>&gt;</span>http://repo.spring.io/snapshot<span class="tag">&lt;/<span class="title">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">snapshots</span>&gt;</span><span class="tag">&lt;<span class="title">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="title">enabled</span>&gt;</span><span class="tag">&lt;/<span class="title">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="title">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">url</span>&gt;</span>http://repo.spring.io/milestone<span class="tag">&lt;/<span class="title">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="title">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">url</span>&gt;</span>http://repo.spring.io/snapshot<span class="tag">&lt;/<span class="title">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="title">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">url</span>&gt;</span>http://repo.spring.io/milestone<span class="tag">&lt;/<span class="title">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">pluginRepositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我的pom文件在springboot文件夹下的，添加内容后可以通过运行mvn package测试它，第一次会很慢，要下载依赖包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  springboot mvn dependency:tree</span><br><span class="line"></span><br><span class="line">[INFO] --- maven-dependency-plugin:<span class="number">2.10</span>:tree (default-cli) @ myproject ---</span><br><span class="line">[INFO] com.example:myproject:jar:<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT</span><br></pre></td></tr></table></figure>
<h3 id="web_u4F9D_u8D56"><a href="#web_u4F9D_u8D56" class="headerlink" title="web依赖"></a>web依赖</h3><p>开发一个web应用，我们将添加一个spring-boot-starter-web依赖,编辑pom.xml添加spring-boot-starter-web依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>再次运行mvn dependency:tree，查看包依赖情况</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[INFO] com.example:myproject:jar:<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT</span><br><span class="line">[INFO] \- org.springframework.boot:spring-boot-starter-web:jar:<span class="number">1.3</span>.<span class="number">2</span>.BUILD-SNAPSHOT:compile</span><br><span class="line">[INFO]    +- org.springframework.boot:spring-boot-starter:jar:<span class="number">1.3</span>.<span class="number">2</span>.BUILD-SNAPSHOT:compile</span><br><span class="line">[INFO]    |  +- org.springframework.boot:spring-boot:jar:<span class="number">1.3</span>.<span class="number">2</span>.BUILD-SNAPSHOT:compile</span><br><span class="line">[INFO]    |  +- org.springframework.boot:spring-boot-autoconfigure:jar:<span class="number">1.3</span>.<span class="number">2</span>.BUILD-SNAPSHOT:compile</span><br><span class="line">[INFO]    |  +- org.springframework.boot:spring-boot-starter-logging:jar:<span class="number">1.3</span>.<span class="number">2</span>.BUILD-SNAPSHOT:compile</span><br><span class="line">[INFO]    |  |  +- ch.qos.logback:logback-classic:jar:<span class="number">1.1</span>.<span class="number">3</span>:compile</span><br><span class="line">[INFO]    |  |  |  +- ch.qos.logback:logback-core:jar:<span class="number">1.1</span>.<span class="number">3</span>:compile</span><br><span class="line">[INFO]    |  |  |  \- org.slf4j:slf4j-api:jar:<span class="number">1.7</span>.<span class="number">13</span>:compile</span><br><span class="line">[INFO]    |  |  +- org.slf4j:jcl-over-slf4j:jar:<span class="number">1.7</span>.<span class="number">13</span>:compile</span><br><span class="line">[INFO]    |  |  +- org.slf4j:jul-to-slf4j:jar:<span class="number">1.7</span>.<span class="number">13</span>:compile</span><br><span class="line">[INFO]    |  |  \- org.slf4j:<span class="built_in">log</span>4j-over-slf4j:jar:<span class="number">1.7</span>.<span class="number">13</span>:compile</span><br><span class="line">[INFO]    |  +- org.springframework:spring-core:jar:<span class="number">4.2</span>.<span class="number">4</span>.RELEASE:compile</span><br><span class="line">[INFO]    |  \- org.yaml:snakeyaml:jar:<span class="number">1.16</span>:runtime</span><br><span class="line">[INFO]    +- org.springframework.boot:spring-boot-starter-tomcat:jar:<span class="number">1.3</span>.<span class="number">2</span>.BUILD-SNAPSHOT:compile</span><br><span class="line">[INFO]    |  +- org.apache.tomcat.embed:tomcat-embed-core:jar:<span class="number">8.0</span>.<span class="number">30</span>:compile</span><br><span class="line">[INFO]    |  +- org.apache.tomcat.embed:tomcat-embed-el:jar:<span class="number">8.0</span>.<span class="number">30</span>:compile</span><br><span class="line">[INFO]    |  +- org.apache.tomcat.embed:tomcat-embed-logging-juli:jar:<span class="number">8.0</span>.<span class="number">30</span>:compile</span><br><span class="line">[INFO]    |  \- org.apache.tomcat.embed:tomcat-embed-websocket:jar:<span class="number">8.0</span>.<span class="number">30</span>:compile</span><br><span class="line">[INFO]    +- org.springframework.boot:spring-boot-starter-validation:jar:<span class="number">1.3</span>.<span class="number">2</span>.BUILD-SNAPSHOT:compile</span><br><span class="line">[INFO]    |  \- org.hibernate:hibernate-validator:jar:<span class="number">5.2</span>.<span class="number">2</span>.Final:compile</span><br><span class="line">[INFO]    |     +- javax.validation:validation-api:jar:<span class="number">1.1</span>.<span class="number">0</span>.Final:compile</span><br><span class="line">[INFO]    |     +- org.jboss.logging:jboss-logging:jar:<span class="number">3.3</span>.<span class="number">0</span>.Final:compile</span><br><span class="line">[INFO]    |     \- com.fasterxml:classmate:jar:<span class="number">1.1</span>.<span class="number">0</span>:compile</span><br><span class="line">[INFO]    +- com.fasterxml.jackson.core:jackson-databind:jar:<span class="number">2.6</span>.<span class="number">5</span>:compile</span><br><span class="line">[INFO]    |  +- com.fasterxml.jackson.core:jackson-annotations:jar:<span class="number">2.6</span>.<span class="number">5</span>:compile</span><br><span class="line">[INFO]    |  \- com.fasterxml.jackson.core:jackson-core:jar:<span class="number">2.6</span>.<span class="number">5</span>:compile</span><br><span class="line">[INFO]    +- org.springframework:spring-web:jar:<span class="number">4.2</span>.<span class="number">4</span>.RELEASE:compile</span><br><span class="line">[INFO]    |  +- org.springframework:spring-aop:jar:<span class="number">4.2</span>.<span class="number">4</span>.RELEASE:compile</span><br><span class="line">[INFO]    |  |  \- aopalliance:aopalliance:jar:<span class="number">1.0</span>:compile</span><br><span class="line">[INFO]    |  +- org.springframework:spring-beans:jar:<span class="number">4.2</span>.<span class="number">4</span>.RELEASE:compile</span><br><span class="line">[INFO]    |  \- org.springframework:spring-context:jar:<span class="number">4.2</span>.<span class="number">4</span>.RELEASE:compile</span><br><span class="line">[INFO]    \- org.springframework:spring-webmvc:jar:<span class="number">4.2</span>.<span class="number">4</span>.RELEASE:compile</span><br><span class="line">[INFO]       \- org.springframework:spring-expression:jar:<span class="number">4.2</span>.<span class="number">4</span>.RELEASE:compile</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>
<h3 id="u4EE3_u7801"><a href="#u4EE3_u7801" class="headerlink" title="代码"></a>代码</h3><p>创建一个单独的Java文件。Maven默认会编译src/main/java下的源码，所以你需要创建那样的文件结构，然后添加一个名为src/main/java/Example.java的文件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@RestController</span></span><br><span class="line"><span class="annotation">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function">String <span class="title">home</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Example.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="@RestController"><a href="#@RestController" class="headerlink" title="@RestController"></a>@RestController</h3><p>It’s a very common use case to have Controllers implement a REST API, thus serving only JSON, XML or custom MediaType content. For convenience, instead of annotating all your @RequestMapping methods with @ResponseBody, you can annotate your Controller Class with @RestController.</p>
<p>@RestController is a stereotype annotation that combines @ResponseBody and @Controller. More than that, it gives more meaning to your Controller and also may carry additional semantics in future releases of the framework.</p>
<h3 id="@EnableAutoConfiguration"><a href="#@EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><p>这个注解告诉Spring Boot根据添加的jar依赖猜测你想如何配置Spring。由于spring-boot-starter-web添加了Tomcat和Spring MVC，所以auto-configuration将假定你正在开发一个web应用并相应地对Spring进行设置。</p>
<p>很多Spring Boot开发者总是使用@Configuration，@EnableAutoConfiguration和@ComponentScan注解他们的main类。由于这些注解被如此频繁地一块使用，Spring Boot提供一个方便的@SpringBootApplication选择。</p>
<p>该@SpringBootApplication注解等价于以默认属性使用@Configuration，@EnableAutoConfiguration和@ComponentScan。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myproject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@SpringBootApplication</span> <span class="comment">// same as @Configuration @EnableAutoConfiguration @ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="mian"><a href="#mian" class="headerlink" title="mian"></a>mian</h3><p>这只是一个标准的方法，它遵循Java对于一个应用程序入口点的约定。我们的main方法通过调用run，将业务委托给了Spring Boot的SpringApplication类。SpringApplication将引导我们的应用，启动Spring，相应地启动被自动配置的Tomcat web服务器。我们需要将Example.class作为参数传递给run方法来告诉SpringApplication谁是主要的Spring组件。为了暴露任何的命令行参数，args数组也会被传递过去</p>
<h3 id="u8FD0_u884C"><a href="#u8FD0_u884C" class="headerlink" title="运行"></a>运行</h3><p>到此我们的应用应该可以工作了。由于使用了spring-boot-starter-parent POM，这样我们就有了一个非常有用的run目标，我们可以用它启动程序。在项目根目录下输入mvn spring-boot:run来启动应用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">➜  springboot mvn spring-boot:run</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___<span class="string">'_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | '</span>_ | <span class="string">'_| | '</span>_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  <span class="string">'  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::  (v1.3.2.BUILD-SNAPSHOT)</span><br><span class="line"></span><br><span class="line">2016-02-20 18:57:49.387  INFO 2800 --- [           main] Example                                  : Starting Example on larrydeMacBook-Pro.local with PID 2800 (/Users/larry/IdeaProjects/java/springboot/target/classes started by larry in /Users/larry/IdeaProjects/java/springboot)</span><br><span class="line"></span><br><span class="line">2016-02-20 18:57:50.116  INFO 2800 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8080 (http)</span><br><span class="line">2016-02-20 18:57:50.124  INFO 2800 --- [           main] o.apache.catalina.core.StandardService   : Starting service Tomcat</span><br><span class="line">2016-02-20 18:57:50.125  INFO 2800 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.0.30</span><br><span class="line">2016-02-20 18:57:50.298  INFO 2800 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span><br><span class="line">2016-02-20 18:57:50.298  INFO 2800 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization </span><br><span class="line"></span><br><span class="line">AnnotationMBeanExporter        : Registering beans for JMX exposure on startup</span><br><span class="line">2016-02-20 18:57:50.887  INFO 2800 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)</span><br><span class="line">2016-02-20 18:57:50.891  INFO 2800 --- [           main] Example                                  : Started Example in 2.096 seconds (JVM running for 4.109)</span></span><br></pre></td></tr></table></figure>
<p>浏览器打开localhost:8080</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure>
<h3 id="u53EF_u6267_u884Cjar"><a href="#u53EF_u6267_u884Cjar" class="headerlink" title="可执行jar"></a>可执行jar</h3><p>为了创建可执行的jar，需要将spring-boot-maven-plugin添加到我们的pom.xml中。在dependencies节点下插入以下内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>保存你的pom.xml，然后从命令行运行mvn package：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  springboot mvn package  </span><br><span class="line"></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: <span class="number">38.328</span> s</span><br><span class="line">[INFO] Finished at: <span class="number">2016</span>-<span class="number">02</span>-<span class="number">20</span>T19:<span class="number">06</span>:<span class="number">06</span>+<span class="number">08</span>:<span class="number">00</span></span><br><span class="line">[INFO] Final Memory: <span class="number">24</span>M/<span class="number">319</span>M</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>
<p>使用<code>jar tvf</code> 查看jar包内部结构</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  springboot jar tvf target/myproject-<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT.jar</span><br><span class="line">     <span class="number">0</span> Sat Feb <span class="number">20</span> <span class="number">19</span>:<span class="number">06</span>:<span class="number">06</span> CST <span class="number">2016</span> META-INF/</span><br><span class="line">   <span class="number">411</span> Sat Feb <span class="number">20</span> <span class="number">19</span>:<span class="number">06</span>:<span class="number">06</span> CST <span class="number">2016</span> META-INF/MANIFEST.MF</span><br><span class="line">   <span class="number">909</span> Sat Feb <span class="number">20</span> <span class="number">18</span>:<span class="number">55</span>:<span class="number">32</span> CST <span class="number">2016</span> Example.class</span><br><span class="line">     <span class="number">0</span> Sat Feb <span class="number">20</span> <span class="number">19</span>:<span class="number">06</span>:<span class="number">06</span> CST <span class="number">2016</span> META-INF/maven/</span><br><span class="line">     <span class="number">0</span> Sat Feb <span class="number">20</span> <span class="number">19</span>:<span class="number">06</span>:<span class="number">06</span> CST <span class="number">2016</span> META-INF/maven/com.example/</span><br><span class="line">     <span class="number">0</span> Sat Feb <span class="number">20</span> <span class="number">19</span>:<span class="number">06</span>:<span class="number">06</span> CST <span class="number">2016</span> META-INF/maven/com.example/myproject/</span><br><span class="line">  <span class="number">1871</span> Sat Feb <span class="number">20</span> <span class="number">19</span>:<span class="number">04</span>:<span class="number">56</span> CST <span class="number">2016</span> META-INF/maven/com.example/myproject/pom.xml</span><br><span class="line">   <span class="number">114</span> Sat Feb <span class="number">20</span> <span class="number">19</span>:<span class="number">06</span>:<span class="number">06</span> CST <span class="number">2016</span> META-INF/maven/com.example/myproject/pom.properties</span><br></pre></td></tr></table></figure>
<p>使用<code>java -jar</code>运行jar包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜  springboot java -jar target/myproject-<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___<span class="string">'_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | '</span>_ | <span class="string">'_| | '</span>_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  <span class="string">'  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::  (v1.3.2.BUILD-SNAPSHOT)</span><br><span class="line"></span><br><span class="line">2016-02-20 19:07:17.774  INFO 2849 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet '</span>dispatcherServlet<span class="string">'</span><br><span class="line">2016-02-20 19:07:17.774  INFO 2849 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet '</span>dispatcherServlet<span class="string">': initialization started</span><br><span class="line">2016-02-20 19:07:17.785  INFO 2849 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet '</span>dispatcherServlet<span class="string">': initialization completed in 11 ms</span></span><br></pre></td></tr></table></figure>
<p>使用<code>ctrl-c</code>退出程序</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文地址：<a href="http://course.tianmaying.com/spring-boot-reference/lesson/lesson-11#0">天码营-SpringBoot参考指南</a> 本文只是学习笔记</p>
<h3 id="u51C6_u5907"><a href="#u51C6_u5907" class="headerlink" title="准备"></a>准备</h3><p>让我们使用Java开发一个简单的”Hello World!” web应用，来强调下Spring Boot的一些关键特性。我们将使用Maven构建该项目，因为大多数IDEs都支持它。</p>
<p>注：<a href="/spring.io">spring.io</a>网站包含很多使用Spring Boot的”入门”指南。如果你正在找特定问题的解决方案，可以先去那瞅瞅。</p>
<p>在开始前，你需要打开一个终端，检查是否安装可用的Java版本和Maven：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ java -version</span><br><span class="line">java version <span class="string">"1.8.0_65"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build <span class="number">1.8</span>.<span class="number">0</span>_65-b17)</span><br><span class="line">Java HotSpot(TM) <span class="number">64</span>-Bit Server VM (build <span class="number">25.65</span>-b01, mixed mode)</span><br><span class="line">➜  ~ mvn -v</span><br><span class="line">Apache Maven <span class="number">3.3</span>.<span class="number">9</span> (bb52d8502b132ec0a5a3f4c09453c07478323dc5; <span class="number">2015</span>-<span class="number">11</span>-<span class="number">11</span>T00:<span class="number">41</span>:<span class="number">47</span>+<span class="number">08</span>:<span class="number">00</span>)</span><br><span class="line">Maven home: /usr/<span class="built_in">local</span>/Cellar/maven/<span class="number">3.3</span>.<span class="number">9</span>/libexec</span><br><span class="line">Java version: <span class="number">1.8</span>.<span class="number">0</span>_65, vendor: Oracle Corporation</span><br><span class="line">Java home: /Library/Java/JavaVirtualMachines/jdk1.<span class="number">8.0</span>_65.jdk/Contents/Home/jre</span><br><span class="line">Default locale: zh_CN, platform encoding: UTF-<span class="number">8</span></span><br><span class="line">OS name: <span class="string">"mac os x"</span>, version: <span class="string">"10.11"</span>, arch: <span class="string">"x86_64"</span>, family: <span class="string">"mac"</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Spring" scheme="http://suqun.github.io/tags/Spring/"/>
    
      <category term="SpringBoot" scheme="http://suqun.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring Boot安装]]></title>
    <link href="http://suqun.github.io/2016/02/16/Spring-Boot%E5%AE%89%E8%A3%85/"/>
    <id>http://suqun.github.io/2016/02/16/Spring-Boot安装/</id>
    <published>2016-02-16T14:54:54.000Z</published>
    <updated>2016-02-20T11:18:39.000Z</updated>
    <content type="html"><![CDATA[<h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>Spring Boot可以跟典型的Java开发工具一块使用或安装为一个命令行工具。不管怎样，你将需要安装Java SDK v1.6 或更高版本。在开始之前，你需要检查下当前安装的Java版本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p>注：尽管Spring Boot兼容Java 1.6，如果可能的话，你应该考虑使用Java最新版本。</p>
<h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><p>Spring Boot兼容Apache Maven 3.2或更高版本,OSX系统下使用brew安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install maven</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>Spring Boot依赖的groupId为org.springframework.boot。通常你的Maven POM文件需要继承spring-boot-starter-parent，然后声明一个或多个“Starter POMs”依赖。Spring Boot也提供了一个用于创建可执行jars的Maven插件。</p>
<p>典型的pom.xml文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">project</span> <span class="attribute">xmlns</span>=<span class="value">"http://maven.apache.org/POM/4.0.0"</span> <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">    <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="title">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>myproject<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Inherit defaults from Spring Boot --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.3.0.BUILD-SNAPSHOT<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Add typical dependencies for a web application --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Package as an executable jar --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">build</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Add Spring repositories --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- (you don't need this if you are using a .RELEASE version) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="title">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">url</span>&gt;</span>http://repo.spring.io/snapshot<span class="tag">&lt;/<span class="title">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">snapshots</span>&gt;</span><span class="tag">&lt;<span class="title">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="title">enabled</span>&gt;</span><span class="tag">&lt;/<span class="title">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="title">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">url</span>&gt;</span>http://repo.spring.io/milestone<span class="tag">&lt;/<span class="title">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="title">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">url</span>&gt;</span>http://repo.spring.io/snapshot<span class="tag">&lt;/<span class="title">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="title">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">url</span>&gt;</span>http://repo.spring.io/milestone<span class="tag">&lt;/<span class="title">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">pluginRepositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Spring_Boot_CLI"><a href="#Spring_Boot_CLI" class="headerlink" title="Spring Boot CLI"></a>Spring Boot CLI</h3><p>如果你的环境是Mac，并使用Homebrew，想要安装Spring Boot CLI只需如下操作：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap pivotal/tap</span><br><span class="line">brew install springboot</span><br></pre></td></tr></table></figure>
<h3 id="u6D4B_u8BD5"><a href="#u6D4B_u8BD5" class="headerlink" title="测试"></a>测试</h3><p>下面是一个相当简单的web应用，你可以用它测试你的安装是否成功。创建一个名叫app.groovy的文件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThisWillActuallyRun</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function">String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="string">"Hello World!"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后简单地从一个shell中运行它：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring run app.groovy</span><br></pre></td></tr></table></figure>
<p>注：当你首次运行该应用时将会花费一点时间，因为需要下载依赖。后续运行将会快很多。</p>
<p>在你最喜欢的浏览器中打开localhost:8080，然后你应该看到以下输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure>
<p>原文：<a href="http://course.tianmaying.com/spring-boot-reference/lesson/lesson-10#0" target="_blank" rel="external">Spring Boot参考指南</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>Spring Boot可以跟典型的Java开发工具一块使用或安装为一个命令行工具。不管怎样，你将需要安装Java SDK v1.6 或更高版本。在开始之前，你需要检查下当前安装的Java版本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p>注：尽管Spring Boot兼容Java 1.6，如果可能的话，你应该考虑使用Java最新版本。</p>
<h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><p>Spring Boot兼容Apache Maven 3.2或更高版本,OSX系统下使用brew安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install maven</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Spring" scheme="http://suqun.github.io/tags/Spring/"/>
    
      <category term="SpringBoot" scheme="http://suqun.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker容器的操作]]></title>
    <link href="http://suqun.github.io/2016/01/30/docker%E5%AE%B9%E5%99%A8%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>http://suqun.github.io/2016/01/30/docker容器的操作/</id>
    <published>2016-01-29T16:06:23.000Z</published>
    <updated>2016-02-20T11:18:24.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u8FD0_u884C_u5BB9_u5668"><a href="#u8FD0_u884C_u5BB9_u5668" class="headerlink" title="运行容器"></a>运行容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run 运行容器</span><br><span class="line">-i -t  创建交互式容器</span><br><span class="line"><span class="operator">-d</span> 创建守护式容器</span><br><span class="line">--name 为容器指定一个名称</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it ubuntu /bin/bash</span><br><span class="line">root@<span class="number">8</span>abb3326b08f:/<span class="comment"># cat /etc/issue.net</span></span><br><span class="line">Ubuntu <span class="number">14.04</span>.<span class="number">3</span> LTS</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="u7ED3_u675F_u5BB9_u5668"><a href="#u7ED3_u675F_u5BB9_u5668" class="headerlink" title="结束容器"></a>结束容器</h3><p>exit 结束容器</p>
<h3 id="u67E5_u770B_u8FD0_u884C_u7684_u5BB9_u5668"><a href="#u67E5_u770B_u8FD0_u884C_u7684_u5BB9_u5668" class="headerlink" title="查看运行的容器"></a>查看运行的容器</h3><p>docker ps 查看运行的容器</p>
<p>-a 查看所有容器运行状态</p>
<p>docker inspect 查看容器的详细信息</p>
<h3 id="u505C_u6B62_u5BB9_u5668"><a href="#u505C_u6B62_u5BB9_u5668" class="headerlink" title="停止容器"></a>停止容器</h3><p>docker stop 停止一个守护式容器</p>
<h3 id="u5220_u9664_u5BB9_u5668"><a href="#u5220_u9664_u5BB9_u5668" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm &#21024;&#38500;&#19968;&#20010;&#20572;&#27490;&#30340;&#23481;&#22120;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u8FD0_u884C_u5BB9_u5668"><a href="#u8FD0_u884C_u5BB9_u5668" class="headerlink" title="运行容器"></a>运行容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run 运行容器</span><br><span class="line">-i -t  创建交互式容器</span><br><span class="line"><span class="operator">-d</span> 创建守护式容器</span><br><span class="line">--name 为容器指定一个名称</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it ubuntu /bin/bash</span><br><span class="line">root@<span class="number">8</span>abb3326b08f:/<span class="comment"># cat /etc/issue.net</span></span><br><span class="line">Ubuntu <span class="number">14.04</span>.<span class="number">3</span> LTS</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Docker" scheme="http://suqun.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Shell编程之正则表达式]]></title>
    <link href="http://suqun.github.io/2016/01/13/Shell%E7%BC%96%E7%A8%8B%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://suqun.github.io/2016/01/13/Shell编程之正则表达式/</id>
    <published>2016-01-13T13:38:39.000Z</published>
    <updated>2016-01-18T15:39:35.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u6B63_u5219_u8868_u8FBE_u5F0F_u4E0E_u901A_u914D_u7B26"><a href="#u6B63_u5219_u8868_u8FBE_u5F0F_u4E0E_u901A_u914D_u7B26" class="headerlink" title="正则表达式与通配符"></a>正则表达式与通配符</h3><p>Linux中的正则表达式和通配符有些区别，正则表达式用来在文件中匹配符合条件的<code>字符串</code>，正则是<code>包含匹配</code>。grep，awk，sed等命令可以支持正则表达式。通配符用来匹配符合条件的<code>文件名</code>，通配符是<code>完全匹配</code>。ls，find，cp这些命令不支持正则所有只能用shell自己的通配符进行匹配。</p>
<a id="more"></a>
<p>通配符：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*   匹配任意内容</span><br><span class="line">？   匹配任意一个内容</span><br><span class="line">[]  匹配中括号中的一个字符</span><br></pre></td></tr></table></figure>
<h3 id="u57FA_u7840_u6B63_u5219_u8868_u8FBE_u5F0F"><a href="#u57FA_u7840_u6B63_u5219_u8868_u8FBE_u5F0F" class="headerlink" title="基础正则表达式"></a>基础正则表达式</h3><p>Linux下基础正则表达式有：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*   前一个字符匹配<span class="number">0</span>次或任意多次</span><br><span class="line">.   匹配除了换行符外任意一个字符</span><br><span class="line">^   匹配行首。例如：^hello会匹配以hello开头的行</span><br><span class="line">$   匹配行尾。例如：hello$会匹配以hello结尾的行</span><br><span class="line">[]  匹配括号中指定的任意一个字符，只匹配一个字符。例如：[aoeiu]匹配任意一个元音字母，[<span class="number">0</span>-<span class="number">9</span>]匹配任意一个数字，[a-z][<span class="number">0</span>-<span class="number">9</span>]匹配任意一个字母和一位数字组成的<span class="number">2</span>位字符</span><br><span class="line">[^] 匹配除括号中的字符以外的任意一个字符。例如：[^<span class="number">0</span>-<span class="number">9</span>]匹配任意一个非数字的字符，[^a-z]匹配任意一个非小写字母的字符</span><br><span class="line">\   转义字符</span><br><span class="line">\&#123;n\&#125;   表示其前面的字符恰好出现n次。例如：a[<span class="number">0</span>-<span class="number">9</span>]\&#123;<span class="number">4</span>\&#125;b 匹配ab之间为<span class="number">4</span>位数字的字符，注意前后加定界符</span><br><span class="line">\&#123;n,\&#125;  表示其前面的字符出现不小于n次。例如：[<span class="number">0</span>-<span class="number">9</span>]\&#123;<span class="number">2</span>\&#125;表示<span class="number">2</span>位及以上的数字，注意前后加定界符</span><br><span class="line">\&#123;n,m\&#125; 表示其前面的字符至少出现n次，至多出现m次。例如：[a-z]\&#123;<span class="number">6</span>,<span class="number">8</span>\&#125;匹配<span class="number">6</span>到<span class="number">8</span>位的小写字母</span><br></pre></td></tr></table></figure>
<h3 id="u5B57_u7B26_u64CD_u4F5C_u547D_u4EE4"><a href="#u5B57_u7B26_u64CD_u4F5C_u547D_u4EE4" class="headerlink" title="字符操作命令"></a>字符操作命令</h3><h4 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">名称</span><br><span class="line"> cut -- 截取文件中每行的选定部分</span><br><span class="line"> cut  [-bn] [file] 或 cut [-c] [file]  或  cut [-df] [file]</span><br><span class="line">说明</span><br><span class="line">    -b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。</span><br><span class="line">    -c ：以字符为单位进行分割。</span><br><span class="line">    <span class="operator">-d</span> ：自定义分隔符，默认为制表符。</span><br><span class="line">    <span class="operator">-f</span> ：与<span class="operator">-d</span>一起使用，指定显示哪个区域。</span><br><span class="line">    -n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的&lt;br /&gt;范围之内，该字符将被写出；否则，该字符将被排除</span><br></pre></td></tr></table></figure>
<p>我们将系统磁盘信息导出到文本/notes/linux/df中，来练习cut的使用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  linux  touch df</span><br><span class="line">➜  linux  df -h &gt; df</span><br><span class="line">➜  linux  cat df</span><br><span class="line">Filesystem      Size   Used  Avail Capacity  iused    ifree %iused  Mounted on</span><br><span class="line">/dev/disk1     <span class="number">233</span>Gi   <span class="number">50</span>Gi  <span class="number">182</span>Gi    <span class="number">22</span>% <span class="number">13178033</span> <span class="number">47803213</span>   <span class="number">22</span>%   /</span><br><span class="line">devfs          <span class="number">180</span>Ki  <span class="number">180</span>Ki    <span class="number">0</span>Bi   <span class="number">100</span>%      <span class="number">624</span>        <span class="number">0</span>  <span class="number">100</span>%   /dev</span><br><span class="line">map -hosts       <span class="number">0</span>Bi    <span class="number">0</span>Bi    <span class="number">0</span>Bi   <span class="number">100</span>%        <span class="number">0</span>        <span class="number">0</span>  <span class="number">100</span>%   /net</span><br><span class="line">map auto_home    <span class="number">0</span>Bi    <span class="number">0</span>Bi    <span class="number">0</span>Bi   <span class="number">100</span>%        <span class="number">0</span>        <span class="number">0</span>  <span class="number">100</span>%   /home</span><br></pre></td></tr></table></figure>
<p>我们首先截取df的第一列Filesystem和第五列Capacity</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  linux  cut <span class="operator">-f</span> <span class="number">1</span>,<span class="number">5</span> df     &lt;== <span class="operator">-f</span> 按列截取 <span class="number">1</span>,<span class="number">5</span>截取第一列和第<span class="number">5</span>列</span><br><span class="line">Filesystem       Size   Used  Avail Capacity  iused    ifree %iused  Mounted on</span><br><span class="line">/dev/disk1     <span class="number">233</span>Gi   <span class="number">50</span>Gi  <span class="number">182</span>Gi    <span class="number">22</span>% <span class="number">13178033</span> <span class="number">47803213</span>   <span class="number">22</span>%   /</span><br><span class="line">devfs          <span class="number">180</span>Ki  <span class="number">180</span>Ki    <span class="number">0</span>Bi   <span class="number">100</span>%      <span class="number">624</span>        <span class="number">0</span>  <span class="number">100</span>%   /dev</span><br><span class="line">map -hosts       <span class="number">0</span>Bi    <span class="number">0</span>Bi    <span class="number">0</span>Bi   <span class="number">100</span>%        <span class="number">0</span>        <span class="number">0</span>  <span class="number">100</span>%   /net</span><br><span class="line">map auto_home    <span class="number">0</span>Bi    <span class="number">0</span>Bi    <span class="number">0</span>Bi   <span class="number">100</span>%        <span class="number">0</span>        <span class="number">0</span>  <span class="number">100</span>%   /home</span><br></pre></td></tr></table></figure>
<p>结果显示，输出的和原来的一样，并没有将第一五两列截取出来。原因是<code>cut截取默认使用的分隔符是制表符</code>，而df文本中间的分隔符为空格，我们重新修改下命令，指定分隔符为空格</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  linux  cut <span class="operator">-f</span> <span class="number">1</span>，<span class="number">5</span> <span class="operator">-d</span> <span class="string">" "</span> df  &lt;== <span class="operator">-d</span> 指定截取的分隔符，只能设置一个空格不能多个</span><br><span class="line">Filesystem</span><br><span class="line">/dev/disk1</span><br><span class="line">devfs</span><br><span class="line">map</span><br><span class="line">map</span><br><span class="line">➜  linux  cut <span class="operator">-f</span> <span class="number">1</span>-<span class="number">8</span> <span class="operator">-d</span> <span class="string">" "</span> df  &lt;==截取第一列到第八列的</span><br><span class="line">Filesystem      Size</span><br><span class="line">/dev/disk1     <span class="number">233</span>Gi</span><br><span class="line">devfs</span><br><span class="line">map -hosts</span><br><span class="line">map auto_home    <span class="number">0</span>Bi</span><br></pre></td></tr></table></figure>
<p>截取1，5两列时好像只截取了1列。原来cut指定的分隔符为空格，它就把一个空格作为分隔符，而df文本第一列后面是很多空格的，按照空格分隔的话，第五列是空格。cut截取命令比较简单，复杂的截取命令可以使用awk。</p>
<h4 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">名称</span><br><span class="line"> <span class="built_in">printf</span> -- 格式化并输出结果到标准输出</span><br><span class="line"> <span class="built_in">printf</span> 格式替代符转义序列 内容 </span><br><span class="line">说明</span><br><span class="line">    格式替代符 </span><br><span class="line">    %b 相对应的参数被视为含有要被处理的转义序列之字符串。 </span><br><span class="line">    %c ASCII字符。显示相对应参数的第一个字符 </span><br><span class="line">    %d, %i 十进制整数 </span><br><span class="line">    %e, %E, %f 浮点格式 </span><br><span class="line">    %g %e或%f转换，看哪一个较短，则删除结尾的零 </span><br><span class="line">    %G %E或%f转换，看哪一个较短，则删除结尾的零 </span><br><span class="line">    %o 不带正负号的八进制值 </span><br><span class="line">    %s 字符串 </span><br><span class="line">    %u 不带正负号的十进制值 </span><br><span class="line">    %x 不带正负号的十六进制值，使用a至f表示<span class="number">10</span>至<span class="number">15</span> </span><br><span class="line">    %X 不带正负号的十六进制值，使用A至F表示<span class="number">10</span>至<span class="number">15</span> </span><br><span class="line">    %% 字面意义的% </span><br><span class="line"></span><br><span class="line">    转义序列 </span><br><span class="line">    \a 警告字符，通常为ASCII的BEL字符 </span><br><span class="line">    \b 后退 </span><br><span class="line">    \c 抑制（不显示）输出结果中任何结尾的换行字符（只在%b格式指示符控制下的参数字符串中有效），而且，任何留在参数里的字符、任何接下来的参数以及任何留在格式字符串中的字符，都被忽略 </span><br><span class="line">    \f 换页（formfeed） </span><br><span class="line">    \n 换行 </span><br><span class="line">    \r 回车（Carriage <span class="built_in">return</span>） </span><br><span class="line">    \t 水平制表符 </span><br><span class="line">    \v 垂直制表符 </span><br><span class="line">    \\ 一个字面上的反斜杠字符 </span><br><span class="line">    \ddd 表示<span class="number">1</span>到<span class="number">3</span>位数八进制值的字符，仅在格式字符串中有效 </span><br><span class="line">    \<span class="number">0</span>ddd 表示<span class="number">1</span>到<span class="number">3</span>位的八进制值字符</span><br></pre></td></tr></table></figure>
<p>我们使用printf输出/notes/linux/df的内容</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  linux  <span class="built_in">printf</span> %s $(cat df)   &lt;== <span class="built_in">printf</span>不支持管道符`|`，使用$()的方式调用系统命令</span><br><span class="line">FilesystemSizeUsedAvailCapacityiusedifree%iusedMountedon/dev/disk1233Gi50Gi182Gi22%<span class="number">131780334780321322</span>%/devfs180Ki180Ki0Bi100%<span class="number">6240100</span>%/devmap-hosts0Bi0Bi0Bi100%<span class="number">00100</span>%/netmapauto_home0Bi0Bi0Bi100%<span class="number">00100</span>%/home</span><br></pre></td></tr></table></figure>
<p>可以看到，printf将df内容以字符串的形式直接输出,下面看下根据输出格式输出简单文本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %-5s 格式为左对齐且宽度为5的字符串代替（-表示左对齐），不使用则是又对齐</span></span><br><span class="line"><span class="comment"># %-4.2f 格式为左对齐宽度为4，保留两位小数</span></span><br><span class="line">➜  linux  <span class="built_in">printf</span> <span class="string">"%-5s %-10s %-4s\n"</span> NO Name Mark</span><br><span class="line">   NO       Name Mark</span><br><span class="line">➜  linux  <span class="built_in">printf</span> <span class="string">"%-5s %-10s %-4.2f\n"</span> <span class="number">01</span> Tom <span class="number">90.3456</span></span><br><span class="line">   <span class="number">01</span>        Tom <span class="number">90.35</span></span><br><span class="line">➜  linux  <span class="built_in">printf</span> <span class="string">"%-5s %-10s %-4.2f\n"</span> <span class="number">02</span> Jack <span class="number">89.2345</span></span><br><span class="line">   <span class="number">02</span>       Jack <span class="number">89.23</span></span><br></pre></td></tr></table></figure>
<h4 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NAME</span><br><span class="line">       awk - pattern-directed scanning and processing language</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       awk [ -F fs ] [ -v var=value ] [ <span class="string">'prog'</span> | <span class="operator">-f</span> progfile ] [ file ...  ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Awk  scans  each input file for lines that match any of a set of patterns specified literally in prog or in one or more files specified as -f progfile.  With each pattern there&#10;can be an associated action that will be performed when a line of a file matches the pattern.  Each line is matched against the pattern portion of every  pattern-action  state-&#10;ment; the associated action is performed for each matched pattern.  The file name - means the standard input.  Any file of the form var=value is treated as an assignment, not a&#10;filename, and is executed at the time it would have been opened if it were a filename.  The option -v followed by var=value is an assignment to be done before prog is executed;&#10;any number of -v options may be present.  The -F fs option defines the input field separator to be the regular expression fs.&#10;&#10;An  input line is normally made up of fields separated by white space, or by regular expression FS.  The fields are denoted $1, $2, ..., while $0 refers to the entire line.  If&#10;FS is null, the input line is split into one field per character.&#10; &#10;&#10;A pattern-action statement has the form&#10;&#10;       pattern &#123; action &#125;&#10;&#10;A missing &#123; action &#125; means print the line; a missing pattern always matches.  Pattern-action statements are separated by newlines or semicolons.&#10;&#10;An action is a sequence of statements.  A statement can be one of the following:&#10;&#10;       if( expression ) statement [ else statement ]&#10;       while( expression ) statement&#10;       for( expression ; expression ; expression ) statement&#10;       for( var in array ) statement&#10;       do statement while( expression )&#10;       break&#10;       continue&#10;       &#123; [ statement ... ] &#125;&#10;       expression              # commonly var = expression&#10;       print [ expression-list ] [ &#62; expression ]&#10;       printf format [ , expression-list ] [ &#62; expression ]&#10;       return [ expression ]&#10;       next                    # skip remaining patterns on this input line&#10;       nextfile                # skip rest of this file, open next, start at top&#10;       delete array[ expression ] # delete an array element&#10;       delete array            # delete all elements of array&#10;       exit [ expression ]     # exit immediately; status is expression</span><br></pre></td></tr></table></figure>
<h4 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h4><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">NAME</span><br><span class="line">       sort - 对文件行进行排序</span><br><span class="line">SYNOPSIS</span><br><span class="line">       sort [OPTION]... [FILE]...</span><br><span class="line">DESCRIPTION</span><br><span class="line">       <span class="operator">-f</span> 忽略大小写</span><br><span class="line">       -n 以数值型进行排序，默认字符串类型排序</span><br><span class="line">       -r 反向排序</span><br><span class="line">       -t 指定分隔符，默认分隔符为制表符</span><br><span class="line">       -k POS1[,POS2] 按照指定的字段范围排序，从Pos1开始到Pos2结尾（默认到行尾）</span><br></pre></td></tr></table></figure>
<p>做些练习，首先查看用户信息文件/etc/passwd,排序</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  linux  sort /etc/passwd</span><br><span class="line">...</span><br><span class="line">_amavisd:*:<span class="number">83</span>:<span class="number">83</span>:AMaViS Daemon:/var/virusmails:/usr/bin/<span class="literal">false</span></span><br><span class="line">_appleevents:*:<span class="number">55</span>:<span class="number">55</span>:AppleEvents Daemon:/var/empty:/usr/bin/<span class="literal">false</span></span><br><span class="line">_appowner:*:<span class="number">87</span>:<span class="number">87</span>:Application Owner:/var/empty:/usr/bin/<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>反向排序</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  linux  sort -r /etc/passwd</span><br><span class="line">root:*:<span class="number">0</span>:<span class="number">0</span>:System Administrator:/var/root:/bin/sh</span><br><span class="line">nobody:*:-<span class="number">2</span>:-<span class="number">2</span>:Unprivileged User:/var/empty:/usr/bin/<span class="literal">false</span></span><br><span class="line">daemon:*:<span class="number">1</span>:<span class="number">1</span>:System Services:/var/root:/usr/bin/<span class="literal">false</span></span><br><span class="line">_xserverdocs:*:<span class="number">251</span>:<span class="number">251</span>:OS X Server Documents Service:/var/empty:/usr/bin/<span class="literal">false</span></span><br><span class="line">_wwwproxy:*:<span class="number">252</span>:<span class="number">252</span>:WWW Proxy:/var/empty:/usr/bin/<span class="literal">false</span></span><br><span class="line">_www:*:<span class="number">70</span>:<span class="number">70</span>:World Wide Web Server:/Library/WebServer:/usr/bin/<span class="literal">false</span></span><br><span class="line">_windowserver:*:<span class="number">88</span>:<span class="number">88</span>:WindowServer:/var/empty:/usr/bin/<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>指定分隔符”:”,用第三个字段开头，第三个字段结尾排序，就是只使用第三个字段排序，主要下面的第三个字段，-2，0，1，13，249…26，27，31，32，4，54 按字符排序，若使用数值排序加 <code>-n</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">➜  linux  sort -t <span class="string">":"</span> -k <span class="number">3</span>,<span class="number">3</span> /etc/passwd</span><br><span class="line">nobody:*:-<span class="number">2</span>:-<span class="number">2</span>:Unprivileged User:/var/empty:/usr/bin/<span class="literal">false</span></span><br><span class="line">root:*:<span class="number">0</span>:<span class="number">0</span>:System Administrator:/var/root:/bin/sh</span><br><span class="line">daemon:*:<span class="number">1</span>:<span class="number">1</span>:System Services:/var/root:/usr/bin/<span class="literal">false</span></span><br><span class="line">_taskgated:*:<span class="number">13</span>:<span class="number">13</span>:Task Gate Daemon:/var/empty:/usr/bin/<span class="literal">false</span></span><br><span class="line">_ondemand:*:<span class="number">249</span>:<span class="number">249</span>:On Demand Resource Daemon:/var/db/ondemand:/usr/bin/<span class="literal">false</span></span><br><span class="line">_installassistant:*:<span class="number">25</span>:<span class="number">25</span>:Install Assistant:/var/empty:/usr/bin/<span class="literal">false</span></span><br><span class="line">_xserverdocs:*:<span class="number">251</span>:<span class="number">251</span>:OS X Server Documents Service:/var/empty:/usr/bin/<span class="literal">false</span></span><br><span class="line">_wwwproxy:*:<span class="number">252</span>:<span class="number">252</span>:WWW Proxy:/var/empty:/usr/bin/<span class="literal">false</span></span><br><span class="line">_lp:*:<span class="number">26</span>:<span class="number">26</span>:Printing Services:/var/spool/cups:/usr/bin/<span class="literal">false</span></span><br><span class="line">_postfix:*:<span class="number">27</span>:<span class="number">27</span>:Postfix Mail Server:/var/spool/postfix:/usr/bin/<span class="literal">false</span></span><br><span class="line">_scsd:*:<span class="number">31</span>:<span class="number">31</span>:Service Configuration Service:/var/empty:/usr/bin/<span class="literal">false</span></span><br><span class="line">_ces:*:<span class="number">32</span>:<span class="number">32</span>:Certificate Enrollment Service:/var/empty:/usr/bin/<span class="literal">false</span></span><br><span class="line">_uucp:*:<span class="number">4</span>:<span class="number">4</span>:Unix to Unix Copy Protocol:/var/spool/uucp:/usr/sbin/uucico</span><br><span class="line">_mcxalr:*:<span class="number">54</span>:<span class="number">54</span>:MCX AppLaunch:/var/empty:/usr/bin/<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第三个字段按数值排序 -2,0,1,4,13,24...</span></span><br><span class="line">➜  linux  sort -n -t <span class="string">":"</span> -k <span class="number">3</span>,<span class="number">3</span> /etc/passwd</span><br><span class="line">nobody:*:-<span class="number">2</span>:-<span class="number">2</span>:Unprivileged User:/var/empty:/usr/bin/<span class="literal">false</span></span><br><span class="line">root:*:<span class="number">0</span>:<span class="number">0</span>:System Administrator:/var/root:/bin/sh</span><br><span class="line">daemon:*:<span class="number">1</span>:<span class="number">1</span>:System Services:/var/root:/usr/bin/<span class="literal">false</span></span><br><span class="line">_uucp:*:<span class="number">4</span>:<span class="number">4</span>:Unix to Unix Copy Protocol:/var/spool/uucp:/usr/sbin/uucico</span><br><span class="line">_taskgated:*:<span class="number">13</span>:<span class="number">13</span>:Task Gate Daemon:/var/empty:/usr/bin/<span class="literal">false</span></span><br><span class="line">_networkd:*:<span class="number">24</span>:<span class="number">24</span>:Network Services:/var/networkd:/usr/bin/<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h4 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">NAME</span><br><span class="line">     wc -- 统计字数，行数，字符数，字节数</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">     wc [-clmw] [file ...]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">     -c      The number of bytes <span class="keyword">in</span> each input file is written to the standard output.  This will cancel out any prior usage of the -m option.</span><br><span class="line">     <span class="operator">-l</span>      The number of lines <span class="keyword">in</span> each input file is written to the standard output.</span><br><span class="line">     -m      The number of characters <span class="keyword">in</span> each input file is written to the standard output.  If the current locale does not support multibyte characters, this is equivalent to the -c</span><br><span class="line">             option.  This will cancel out any prior usage of the -c option.</span><br><span class="line">     -w      The number of words <span class="keyword">in</span> each input file is written to the standard output.</span><br></pre></td></tr></table></figure>
<p>查看用户信息的行数</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  linux  wc <span class="operator">-l</span> /etc/passwd</span><br><span class="line">      <span class="number">96</span> /etc/passwd</span><br></pre></td></tr></table></figure>
<p>参考资料: </p>
<p><a href="http://www.imooc.com/learn/378" target="_blank" rel="external">http://www.imooc.com/learn/378</a></p>
<p><a href="http://man.linuxde.net/printf" target="_blank" rel="external">http://man.linuxde.net/printf</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u6B63_u5219_u8868_u8FBE_u5F0F_u4E0E_u901A_u914D_u7B26"><a href="#u6B63_u5219_u8868_u8FBE_u5F0F_u4E0E_u901A_u914D_u7B26" class="headerlink" title="正则表达式与通配符"></a>正则表达式与通配符</h3><p>Linux中的正则表达式和通配符有些区别，正则表达式用来在文件中匹配符合条件的<code>字符串</code>，正则是<code>包含匹配</code>。grep，awk，sed等命令可以支持正则表达式。通配符用来匹配符合条件的<code>文件名</code>，通配符是<code>完全匹配</code>。ls，find，cp这些命令不支持正则所有只能用shell自己的通配符进行匹配。</p>]]>
    
    </summary>
    
      <category term="linux" scheme="http://suqun.github.io/tags/linux/"/>
    
      <category term="shell" scheme="http://suqun.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[shell编程之运算符]]></title>
    <link href="http://suqun.github.io/2016/01/09/shell%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://suqun.github.io/2016/01/09/shell编程之运算符/</id>
    <published>2016-01-09T04:14:05.000Z</published>
    <updated>2016-01-09T12:10:57.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u58F0_u660E_u53D8_u91CF_u7C7B_u578Bdeclare"><a href="#u58F0_u660E_u53D8_u91CF_u7C7B_u578Bdeclare" class="headerlink" title="声明变量类型declare"></a>声明变量类型declare</h3><p>declare语法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">declare</span> [-afiprx] 变量名</span><br><span class="line">参数说明： </span><br><span class="line">-   ：设置属性</span><br><span class="line">+   ：取消属性</span><br><span class="line"><span class="operator">-a</span>  ：定义为数组 array </span><br><span class="line"><span class="operator">-f</span>  ：定义为函数 <span class="keyword">function</span>  </span><br><span class="line">-i  ：定义为整数 <span class="built_in">integer</span> </span><br><span class="line">-p  ：显示变量被声明的类型</span><br><span class="line">-r  ：定义为『只读』 </span><br><span class="line">-x  ：定义为环境变量 </span><br><span class="line"></span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">declare</span> -i a=<span class="number">47</span></span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">declare</span> -i b=<span class="number">53</span></span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">declare</span> -i c=<span class="variable">$a</span>+<span class="variable">$b</span></span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">echo</span> <span class="variable">$c</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">declare</span> -p c</span><br><span class="line"><span class="built_in">declare</span> -i c=<span class="string">"100"</span></span><br><span class="line"></span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">declare</span> <span class="operator">-a</span> arr[<span class="number">0</span>]=<span class="number">11</span>  &lt;==定义数组</span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">declare</span> -p arr</span><br><span class="line"><span class="built_in">declare</span> <span class="operator">-a</span> arr=<span class="string">'([0]="11")'</span></span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">declare</span> <span class="operator">-a</span> arr[<span class="number">1</span>]=<span class="number">22</span></span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">declare</span> -p arr</span><br><span class="line"><span class="built_in">declare</span> <span class="operator">-a</span> arr=<span class="string">'([0]="11" [1]="22")'</span></span><br><span class="line">bash-<span class="number">3.2</span>$</span><br><span class="line"></span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">echo</span> <span class="variable">$&#123;arr&#125;</span>       &lt;==查看数组方法</span><br><span class="line"><span class="number">11</span></span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">echo</span> <span class="variable">$&#123;arr[1]&#125;</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">echo</span> <span class="variable">$&#123;arr[*]&#125;</span></span><br><span class="line"><span class="number">11</span> <span class="number">22</span></span><br><span class="line">bash-<span class="number">3.2</span>$</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="u6570_u503C_u8FD0_u7B97"><a href="#u6570_u503C_u8FD0_u7B97" class="headerlink" title="数值运算"></a>数值运算</h3><p>数值运算可以通过<code>declare -i c=$a+$b</code>进行，也可以用<code>expr</code>/<code>$((运算式))</code>/<code>$[运算式]</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bash-<span class="number">3.2</span>$ dd=$((<span class="variable">$a</span>+<span class="variable">$b</span>))</span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">echo</span> <span class="variable">$dd</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line">bash-<span class="number">3.2</span>$ ee=$(expr <span class="variable">$a</span> + <span class="variable">$b</span>)    &lt;==『+』两边必须有空格</span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">echo</span> <span class="variable">$ee</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line">bash-<span class="number">3.2</span>$ ff=$((<span class="variable">$a</span>+<span class="variable">$b</span>))</span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">echo</span> <span class="variable">$ff</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line">bash-<span class="number">3.2</span>$ gg=$[<span class="variable">$a</span>+<span class="variable">$b</span>]</span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">echo</span> <span class="variable">$gg</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure>
<p>shell支持的运算符有</p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/shell-ysf.png" alt="shell运算符"></p>
<h3 id="u53D8_u91CF_u6D4B_u8BD5"><a href="#u53D8_u91CF_u6D4B_u8BD5" class="headerlink" title="变量测试"></a>变量测试</h3><p>下面的运算符我的理解类似于java的<code>？：</code>三目运算符，比如第一行的<code>x=${y-新值}</code>，意思是，如果y没有设置则x=新值，如果y为空值则x=空，如果y有值则x=$y。其他的类推</p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/shell-test-ysf.png" alt="shell变量测试运算符"></p>
<p>shell编程视频地址：<a href="http://www.imooc.com/learn/355" target="_blank" rel="external">http://www.imooc.com/learn/355</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u58F0_u660E_u53D8_u91CF_u7C7B_u578Bdeclare"><a href="#u58F0_u660E_u53D8_u91CF_u7C7B_u578Bdeclare" class="headerlink" title="声明变量类型declare"></a>声明变量类型declare</h3><p>declare语法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">declare</span> [-afiprx] 变量名</span><br><span class="line">参数说明： </span><br><span class="line">-   ：设置属性</span><br><span class="line">+   ：取消属性</span><br><span class="line"><span class="operator">-a</span>  ：定义为数组 array </span><br><span class="line"><span class="operator">-f</span>  ：定义为函数 <span class="keyword">function</span>  </span><br><span class="line">-i  ：定义为整数 <span class="built_in">integer</span> </span><br><span class="line">-p  ：显示变量被声明的类型</span><br><span class="line">-r  ：定义为『只读』 </span><br><span class="line">-x  ：定义为环境变量 </span><br><span class="line"></span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">declare</span> -i a=<span class="number">47</span></span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">declare</span> -i b=<span class="number">53</span></span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">declare</span> -i c=<span class="variable">$a</span>+<span class="variable">$b</span></span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">echo</span> <span class="variable">$c</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">declare</span> -p c</span><br><span class="line"><span class="built_in">declare</span> -i c=<span class="string">"100"</span></span><br><span class="line"></span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">declare</span> <span class="operator">-a</span> arr[<span class="number">0</span>]=<span class="number">11</span>  &lt;==定义数组</span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">declare</span> -p arr</span><br><span class="line"><span class="built_in">declare</span> <span class="operator">-a</span> arr=<span class="string">'([0]="11")'</span></span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">declare</span> <span class="operator">-a</span> arr[<span class="number">1</span>]=<span class="number">22</span></span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">declare</span> -p arr</span><br><span class="line"><span class="built_in">declare</span> <span class="operator">-a</span> arr=<span class="string">'([0]="11" [1]="22")'</span></span><br><span class="line">bash-<span class="number">3.2</span>$</span><br><span class="line"></span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">echo</span> <span class="variable">$&#123;arr&#125;</span>       &lt;==查看数组方法</span><br><span class="line"><span class="number">11</span></span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">echo</span> <span class="variable">$&#123;arr[1]&#125;</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line">bash-<span class="number">3.2</span>$ <span class="built_in">echo</span> <span class="variable">$&#123;arr[*]&#125;</span></span><br><span class="line"><span class="number">11</span> <span class="number">22</span></span><br><span class="line">bash-<span class="number">3.2</span>$</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="linux" scheme="http://suqun.github.io/tags/linux/"/>
    
      <category term="shell" scheme="http://suqun.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Shell编程之变量]]></title>
    <link href="http://suqun.github.io/2016/01/04/Shell%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%8F%98%E9%87%8F/"/>
    <id>http://suqun.github.io/2016/01/04/Shell编程之变量/</id>
    <published>2016-01-04T14:34:27.000Z</published>
    <updated>2016-01-09T12:08:58.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u53D8_u91CF"><a href="#u53D8_u91CF" class="headerlink" title="变量"></a>变量</h3><p>变量的配置守则</p>
<ol>
<li><code>变量与变量内容以一个等号『=』来连结</code>，如下所示：<br> 『myname=VBird』</li>
<li><code>等号两边不能直接接空格符</code>，如下所示为错误：<br> 『myname = VBird』或『myname=VBird Tsai』</li>
<li>变量名称只能是英文字母与数字，但是<code>开头字符不能是数字</code>，如下为错误：<br> 『2myname=VBird』</li>
<li>变量内容若有空格符可使用双引号『\”』或单引号『\’』将变量内容结合起来，但<ul>
<li><code>双引号内的特殊字符如 $ 等，可以保有原本的特性</code>，如下所示：<br>  『var=”lang is $LANG”』则『echo $var』可得『lang is en_US』</li>
<li><code>单引号内的特殊字符则仅为一般字符 (纯文本)</code>，如下所示：<br>  『var=’lang is $LANG’』则『echo $var』可得『lang is $LANG』</li>
</ul>
</li>
<li>可用<code>转义字符『 \ 』</code>将特殊符号(如 [Enter], $, \, 空格符, `等)变成一般字符；</li>
<li>在一串命令中，还需要藉由其他的命令提供的信息，可以<code>使用反单引号『</code>命令<code>』或 『$(命令)』</code>。特别注意，那个 ` 是键盘上方的数字键 1 左边那个按键，而不是单引号！ 例如想要取得核心版本的配置：<br> 『version=$(uname -r)』再『echo $version』可得『2.6.18-128.el5』</li>
<li>若该变量为扩增变量内容时，则可用 “$变量名称” 或 ${变量} 累加内容，如下所示：<br> 『PATH=”$PATH”:/home/bin』</li>
<li>若该变量需要在其他子程序运行，则<code>需要以 export 来使变量变成环境变量</code>：<br> 『export PATH』</li>
<li>通常大写字符为系统默认变量，自行配置变量可以使用小写字符，方便判断 (纯粹依照使用者兴趣与嗜好) ；</li>
<li><code>取消变量的方法为使用 unset</code> ：『unset 变量名称』例如取消 myname 的配置：<br>『unset myname』</li>
<li><code>在Bash中，变量的默认类型是字符串型</code></li>
</ol>
<a id="more"></a>
<h3 id="u53D8_u91CF_u5206_u7C7B"><a href="#u53D8_u91CF_u5206_u7C7B" class="headerlink" title="变量分类"></a>变量分类</h3><ol>
<li>用户自定义变量</li>
<li>环境变量：保存和系统操作环境相关的数据。变量可以自定义，但是对系统生效的环境变量名和变量作用是固定的。</li>
<li>位置参数变量：主要用来向脚本当中传递参数或数据，变量名不能自定义，变量的作用是固定的</li>
<li>预定义变量：Bash中已经定义好的变量，变量名不能自定义，变量的作用是固定的</li>
</ol>
<h3 id="u7528_u6237_u81EA_u5B9A_u4E49_u53D8_u91CF"><a href="#u7528_u6237_u81EA_u5B9A_u4E49_u53D8_u91CF" class="headerlink" title="用户自定义变量"></a>用户自定义变量</h3><h4 id="u53D8_u91CF_u8D4B_u503C_uFF1A_u53D8_u91CF_u540D_3D_u53D8_u91CF_u503C"><a href="#u53D8_u91CF_u8D4B_u503C_uFF1A_u53D8_u91CF_u540D_3D_u53D8_u91CF_u503C" class="headerlink" title="变量赋值：变量名=变量值"></a>变量赋值：<strong>变量名=变量值</strong></h4><pre><code>➜  ~ x=5                &lt;== 正确
➜  ~ y= &quot;happy&quot;         &lt;== 「=」两边不能存在空格，否则报错
zsh: command not found: happy
➜  ~  name=&quot;larry s&quot;    &lt;== 变量内容中有空格用双引号括起来
</code></pre><h4 id="u53D8_u91CF_u8C03_u7528_uFF1A__24_u53D8_u91CF_u540D"><a href="#u53D8_u91CF_u8C03_u7528_uFF1A__24_u53D8_u91CF_u540D" class="headerlink" title="变量调用： $变量名"></a>变量调用： <strong>$变量名</strong></h4><pre><code>➜  ~  echo $x
5                       &lt;== 5为字符串
➜  ~  echo $y
6
➜  ~  z=$x+$y
➜  ~  echo $z
5+6                     &lt;== 不能直接进行整型计算
➜  ~  echo $name
larry s
</code></pre><h4 id="u53D8_u91CF_u53E0_u52A0_uFF1A_u201C_24_u53D8_u91CF_u540D_u201D_u53E0_u52A0_u5185_u5BB9/_24_7B_u53D8_u91CF_u540D_7D_u53E0_u52A0_u5185_u5BB9"><a href="#u53D8_u91CF_u53E0_u52A0_uFF1A_u201C_24_u53D8_u91CF_u540D_u201D_u53E0_u52A0_u5185_u5BB9/_24_7B_u53D8_u91CF_u540D_7D_u53E0_u52A0_u5185_u5BB9" class="headerlink" title="变量叠加：“$变量名”叠加内容/${变量名}叠加内容"></a>变量叠加：<strong>“$变量名”叠加内容/${变量名}叠加内容</strong></h4><pre><code>➜  ~  x=123             &lt;== 覆盖原值5
➜  ~  echo $x
123
➜  ~  x=&quot;$x&quot;456         &lt;== 变量叠加方式一
➜  ~  echo $x
123456
➜  ~  x=${x}789         &lt;== 变量叠加方式二，推荐
➜  ~  echo $x
123456789
</code></pre><h4 id="u53D8_u91CF_u67E5_u770B_uFF1Aset"><a href="#u53D8_u91CF_u67E5_u770B_uFF1Aset" class="headerlink" title="变量查看：set"></a>变量查看：<strong>set</strong></h4><p>查询系统中所有变量</p>
<pre><code>➜  ~  set
&apos;!&apos;=0
&apos;#&apos;=0
&apos;$&apos;=11921
&apos;*&apos;=()
-=3569JNRTXZghiklms
0=-zsh
&apos;?&apos;=0
@=()
ARGC=0
.
.
.
x=123456789
y=6
z=5+6
zsh_eval_context=(toplevel)
zsh_scheduled_events
</code></pre><p><strong>set -u</strong></p>
<pre><code>➜  ~  echo $larry
                                &lt;== larry变量可能不存在或者值为空,输出空
➜  ~  set -u
➜  ~  echo $larry
zsh: larry: parameter not set   &lt;== 设置『set -u』后会明确报错
</code></pre><h4 id="u5220_u9664_u53D8_u91CF_uFF1Aunset__u53D8_u91CF_u540D"><a href="#u5220_u9664_u53D8_u91CF_uFF1Aunset__u53D8_u91CF_u540D" class="headerlink" title="删除变量：unset 变量名"></a>删除变量：unset 变量名</h4><pre><code>➜  ~  unset x
➜  ~  unset y
➜  ~  echo $x
zsh: x: parameter not set
➜  ~  echo $y
zsh: y: parameter not set
</code></pre><h3 id="u73AF_u5883_u53D8_u91CF"><a href="#u73AF_u5883_u53D8_u91CF" class="headerlink" title="环境变量"></a>环境变量</h3><h4 id="u53D8_u91CF_u8D4B_u503C"><a href="#u53D8_u91CF_u8D4B_u503C" class="headerlink" title="变量赋值"></a>变量赋值</h4><pre><code>export 变量名=变量值
</code></pre><p>或者 </p>
<pre><code>变量名=变量值

export 变量名
</code></pre><h4 id="u53D8_u91CF_u67E5_u770B"><a href="#u53D8_u91CF_u67E5_u770B" class="headerlink" title="变量查看"></a>变量查看</h4><pre><code>set 查看所有变量
env 查看环境变量 
</code></pre><h4 id="u5220_u9664_u53D8_u91CF"><a href="#u5220_u9664_u53D8_u91CF" class="headerlink" title="删除变量"></a>删除变量</h4><pre><code>unset 变量名
</code></pre><h3 id="u4F4D_u7F6E_u53D8_u91CF_u53C2_u6570"><a href="#u4F4D_u7F6E_u53D8_u91CF_u53C2_u6570" class="headerlink" title="位置变量参数"></a>位置变量参数</h3><p><strong>$n</strong>: n为数字，$0代表命令本身，$1-$9代表第一到第九个参数，10以上的参数用大括号，如${10}</p>
<pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="comment">#位置变量参数$n演示</span></span><br><span class="line">num1=<span class="variable">$1</span></span><br><span class="line">num2=<span class="variable">$2</span></span><br><span class="line">sum=$(( <span class="variable">$num1</span> + <span class="variable">$num2</span> ))    <span class="comment">#『 $((计算式)) 』来进行数值运算两个小括号内可以加上空白字节</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure>

//运行输出
➜  shellnotes  ./sh1.sh 6 9 &lt;==$1为6，$2为9
15                          &lt;==6+9=15
</code></pre><p><strong>$*</strong>: 代表命令行中所有的参数，$*把所有的命令看成一个整体</p>
<p><strong>$@</strong>: 也代表命令行中所有的参数，不过$@把每个参数区分对待</p>
<p><strong>$#</strong>: 代表命令行中所有参数的个数</p>
<pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="comment">#$*,$@,$#演示</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"The parameter is : $*"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"The parameters are : <span class="variable">$@</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Parameters size is : <span class="variable">$#</span>"</span></span><br></pre></td></tr></table></figure>

//运行输出
➜  shellnotes  ./sh2.sh 11 22 33 44 55  &lt;== 输入4个参数
The parameter is : 11 22 33 44 55   &lt;==$*把输入的参数看做一个整体
The parameters are : 11 22 33 44 55 &lt;==$@把输入的参数每个都区别对待
Parameters size is : 5
</code></pre><p>用循环看下$*和$@的区别</p>
<pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="comment">#for区分$*和$@</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"$*"</span>           </span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"\$*:<span class="variable">$i</span>"</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span>           </span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"\$@:<span class="variable">$j</span>"</span></span><br><span class="line">    <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

//运行输出
➜  shellnotes  ./for.sh 11 22 33 44
$*:11 22 33 44                      &lt;== 循环1次
$@:11                               &lt;== 参数有几个循环几次
$@:22
$@:33
$@:44
</code></pre><h3 id="u9884_u5B9A_u4E49_u53D8_u91CF"><a href="#u9884_u5B9A_u4E49_u53D8_u91CF" class="headerlink" title="预定义变量"></a>预定义变量</h3><p><strong>$?</strong>:最后一次执行命令的返回状态。如果这个变量的值为0，证明上一个命令执行正确；如果这个值非0，则证明上一个命令执行不正确。</p>
<pre><code>[root@www ~]# echo $SHELL
/bin/bash                                  &lt;==可顺利显示！没有错误！
[root@www ~]# echo $?
0                                          &lt;==因为没问题，所以回传值为 0
[root@www ~]# 12name=VBird
-bash: 12name=VBird: command not found     &lt;==发生错误了！bash回报有问题
[root@www ~]# echo $?
127                                        &lt;==因为有问题，回传错误代码(非为0)
# 错误代码回传值依据软件而有不同，我们可以利用这个代码来搜寻错误的原因喔！
[root@www ~]# echo $?
0
# 咦！怎么又变成正确了？这是因为 &quot;?&quot; 只与『上一个运行命令』有关，
# 所以，我们上一个命令是运行『 echo $? 』，当然没有错误，所以是 0 没错！
</code></pre><p><strong>$$</strong>:当前进程的进程ID(PID)</p>
<pre><code>➜  ~  echo $$
14759
</code></pre><p><strong>$!</strong>:后台运行的最后一个进程的进程号(PID)</p>
<pre><code>➜  ~  echo $!
0
</code></pre><p>变量详细请看鸟哥的博客<a href="http://linux.vbird.org/linux_basic/0320bash.php#variable" target="_blank" rel="external">认识学习变量</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u53D8_u91CF"><a href="#u53D8_u91CF" class="headerlink" title="变量"></a>变量</h3><p>变量的配置守则</p>
<ol>
<li><code>变量与变量内容以一个等号『=』来连结</code>，如下所示：<br> 『myname=VBird』</li>
<li><code>等号两边不能直接接空格符</code>，如下所示为错误：<br> 『myname = VBird』或『myname=VBird Tsai』</li>
<li>变量名称只能是英文字母与数字，但是<code>开头字符不能是数字</code>，如下为错误：<br> 『2myname=VBird』</li>
<li>变量内容若有空格符可使用双引号『\”』或单引号『\’』将变量内容结合起来，但<ul>
<li><code>双引号内的特殊字符如 $ 等，可以保有原本的特性</code>，如下所示：<br>  『var=”lang is $LANG”』则『echo $var』可得『lang is en_US』</li>
<li><code>单引号内的特殊字符则仅为一般字符 (纯文本)</code>，如下所示：<br>  『var=’lang is $LANG’』则『echo $var』可得『lang is $LANG』</li>
</ul>
</li>
<li>可用<code>转义字符『 \ 』</code>将特殊符号(如 [Enter], $, \, 空格符, `等)变成一般字符；</li>
<li>在一串命令中，还需要藉由其他的命令提供的信息，可以<code>使用反单引号『</code>命令<code>』或 『$(命令)』</code>。特别注意，那个 ` 是键盘上方的数字键 1 左边那个按键，而不是单引号！ 例如想要取得核心版本的配置：<br> 『version=$(uname -r)』再『echo $version』可得『2.6.18-128.el5』</li>
<li>若该变量为扩增变量内容时，则可用 “$变量名称” 或 ${变量} 累加内容，如下所示：<br> 『PATH=”$PATH”:/home/bin』</li>
<li>若该变量需要在其他子程序运行，则<code>需要以 export 来使变量变成环境变量</code>：<br> 『export PATH』</li>
<li>通常大写字符为系统默认变量，自行配置变量可以使用小写字符，方便判断 (纯粹依照使用者兴趣与嗜好) ；</li>
<li><code>取消变量的方法为使用 unset</code> ：『unset 变量名称』例如取消 myname 的配置：<br>『unset myname』</li>
<li><code>在Bash中，变量的默认类型是字符串型</code></li>
</ol>]]>
    
    </summary>
    
      <category term="linux" scheme="http://suqun.github.io/tags/linux/"/>
    
      <category term="shell" scheme="http://suqun.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Shell基础]]></title>
    <link href="http://suqun.github.io/2016/01/02/Shell%E5%9F%BA%E7%A1%80/"/>
    <id>http://suqun.github.io/2016/01/02/Shell基础/</id>
    <published>2016-01-02T12:40:52.000Z</published>
    <updated>2016-01-09T12:13:30.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Shell__u6982_u8FF0"><a href="#Shell__u6982_u8FF0" class="headerlink" title="Shell 概述"></a>Shell 概述</h2><p><a href="http://www.imooc.com/learn/175" target="_blank" rel="external">imooc shell课程</a></p>
<p>Shell是一个命令行解释器，它为用户提供了一个向Linux内核发送请求以便运行程序的界面系统级程序，用可以用Shell来启动，挂起，停止甚至是编写一些程序。</p>
<p>Shell还是一个功能强大的编程语言，易编写易调试，灵活性较强。Shell是解释执行的脚本语言，在Shell中可以直接调用Linux系统命令。</p>
<a id="more"></a>
<p>echo $SHELL 查看当前计算机的shell版本，我用的是Mac的系统，所以查询出来的是zsh版本，Linux系统多是Bash版本</p>
<pre><code>➜  ~  echo $SHELL
/bin/zsh
</code></pre><p>在 /etc/shells文件中查看系统支持的shell版本</p>
<pre><code>➜  /etc  vim /etc/shells

# List of acceptable shells for chpass(1).
# Ftpd will not allow users to connect who are not using
# one of these shells.

/bin/bash
/bin/csh
/bin/ksh
/bin/sh
/bin/tcsh
/bin/zsh
</code></pre><p>可以使用shells文件中的兼容版本切换当前系统的shell版本</p>
<pre><code>➜  /etc  bash
bash-3.2$ exit
exit
➜  /etc
</code></pre><h2 id="u811A_u672C_u6267_u884C_u65B9_u5F0F"><a href="#u811A_u672C_u6267_u884C_u65B9_u5F0F" class="headerlink" title="脚本执行方式"></a>脚本执行方式</h2><h3 id="echo__u8F93_u51FA_u547D_u4EE4"><a href="#echo__u8F93_u51FA_u547D_u4EE4" class="headerlink" title="echo 输出命令"></a>echo 输出命令</h3><pre><code>echo [-e] [输出内容]
</code></pre><p>-e 若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出</p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/shell-echo-e.png" alt="echo -e"></p>
<h3 id="u7B2C_u4E00_u4E2A_u811A_u672C"><a href="#u7B2C_u4E00_u4E2A_u811A_u672C" class="headerlink" title="第一个脚本"></a>第一个脚本</h3><pre><code>bash-3.2$ vim hello.sh

    #!/bin/bash
    #The first program

    echo &quot;Happy New Year&quot;

bash-3.2$ sh hello.sh
Happy New Year
bash-3.2$
</code></pre><ul>
<li>sh hello.sh 执行脚本</li>
<li>chmod 755 hello.sh 然后直接 hello.sh执行脚本</li>
</ul>
<h2 id="Bash_u7684_u57FA_u672C_u529F_u80FD"><a href="#Bash_u7684_u57FA_u672C_u529F_u80FD" class="headerlink" title="Bash的基本功能"></a>Bash的基本功能</h2><h3 id="u547D_u4EE4_u522B_u540D"><a href="#u547D_u4EE4_u522B_u540D" class="headerlink" title="命令别名"></a>命令别名</h3><p><strong>alias 查看系统中所有的命令别名</strong></p>
<pre><code>➜  shellnotes  alias

history=&apos;fc -l 1&apos;
l=&apos;ls -lah&apos;
la=&apos;ls -lAh&apos;
ls=&apos;ls -G&apos;
lsa=&apos;ls -lah&apos;
md=&apos;mkdir -p&apos;
...
</code></pre><p><strong>alias 别名=’原命令’ 设置别名命令</strong></p>
<pre><code>alias ll = &apos;ls -lh&apos;
</code></pre><p><strong>unalias 取消别名</strong></p>
<pre><code>unalias ll
</code></pre><h3 id="u5E38_u7528_u5FEB_u6377_u952E"><a href="#u5E38_u7528_u5FEB_u6377_u952E" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><p>删除</p>
<pre><code>ctrl + d      删除光标所在位置上的字符相当于VIM里x或者dl
ctrl + h      删除光标所在位置前的字符相当于VIM里hx或者dh
ctrl + k      删除光标后面所有字符相当于VIM里d shift+$
ctrl + u      删除光标前面所有字符相当于VIM里d shift+^
ctrl + w      删除光标前一个单词相当于VIM里db
ctrl + y      恢复ctrl+u上次执行时删除的字符
ctrl + ?      撤消前一次输入
alt  + r      撤消前一次动作
alt  + d     删除光标所在位置的后单词
</code></pre><p>移动</p>
<pre><code>ctrl + a      将光标移动到命令行开头相当于VIM里shift+^
ctrl + e      将光标移动到命令行结尾处相当于VIM里shift+$
ctrl + f      光标向后移动一个字符相当于VIM里l
ctrl + b      光标向前移动一个字符相当于VIM里h
ctrl + 方向键左键    光标移动到前一个单词开头
ctrl + 方向键右键    光标移动到后一个单词结尾
ctrl + x       在上次光标所在字符和当前光标所在字符之间跳转
alt  + f      跳到光标所在位置单词尾部
</code></pre><p>替换</p>
<pre><code>ctrl + t       将光标当前字符与前面一个字符替换
alt  + t     交换两个光标当前所处位置单词和光标前一个单词
alt  + u     把光标当前位置单词变为大写
alt  + l      把光标当前位置单词变为小写
alt  + c      把光标当前位置单词头一个字母变为大写
^oldstr^newstr    替换前一次命令中字符串   
</code></pre><p>历史命令编辑</p>
<pre><code>ctrl + p   返回上一次输入命令字符
ctrl + r       输入单词搜索历史命令
alt  + p     输入字符查找与字符相接近的历史命令
alt  + &gt;     返回上一次执行命令
</code></pre><p>其它</p>
<pre><code>ctrl + s      锁住终端
ctrl + q      解锁终端
ctrl + l        清屏相当于命令clear
ctrl + c       另起一行
ctrl + i       类似TAB健补全功能
ctrl + o      重复执行命令
alt  + 数字键  操作的次数
</code></pre><p><a href="http://rainbird.blog.51cto.com/211214/66031/" target="_blank" rel="external">命令快捷键参考地址</a></p>
<h3 id="u5386_u53F2_u547D_u4EE4"><a href="#u5386_u53F2_u547D_u4EE4" class="headerlink" title="历史命令"></a>历史命令</h3><h4 id="history"><a href="#history" class="headerlink" title="history"></a>history</h4><p>在预设的情况下，会将历史纪录写入~/.bash_history,默认保存1000条，可以在环境变量配置文件/etc/profile中修改HISTSIZE的值</p>
<pre><code>[dmtsai@study ~]$ history [n] 
[dmtsai@study ~]$ history [-c] 
[dmtsai@study ~]$ history [-raw] histfiles 
选项与参数：
n ：数字，意思是『要列出最近的n笔命令列表』的意思！
-c ：将目前的shell中的所有history内容全部消除
-a ：将目前新增的history指令新增入histfiles中，若没有加histfiles ，
      则预设写入~/.bash_history 
-r ：将histfiles的内容读到目前这个shell的history记忆中；
-w ：将目前的history记忆内容写入histfiles中！

范例一：列出目前记忆体内的所有history记忆 
[dmtsai@study ~]$ history 
#前面省略 
 1017 man bash 
 1018 ll 
 1019 history 
 1020 history #列出的资讯当中，共分两栏，第一栏为该指令在这个shell当中的代码，
#另一个则是指令本身的内容喔！至于会秀出几笔指令记录，则与HISTSIZE有关！

范例二：列出目前最近的3笔资料 
[dmtsai@study ~]$ history 3 
 1019 history 
 1020 history 
 1021 history 3 

范例三：立刻将目前的资料写入histfile当中 
[dmtsai@study ~]$ history -w #在预设的情况下，会将历史纪录写入~/.bash_history当中！
[dmtsai@study ~]$ echo ${HISTSIZE} 
1000 
</code></pre><p><a href="http://linux.vbird.org/linux_basic/0320bash.php#alias_history" target="_blank" rel="external">history参考鸟哥资料</a></p>
<h4 id="u5386_u53F2_u547D_u4EE4_u7684_u8C03_u7528"><a href="#u5386_u53F2_u547D_u4EE4_u7684_u8C03_u7528" class="headerlink" title="历史命令的调用"></a>历史命令的调用</h4><ol>
<li>使用『上下箭头』调用以前的历史命令</li>
<li>使用『!n』重复执行第N条命令</li>
<li>使用『!!』重复执行上一条命令</li>
<li>使用『!字符串』重复执行最后一条以该字符串开头的命令</li>
</ol>
<h3 id="u8D44_u6599_u6D41_u91CD_u5BFC_u5411"><a href="#u8D44_u6599_u6D41_u91CD_u5BFC_u5411" class="headerlink" title="资料流重导向"></a>资料流重导向</h3><p>资料流重导向就是将某个指令执行后应该要出现在萤幕上的资料， 给他传输到其他的地方</p>
<h4 id="standard_output__u4E0Estandard_error_output"><a href="#standard_output__u4E0Estandard_error_output" class="headerlink" title="standard output 与standard error output"></a>standard output 与standard error output</h4><p>标准输出指的是『指令执行所回传的正确的信息』，而标准错误输出可理解为『指令执行失败后，所回传的错误信息』。举个例子：当前目录下存在Client.java而不存在Server.java，若执行命令”cat Client.java Server.java” , cat 会进行：</p>
<ul>
<li>标准输出：读取Client.java，将文档内容显示在屏幕上</li>
<li><p>标准错误输出：因为无法找到Server.java，因此屏幕上显示错误信息</p>
<p>  ➜  Documents  cat Client.java Server.java<br>  public class Client {</p>
<p>  }<br>  cat: Server.java: No such file or directory<br>  ➜  Documents</p>
</li>
</ul>
<p>资料流重导向可以将standard output (简称stdout) 与standard error output (简称stderr) 分别传送到其他的档案或装置去，而分别传送所用的特殊字元则如下所示：</p>
<ol>
<li>标准输入(stdin) ：代码为0 ，使用&lt; 或&lt;&lt; ；</li>
<li>标准输出(stdout)：代码为1 ，使用&gt; 或&gt;&gt; ；</li>
<li><p>标准错误输出(stderr)：代码为2 ，使用2&gt; 或2&gt;&gt; ；</p>
<p> 范例一：观察目录(~)下各目录的档名、权限与属性，并记录下来<br> ➜  ~  ll     &lt;==此时萤幕会显示出档名<br> total 8<br> drwx——   6 larry  staff   204B 11 24 23:18 Applications<br> drwx——+ 25 larry  staff   850B  1  2 21:45 Desktop<br> drwx——+ 22 larry  staff   748B  1  3 19:27 Documents<br> drwx——+ 23 larry  staff   782B  1  3 18:33 Downloads<br> drwxr-xr-x   4 larry  staff   136B  1  2 21:52 IdeaProjects<br> drwx——@ 54 larry  staff   1.8K 12  6 09:45 Library<br> drwx——+  3 larry  staff   102B 11 11 12:17 Movies<br> drwx——+  4 larry  staff   136B 12  6 09:45 Music<br> drwx——+  5 larry  staff   170B 12 13 22:02 Pictures<br> drwxr-xr-x+  5 larry  staff   170B 11 11 12:17 Public<br> -rw-r–r–   1 larry  staff    53B 11 30 23:02 dump.rdb<br> ➜  ~  ll &gt; rootfile  &lt;==萤幕并无任何信息<br> ➜  ~  ll rootfile    &lt;==有个新档被建立了<br> -rw-r–r–  1 larry  staff   681B  1  3 19:33 rootfile</p>
</li>
</ol>
<p>该档案(本例中是rootfile) 若不存在，系统会自动的将他建立起来。当这个档案存在的时候，那么系统就会先将这个档案内容清空，然后再将资料写入。也就是若以&gt; 输出到一个已存在的档案中，那个档案就会被覆盖掉。如果不想覆盖,使用『ll &gt;&gt; rootfile』在文件rootfile下方累加</p>
<ul>
<li>1&gt; ：以覆盖的方法将『正确的资料』输出到指定的档案或装置上；</li>
<li>1&gt;&gt;：以累加的方法将『正确的资料』输出到指定的档案或装置上；</li>
<li>2&gt; ：以覆盖的方法将『错误的资料』输出到指定的档案或装置上；</li>
<li><p>2&gt;&gt;：以累加的方法将『错误的资料』输出到指定的档案或装置上；</p>
<p>  范例三：承范例二，将stdout与stderr分存到不同的档案去<br>  [dmtsai@study ~]$ find /home -name .bashrc &gt; list_right 2&gt; list_error</p>
<p>  范例四：承范例三，将错误的资料丢弃，萤幕上显示正确的资料<br>  [dmtsai@study ~]$ find /home -name .bashrc 2&gt; /dev/null<br>  /home/dmtsai/.bashrc   &lt;==只有stdout会显示到萤幕上， stderr被丢弃了</p>
<p>  范例五：将指令的资料全部写入名为list的档案中<br>  [dmtsai@study ~]$ find /home -name .bashrc &gt; list 2&gt; list   &lt;==错误<br>  [dmtsai@study ~]$ find /home - name .bashrc &gt; list 2&gt;&amp;1      &lt;==正确<br>  [dmtsai@study ~]$ find /home -name .bashrc &amp;&gt; list          &lt;==正确</p>
</li>
</ul>
<p>写入同一个档案的特殊语法如上表所示，你可以使用2&gt;&amp;1也可以使用&amp;&gt; </p>
<h4 id="standard_input__uFF1A__26lt_3B__u4E0E_26lt_3B_26lt_3B"><a href="#standard_input__uFF1A__26lt_3B__u4E0E_26lt_3B_26lt_3B" class="headerlink" title="standard input ： &lt; 与&lt;&lt;"></a>standard input ： &lt; 与&lt;&lt;</h4><p>将原本需要由键盘输入的资料，改由档案内容来取代</p>
<pre><code>范例一：利用cat指令来建立一个档案的简单流程 
[dmtsai@study ~]$ cat &gt; catfile 
testing 
cat file test 
&lt;==这里按下[ctrl]+d来离开

[dmtsai@study ~]$ cat catfile 
testing 
cat file test
</code></pre><p>由于加入&gt;在cat后，所以那个catfile会被主动的建立，而内容就是刚刚键盘上面输入的那两行资料。<br>下面用纯文字档取代键盘的输入，也就是说，用某个档案的内容来取代键盘的敲击</p>
<pre><code>范例二：用stdin取代键盘的输入以建立新档案的简单流程 
[dmtsai@study ~]$ cat &gt; catfile &lt; ~/.bashrc 
[dmtsai@study ~]$ ll catfile ~/.bashrc 
-rw-r-- r--. 1 dmtsai dmtsai 231 Mar 6 06:06 /home/dmtsai/.bashrc 
-rw-rw-r--. 1 dmtsai dmtsai 231 Jul 9 18:58 catfile
 #注意看，这两个档案的大小会一模一样！几乎像是使用cp来复制一般！
</code></pre><p>『&lt;&lt;』 这个连续两个小于的符号代表的是『结束的输入字元』的意思。举例来讲：『我要用cat 直接将输入的讯息输出到catfile 中， 且当由键盘输入eof 时，该次输入就结束』，那我可以这样做：</p>
<pre><code>[dmtsai@study ~]$ cat &gt; catfile &lt;&lt; &quot;eof&quot; 
This is a test. 
OK now stop 
eof   &lt;==输入这关键字，立刻就结束而不需要输入[ctrl]+d

[dmtsai@ study ~]$ cat catfile 
This is a test. 
OK now stop      &lt;==只有这两行，不会存在关键字那一行！
</code></pre><p>利用&lt;&lt; 右侧的控制字元，我们可以终止一次输入， 而不必输入[crtl]+d 来结束.</p>
<h3 id="u547D_u4EE4_u6267_u884C_u7684_u5224_u65AD_u4F9D_u636E__3B__26amp_3B_26amp_3B__7C_7C"><a href="#u547D_u4EE4_u6267_u884C_u7684_u5224_u65AD_u4F9D_u636E__3B__26amp_3B_26amp_3B__7C_7C" class="headerlink" title="命令执行的判断依据 ; &amp;&amp; ||"></a>命令执行的判断依据 ; &amp;&amp; ||</h3><p>在某些情况下，很多指令我想要一次输入去执行，而不想要分次执行时，该如何是好？基本上你有两个选择，一个是透过shell script 撰写脚本去执行，一种则是透过底下的介绍来一次输入多重指令。</p>
<h4 id="cmd__3B_cmd__28_u4E0D_u8003_u8651_u6307_u4EE4_u76F8_u5173_u6027_u7684_u8FDE_u7EED_u6307_u4EE4_u4E0B_u8FBE_29"><a href="#cmd__3B_cmd__28_u4E0D_u8003_u8651_u6307_u4EE4_u76F8_u5173_u6027_u7684_u8FDE_u7EED_u6307_u4EE4_u4E0B_u8FBE_29" class="headerlink" title="cmd ; cmd (不考虑指令相关性的连续指令下达)"></a>cmd ; cmd (不考虑指令相关性的连续指令下达)</h4><p>在指令与指令中间利用分号(;) 来隔开，这样一来，分号前的指令执行完后就会立刻接着执行后面的指令了。    </p>
<h4 id="24_3F__28_u6307_u4EE4_u56DE_u4F20_u503C_29__u4E0E_26amp_3B_26amp_3B__u6216_7C_7C"><a href="#24_3F__28_u6307_u4EE4_u56DE_u4F20_u503C_29__u4E0E_26amp_3B_26amp_3B__u6216_7C_7C" class="headerlink" title="$? (指令回传值) 与&amp;&amp; 或||"></a>$? (指令回传值) 与&amp;&amp; 或||</h4><p>如同上面谈到的，两个指令之间有相依性，而这个相依性主要判断的地方就在于前一个指令执行的结果是否正确。</p>
<p><strong>若前一个指令执行的结果为正确，在Linux底下会回传一个$? = 0的值</strong></p>
<ul>
<li>cmd1 &amp;&amp; cmd2<ul>
<li>若cmd1执行完毕且正确执行($?=0)，则开始执行cmd2。</li>
<li>若cmd1执行完毕且为错误($?≠0)，则cmd2不执行。</li>
</ul>
</li>
<li>cmd1 || cmd2<ul>
<li>若cmd1执行完毕且正确执行($?=0)，则cmd2不执行。</li>
<li>若cmd1执行完毕且为错误($?≠0)，则开始执行cmd2。</li>
</ul>
</li>
</ul>
<p><a href="http://linux.vbird.org/linux_basic/0320bash.php#redirect" target="_blank" rel="external">鸟哥资料</a></p>
<h3 id="u7BA1_u7EBF_u547D_u4EE4_28pipe_29"><a href="#u7BA1_u7EBF_u547D_u4EE4_28pipe_29" class="headerlink" title="管线命令(pipe)"></a>管线命令(pipe)</h3><h4 id="u7BA1_u9053_u7B26__7C"><a href="#u7BA1_u9053_u7B26__7C" class="headerlink" title="管道符 |"></a>管道符 |</h4><p>管线命令使用的是『 | 』这个符号.</p>
<p>我们来查询系统的网络连接情况 netstat -an</p>
<pre><code>➜  ~ netstat -an
Active Internet connections (including servers)
Proto Recv-Q Send-Q  Local Address          Foreign Address        (state)
tcp4       0      0  127.0.0.1.51004        127.0.0.1.50724        ESTABLISHED
tcp4       0      0  127.0.0.1.50724        127.0.0.1.51004        ESTABLISHED
tcp4       0      0  192.168.1.105.50722    106.187.89.142.443     ESTABLISHED
...很多很多页
</code></pre><p>内容太多导致屏幕被塞满了，我们通过less命令分页显示,ctrl+n下一页，ctrl+b上一页,如此一来，使用” netstat -an”指令输出后的内容，就能够被less读取，并且利用less的功能，我们就能够前后翻动相关的信息了。其实这个<strong>管线命令『 | 』仅能处理经由前面一个指令传来的正确资讯，也就是standard output的资讯，对于stdandard error并没有直接处理的能力</strong>。</p>
<pre><code>➜  ~  netstat -an | less
</code></pre><p>在每个管线后面接的第一个资料必定是『指令』喔！而且<strong>这个指令必须要能够接受standard input的资料</strong>才行，这样的指令才可以是为『管线命令』，例如<strong>less, more, head, tail</strong>等都是可以接受standard input的管线命令啦。至于例如ls, cp, mv等就不是管线命令了！因为ls, cp, mv并不会接受来自stdin的资料。也就是说，管线命令主要有两个比较需要注意的地方：</p>
<ol>
<li>管线命令仅会处理standard output，对于standard error output 会予以忽略</li>
<li>管线命令必须要能够接受来自前一个指令的资料成为standard input 继续处理才行。</li>
</ol>
<h4 id="u64B7_u53D6_u547D_u4EE4_uFF1A_cut_2C_grep"><a href="#u64B7_u53D6_u547D_u4EE4_uFF1A_cut_2C_grep" class="headerlink" title="撷取命令： cut, grep"></a>撷取命令： cut, grep</h4><p>什么是撷取命令啊？说穿了，就是将一段资料经过分析后，取出我们所想要的。或者是经由分析关键字，取得我们所想要的那一行！不过，要注意的是，一般来说，撷取讯息通常是针对『一行一行』来分析的，并不是整篇讯息分析的喔～底下我们介绍两个很常用的讯息撷取命令：</p>
<h5 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h5><p>这个指令可以将一段信息的某一段给他『切』出来。 处理的信息是以『行』为单位。</p>
<pre><code>[dmtsai@study ~]$ cut -d&apos;分隔字元&apos; -f fields  &lt;==用于有特定分隔字元 
[dmtsai@study ~]$ cut -c字元区间             &lt;==用于排列整齐的讯息
选项与参数：
-d ：后面接分隔字元。与-f一起使用；
-f ：依据-d的分隔字元将一段讯息分割成为数段，用-f取出第几段的意思；
-c ：以字元(characters)的单位取出固定字元区间；

范例一：将PATH变数取出，我要找出第五个路径。
[dmtsai@study ~]$ echo ${PATH} 
/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin:/home/dmtsai /bin # 1 | 2 | 3 | 4 | 5 | 6 | 
[dmtsai@study ~]$ echo ${PATH} | cut -d &apos;:&apos; -f 5 #如同上面的数字显示，我们是以『 : 』作为分隔，因此会出现/home/dmtsai/.local/bin 
#那么如果想要列出第3与第5呢？，就是这样： 
[dmtsai@study ~]$ echo ${PATH} | cut -d &apos;:&apos; -f 3,5 

范例二：将export输出的讯息，取得第12字元以后的所有字串 
[dmtsai@ study ~]$ export 
declare -x HISTCONTROL=&quot;ignoredups&quot; 
declare -x HISTSIZE=&quot;1000&quot; 
declare -x HOME=&quot;/home/dmtsai&quot; 
declare -x HOSTNAME=&quot;study.centos.vbird&quot; .....(其他省略)..... 
#注意看，每个资料都是排列整齐的输出！如果我们不想要『 declare -x 』时，就得这么做： 
[dmtsai@study ~]$ export | cut -c 12- 
HISTCONTROL=&quot;ignoredups&quot; 
HISTSIZE=&quot;1000&quot; 
HOME=&quot;/home/dmtsai&quot; 
HOSTNAME= &quot;study.centos.vbird&quot; .....(其他省略)..... 
#知道怎么回事了吧？用-c可以处理比较具有格式的输出资料！
#我们还可以指定某个范围的值，例如第12-20的字元，就是cut -c 12-20等等！

范例三：用last将显示的登入者的资讯中，仅留下使用者大名 
[dmtsai@study ~]$ last 
root pts/1 192.168.201.101 Sat Feb 7 12:35 still logged in 
root pts/1 192.168. 201.101 Fri Feb 6 12:13 - 18:46 (06:33) 
root pts/1 192.168.201.254 Thu Feb 5 22:37 - 23:53 (01:16) # last可以输出『帐号/终端机/来源/日期时间』的资料，并且是排列整齐的 
[dmtsai@study ~]$ last | cut -d &apos; &apos; -f 1 #由输出的结果我们可以发现第一个空白分隔的栏位代表帐号，所以使用如上指令：
#但是因为root pts/1之间空格有好几个，并非仅有一个，所以，如果要找出
# pts/1其实不能以cut -d &apos; &apos; -f 1,2喔！输出的结果会不是我们想要的。
</code></pre><h5 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h5><p>刚刚的cut 是将一行讯息当中，取出某部分我们想要的，而grep 则是分析一行讯息， 若当中有我们所需要的资讯，就将该行拿出来～简单的语法是这样的：</p>
<pre><code>[dmtsai@study ~]$ grep [-acinv] [--color=auto] &apos;搜寻字串&apos; filename 
选项与参数：
-a ：将binary档案以text档案的方式搜寻资料
-c ：计算找到&apos;搜寻字串&apos;的次数
-i ：忽略大小写的不同，所以大小写视为相同
-n ：顺便输出行号
-v ：反向选择，亦即显示出没有&apos;搜寻字串&apos;内容的那一行！
--color=auto ：可以将找到的关键字部分加上颜色的显示喔！

范例一：将last当中，有出现root的那一行就取出来； 
[dmtsai@study ~]$ last | grep &apos;root&apos; 

范例二：与范例一相反，只要没有root的就取出！
[dmtsai@study ~]$ last | grep -v &apos;root&apos; 

范例三：在last的输出讯息中，只要有root就取出，并且仅取第一栏 
[dmtsai@study ~]$ last | grep &apos;root&apos; |cut -d &apos; &apos; -f1 
#在取出root之后，利用上个指令cut的处理，就能够仅取得第一栏啰！

范例四：取出/etc/man_db.conf内含MANPATH的那几行 
[dmtsai@study ~]$ grep --color=auto &apos;MANPATH&apos; /etc/man_db.conf 
....(前面省略)... . 
MANPATH _MAP /usr/games /usr/share/man
 MANPATH _MAP /opt/bin /opt/man
 MANPATH _MAP /opt/sbin /opt/man
 #神奇的是，如果加上--color=auto的选项，找到的关键字部分会用特殊颜色显示喔！
</code></pre><h4 id="u6392_u5E8F_u547D_u4EE4_sort_2C_wc_2C_uniq"><a href="#u6392_u5E8F_u547D_u4EE4_sort_2C_wc_2C_uniq" class="headerlink" title="排序命令 sort, wc, uniq"></a>排序命令 sort, wc, uniq</h4><p>很多时候，我们都会去计算一次资料里头的相同型态的资料总数，举例来说， 使用last 可以查得系统上面有登入主机者的身份。那么我可以针对每个使用者查出他们的总登入次数吗？此时就得要排序与计算之类的指令来辅助了！底下我们介绍几个好用的排序与统计指令</p>
<h5 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h5><p>sort 是很有趣的指令，他可以帮我们进行排序，而且可以依据不同的资料型态来排序喔！例如数字与文字的排序就不一样。此外，排序的字元与语系的编码有关，因此， 如果您需要排序时，建议使用LANG=C 来让语系统一，资料排序比较好一些。</p>
<pre><code>[dmtsai@study ~]$ sort [-fbMnrtuk] [file or stdin] 
选项与参数：
-f ：忽略大小写的差异，例如A与a视为编码相同；
-b ：忽略最前面的空白字元部分；
-M ：以月份的名字来排序，例如JAN, DEC等等的排序方法；
-n ：使用『纯数字』进行排序(预设是以文字型态来排序的)；
-r ：反向排序；
-u ：就是uniq ，相同的资料中，仅出现一行代表；
-t ：分隔符号，预设是用[tab]键来分隔；
-k ：以那个区间(field)来进行排序的意思

范例一：个人帐号都记录在/etc/passwd下，请将帐号进行排序。
[dmtsai@study ~]$ cat /etc/passwd | sort 
ab rt:x:173:173::/etc/abrt:/sbin/nologin
 ad m:x:3:4:adm:/var/adm:/ sbin/nologin
 al ex:x:1001:1002::/home/alex:/bin/bash
 #鸟哥省略很多的输出～由上面的资料看起来， sort是预设『以第一个』资料来排序，
#而且预设是以『文字』型态来排序的喔！所以由a开始排到最后啰！

范例二：/etc/passwd内容是以:来分隔的，我想以第三栏来排序，该如何？
[dmtsai@study ~]$ cat /etc/passwd | sort -t &apos;:&apos; -k 3 
root:x: 0 :0:root:/root:/bin/bash 
dmtsai:x: 1000 :1000:dmtsai:/ home/dmtsai:/bin/bash 
alex:x: 1001 :1002::/home/alex:/bin/bash 
arod:x: 1002 :1003::/home/arod:/bin/bash
 #看到特殊字体的输出部分了吧？怎么会这样排列啊？呵呵！没错啦～
#如果是以文字型态来排序的话，原本就会是这样，想要使用数字排序：
# cat /etc/passwd | sort -t &apos;:&apos; -k 3 -n 
#这样才行啊！用那个-n来告知sort以数字来排序啊！

范例三：利用last ，将输出的资料仅取帐号，并加以排序 
[dmtsai@study ~]$ last | cut -d &apos; &apos; -f1 | sort
</code></pre><h5 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h5><p>如果我排序完成了，想要将重复的资料仅列出一个显示，可以怎么做呢？</p>
<pre><code>[dmtsai@study ~]$ uniq [-ic] 
选项与参数：
-i ：忽略大小写字元的不同；
-c ：进行计数

范例一：使用last将帐号列出，仅取出帐号栏，进行排序后仅取出一位； 
[dmtsai@study ~]$ last | cut -d &apos; &apos; -f1 | sort | uniq 

范例二：承上题，如果我还想要知道每个人的登入总次数呢？
[dmtsai@study ~]$ last | cut -d &apos; &apos; -f1 | sort | uniq -c 
      1 
      6 (unknown 
     47 dmtsai 
      4 reboot 
      7 root 
      1 wtmp #从上面的结果可以发现reboot有4次， root登入则有7次！大部分是以dmtsai来操作！
# wtmp与第一行的空白都是last的预设字元，那两个可以忽略的！
</code></pre><p>这个指令用来将『重复的行删除掉只显示一个』，举个例子来说， 你要知道这个月份登入你主机的使用者有谁，而不在乎他的登入次数，那么就使用上面的范例， (1)先将所有的资料列出；(2)再将人名独立出来；(3)经过排序；(4)只显示一个！由于这个指令是在将重复的东西减少，所以当然需要『配合排序过的档案』来处理啰！</p>
<h5 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h5><pre><code>[dmtsai@study ~]$ wc [-lwm] 
选项与参数：
-l ：仅列出行；
-w ：仅列出多少字(英文单字)；
-m ：多少字元；

范例一：那个/etc /man_db.conf里面到底有多少相关字、行、字元数？

[dmtsai@study ~]$ cat /etc/man_db.conf | wc 
    131 723 5171 #输出的三个数字中，分别代表： 『行、字数、字元数』范例二：我知道使用last可以输出登入者，但是last最后两行并非帐号内容，那么请问，
        我该如何以一行指令串取得登入系统的总人次？
[dmtsai@study ~]$ last | grep [a-zA-Z] | grep -v &apos;wtmp&apos; | grep -v &apos;reboot&apos; | \ 
&gt; grep -v &apos;unknown&apos; |wc -l #由于last会输出空白行, wtmp, unknown, reboot等无关帐号登入的资讯，因此，我利用
# grep取出非空白行，以及去除上述关键字那几行，再计算行数，就能够了解啰！
</code></pre><p>举个例子来说， 当你要知道目前你的帐号档案中有多少个帐号时，就使用这个方法：『 cat /etc/passwd | wc -l 』啦！因为/etc/passwd 里头一行代表一个使用者呀！所以知道行数就晓得有多少的帐号在里头了！而如果要计算一个档案里头有多少个字元时，就使用wc -m 这个选项吧！</p>
<p><a href="http://linux.vbird.org/linux_basic/0320bash.php#pipe" target="_blank" rel="external">详细命令请查看鸟哥博客linux_basic</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Shell__u6982_u8FF0"><a href="#Shell__u6982_u8FF0" class="headerlink" title="Shell 概述"></a>Shell 概述</h2><p><a href="http://www.imooc.com/learn/175">imooc shell课程</a></p>
<p>Shell是一个命令行解释器，它为用户提供了一个向Linux内核发送请求以便运行程序的界面系统级程序，用可以用Shell来启动，挂起，停止甚至是编写一些程序。</p>
<p>Shell还是一个功能强大的编程语言，易编写易调试，灵活性较强。Shell是解释执行的脚本语言，在Shell中可以直接调用Linux系统命令。</p>]]>
    
    </summary>
    
      <category term="linux" scheme="http://suqun.github.io/tags/linux/"/>
    
      <category term="shell" scheme="http://suqun.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[What is Docker?]]></title>
    <link href="http://suqun.github.io/2016/01/01/What-is-Docker/"/>
    <id>http://suqun.github.io/2016/01/01/What-is-Docker/</id>
    <published>2016-01-01T11:43:48.000Z</published>
    <updated>2016-01-04T13:34:08.000Z</updated>
    <content type="html"><![CDATA[<h2 id="What_is_Docker"><a href="#What_is_Docker" class="headerlink" title="What is Docker"></a>What is Docker</h2><p>Docker allows you to package an applications with all of its dependencies into a standardized unit for development.</p>
<p>对于软件开发,Docker允许你用其所有相关的依赖打包应用程序到一个标准化单元中.</p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/docker-what_is_layered_filesystems_sm.png" alt="layered_filesystems_sm"></p>
<p>Docker containers wrap up a piece of software in a complete filesystem that contains everything it needs to run : code,runtime,system tools,system libraries - anything you can install on a sever. This guarantees that it will always run the same,regardless of the environment it is running in.</p>
<p>Docker容器在一个完整的文件系统中包裹一个软件,这个文件系统包含软件运行所需要的code,runtime,系统工具,系统库等任何你所能在服务器上安装的.这保证了软件总是运行在相同的环境.(这句翻译的烂,欢迎指正)</p>
<a id="more"></a>
<h3 id="lightweight__u8F7B_u91CF_u7684"><a href="#lightweight__u8F7B_u91CF_u7684" class="headerlink" title="lightweight 轻量的"></a>lightweight 轻量的</h3><p>Containers run on a single machine all share the same operating system kernel so they start instantly and make more efficient use of RAM. Images are constructed from layered filesystems so they can share common files, making disk usage and images download efficient.</p>
<p>容器运行在一个独立的机器中,共享操作系统核心,所以它可以迅速启动并且可以更有效的使用内存. 在分层文件系统中构建图片,可以共享公共文件,使磁盘的使用和图片的下载更高效.</p>
<h3 id="Open__u5F00_u653E_u7684"><a href="#Open__u5F00_u653E_u7684" class="headerlink" title="Open 开放的"></a>Open 开放的</h3><p>Docker containers are based on open standards allowing containers to run on all major Linux distributions and Microsoft operating systems with support for every infrastructure.</p>
<p>Docker容器基于开放标准，允许容器运行在主要的Linux发行版和微软操作系统上，用来支持每一个基础设施。</p>
<h3 id="Secure__u5B89_u5168_u7684"><a href="#Secure__u5B89_u5168_u7684" class="headerlink" title="Secure 安全的"></a>Secure 安全的</h3><p>Containers isolate applications from each other and the underlying infrastructure while providing an added layer of protection for the application.</p>
<p>容器将每个应用程序和底层基础架构都相互隔离起来，同时为应用程序提供了额外的保存层。</p>
<h2 id="How_is_this_different_from_virtual_machines_3F__u548C_u865A_u62DF_u673A_u6709_u4EC0_u4E48_u4E0D_u540C"><a href="#How_is_this_different_from_virtual_machines_3F__u548C_u865A_u62DF_u673A_u6709_u4EC0_u4E48_u4E0D_u540C" class="headerlink" title="How is this different from virtual machines? 和虚拟机有什么不同"></a>How is this different from virtual machines? 和虚拟机有什么不同</h2><p>Containers have similar resource isolation and allocation benefits as virtual machines but a different architectural approach allows them to much more portable and efficient.</p>
<p>容器有和虚拟机类似的资源隔离和allocation benefits（分配利益？），但不同的架构方法可以让Docker容器更加便携和高效。</p>
<h3 id="Virtual_Machines__u865A_u62DF_u673A"><a href="#Virtual_Machines__u865A_u62DF_u673A" class="headerlink" title="Virtual Machines 虚拟机"></a>Virtual Machines 虚拟机</h3><p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/docker-what-is-docker-diagram.png" alt="vm-diagram"></p>
<p>Each virtual machine includes the application,the necessary binaries and libraries and an entire guest operating system - all of which may be tens of GBs in size.</p>
<p>每个虚拟机都包含应用程序，所需的二进制文件和库以及一个完整的客户操作系统，所有的这些都有可能是几十GB的大小。</p>
<h3 id="Containers__u5BB9_u5668"><a href="#Containers__u5BB9_u5668" class="headerlink" title="Containers 容器"></a>Containers 容器</h3><p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/docker-what-is-vm-diagram.png" alt="containers"></p>
<p>Containers include the application and all of its dependencies, but share the kernel with other containers. They run as an isolated process in userspace on the host operating system. They’re also not tied to any specific infrastructure - Docker containers run on any computer, on any infrastructure and in any cloud.</p>
<p>容器包含应用程序及其所有的依赖，同其他容器共享内核。它允许在主机操作系统上用户空间中一个独立的进程中。它不会依赖于特定的基础设施，Docker容器可以运行在任何的个人电脑上，任何的基础设施上，任何的云服务上。</p>
<h2 id="How_does_this_help_you_build_better_software_3F__u5982_u4F55_u6784_u5EFA_u66F4_u597D_u7684_u8F6F_u4EF6"><a href="#How_does_this_help_you_build_better_software_3F__u5982_u4F55_u6784_u5EFA_u66F4_u597D_u7684_u8F6F_u4EF6" class="headerlink" title="How does this help you build better software? 如何构建更好的软件"></a>How does this help you build better software? 如何构建更好的软件</h2><p>When your app is in Docker containers, you don’t have to warry about setting up and maintaining different environment or different tooling for each language. Focus on creating new features, flexing issues and shipping software.</p>
<p>在Docker容器中运行你的app，你不必担心配置或者维护不同的环境，维护每种语言不同的工具。专心创建新的功能，修复问题以及shipping软件。</p>
<h3 id="Accelerate_Developer_Onboarding__u52A0_u5FEB_u5F00_u53D1"><a href="#Accelerate_Developer_Onboarding__u52A0_u5FEB_u5F00_u53D1" class="headerlink" title="Accelerate Developer Onboarding 加快开发"></a>Accelerate Developer Onboarding 加快开发</h3><p>Stop wasting hours trying to setup developer environments, spin up new instances and make copies of production code to run locally. With Docker, you can easily take copies of your live environment and run on any new endpoint running Docker.</p>
<p>省去设置开发环境的时间，将生产代码复制到本地运行。有了Docker，你可以很容易的将生产环境的副本运行在任何运行着Docker容器的终端上。</p>
<h3 id="Empower_Developer_Creativity__u4F7F_u5F00_u53D1_u4EBA_u5458_u6709_u521B_u9020_u529B"><a href="#Empower_Developer_Creativity__u4F7F_u5F00_u53D1_u4EBA_u5458_u6709_u521B_u9020_u529B" class="headerlink" title="Empower Developer Creativity 使开发人员有创造力"></a>Empower Developer Creativity 使开发人员有创造力</h3><p>The isolation capabilities of Docker containers free developers from the worries of using “approved” language stacks and tooling. Developers can use the best language and tools for their application service without worrying about causing conflict issues.</p>
<h3 id="Eliminate_Environment_inconsistencies__u6D88_u9664_u73AF_u5883_u4E0D_u4E00_u81F4"><a href="#Eliminate_Environment_inconsistencies__u6D88_u9664_u73AF_u5883_u4E0D_u4E00_u81F4" class="headerlink" title="Eliminate Environment inconsistencies 消除环境不一致"></a>Eliminate Environment inconsistencies 消除环境不一致</h3><p>By packaging up the application with its configs and dependencies together and shipping as a container, the application will always work as designed locally, on another machine, in test or production. No more worries about having to install the same configs into a different environment.</p>
<h2 id="Easily_Share_and_Collaborate_on_Application__u8F7B_u677E_u5171_u4EAB_u548C_u534F_u4F5C"><a href="#Easily_Share_and_Collaborate_on_Application__u8F7B_u677E_u5171_u4EAB_u548C_u534F_u4F5C" class="headerlink" title="Easily Share and Collaborate on Application 轻松共享和协作"></a>Easily Share and Collaborate on Application 轻松共享和协作</h2><p>Docker creates a common framework for developers and sysadmins to work together on distributed applications</p>
<h3 id="Distribute_and_Share_content__u5206_u53D1_u548C_u5171_u4EAB_u5185_u5BB9"><a href="#Distribute_and_Share_content__u5206_u53D1_u548C_u5171_u4EAB_u5185_u5BB9" class="headerlink" title="Distribute and Share content 分发和共享内容"></a>Distribute and Share content 分发和共享内容</h3><p>Store,distribute and manage your Docker images in your Docker Hub with your team. Image updates,changes and history are automatically shared across your orgnization.</p>
<p>在团队中，使用Docker Hub存储，分发，管理你的图片。图片的更新，改变和历史都会被自动的在你的组织中共享。</p>
<h3 id="Simpley_share_your_applications_with_others__u7B80_u5355_u7684_u4E0E_u4ED6_u4EBA_u5206_u4EAB_u4F60_u7684_u5E94_u7528_u7A0B_u5E8F"><a href="#Simpley_share_your_applications_with_others__u7B80_u5355_u7684_u4E0E_u4ED6_u4EBA_u5206_u4EAB_u4F60_u7684_u5E94_u7528_u7A0B_u5E8F" class="headerlink" title="Simpley share your applications with others 简单的与他人分享你的应用程序"></a>Simpley share your applications with others 简单的与他人分享你的应用程序</h3><p>Ship one or many containers to others or downstream service teams without worrying about different environment dependencies creating issues with your application. Other teams can easily link to or test against your app without having to learn or worry about how it works.</p>
<h2 id="Ship_More_Software_Faster"><a href="#Ship_More_Software_Faster" class="headerlink" title="Ship More Software Faster"></a>Ship More Software Faster</h2><p>Docker allows you to dynamically change your application like never before from adding new capabilities , scaling out services to quickly changing problem areas.</p>
<h3 id="Ship_7X_More"><a href="#Ship_7X_More" class="headerlink" title="Ship 7X More"></a>Ship 7X More</h3><p>Docker users on average ship software 7X more after deploying Docker in their environment. More frequent updates provide more value to your customers faster.</p>
<h3 id="Quickly_Scale__u5FEB_u901F_u6269_u5C55"><a href="#Quickly_Scale__u5FEB_u901F_u6269_u5C55" class="headerlink" title="Quickly Scale 快速扩展"></a>Quickly Scale 快速扩展</h3><p>Docker containers spin up and down in seconds making it easy to scale an application service at any time to satisfy peak customer demand, then just as easily spin down those containers to only use the resources you need when you need it</p>
<h3 id="Easily_Remediate_Issues__u8F7B_u677E_u7EA0_u6B63_u95EE_u9898"><a href="#Easily_Remediate_Issues__u8F7B_u677E_u7EA0_u6B63_u95EE_u9898" class="headerlink" title="Easily Remediate Issues 轻松纠正问题"></a>Easily Remediate Issues 轻松纠正问题</h3><p>Docker make it easy to identify issues and isolate the problem container, quickly roll back to make the necessary changes then push the updated container into production. The isolation between containers make these changes less disruptive than traditional software models.</p>
<p><a href="http://www.docker.com/what-docker" target="_blank" rel="external">What is Docker原文地址</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="What_is_Docker"><a href="#What_is_Docker" class="headerlink" title="What is Docker"></a>What is Docker</h2><p>Docker allows you to package an applications with all of its dependencies into a standardized unit for development.</p>
<p>对于软件开发,Docker允许你用其所有相关的依赖打包应用程序到一个标准化单元中.</p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/docker-what_is_layered_filesystems_sm.png" alt="layered_filesystems_sm"></p>
<p>Docker containers wrap up a piece of software in a complete filesystem that contains everything it needs to run : code,runtime,system tools,system libraries - anything you can install on a sever. This guarantees that it will always run the same,regardless of the environment it is running in.</p>
<p>Docker容器在一个完整的文件系统中包裹一个软件,这个文件系统包含软件运行所需要的code,runtime,系统工具,系统库等任何你所能在服务器上安装的.这保证了软件总是运行在相同的环境.(这句翻译的烂,欢迎指正)</p>]]>
    
    </summary>
    
      <category term="Docker" scheme="http://suqun.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015]]></title>
    <link href="http://suqun.github.io/2015/12/31/2015/"/>
    <id>http://suqun.github.io/2015/12/31/2015/</id>
    <published>2015-12-31T14:19:57.000Z</published>
    <updated>2015-12-31T14:46:02.000Z</updated>
    <content type="html"><![CDATA[<p>2015还有一会就结束了.这一年我身上发生了好多大事,一点点想起来,有些苦涩,也有些甜蜜.</p>
<p>2015年年初就开始筹划买房的事情,2月份开始从苏州到上海,新房,二手房,看了不下100套,跑了3个月,看着房价一直涨涨涨,总感觉再不买就真的买不起了.一咬牙,5月底同双方父母朋友借钱加上自己和女友的积蓄勉强凑齐首付,在松江买下.买房的同时也和女友领证,正式结为夫妇,结束了7年多得恋爱之路.</p>
<p>房子有了,证领了,就开始筹划10月份的婚礼.拍婚纱照,买婚戒,买衣服,一点点的直到把老婆娶回家.</p>
<a id="more"></a>
<p>其实,2015也没发生几件事,过的很快…这一年年初工作上大幅涨薪,同同事关系融洽,处了几个好友.这一年年尾,朋友离职,工作不顺心,身体不适,过的又实在烦闷.无奈四处面试打算为2016做好铺垫,找份顺心的工作.</p>
<p>2016年,也会有很多大事要发生,入住新房,有钱再买个车,看看时机再要个孩子.</p>
<p>人生的路仿佛才刚刚开始,预祝自己2016身体健康,技术上有所深入.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2015还有一会就结束了.这一年我身上发生了好多大事,一点点想起来,有些苦涩,也有些甜蜜.</p>
<p>2015年年初就开始筹划买房的事情,2月份开始从苏州到上海,新房,二手房,看了不下100套,跑了3个月,看着房价一直涨涨涨,总感觉再不买就真的买不起了.一咬牙,5月底同双方父母朋友借钱加上自己和女友的积蓄勉强凑齐首付,在松江买下.买房的同时也和女友领证,正式结为夫妇,结束了7年多得恋爱之路.</p>
<p>房子有了,证领了,就开始筹划10月份的婚礼.拍婚纱照,买婚戒,买衣服,一点点的直到把老婆娶回家.</p>]]>
    
    </summary>
    
      <category term="随笔" scheme="http://suqun.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Why Docker?]]></title>
    <link href="http://suqun.github.io/2015/12/30/Why-Docker/"/>
    <id>http://suqun.github.io/2015/12/30/Why-Docker/</id>
    <published>2015-12-30T15:42:52.000Z</published>
    <updated>2015-12-31T16:06:31.000Z</updated>
    <content type="html"><![CDATA[<p>一直听说Docker怎么怎么厉害,不明所以,网上查了下,也只是简单了解.学技术还得去官网,尽管<a href="http://www.docker.com/" target="_blank" rel="external">Docker官网</a>都是英文,看的比较辛苦,不过一方面学技术,一方面学英语也是妙事.这一系列的Docker笔记,就边抄英文边翻译,边学技术吧.</p>
<h4 id="Why_Docker_3F"><a href="#Why_Docker_3F" class="headerlink" title="Why Docker?"></a>Why Docker?</h4><p>Docker provides an integrated technology suite that enables development and IT operations teams to build,ship,and run distributed applications anywhere.</p>
<p>Docker 提供了一个集成的技术组件,它使得开发或IT运营团队可以在任何地方构建,ship,以及运行分布式应用.(ship到底该怎么翻译呢?)</p>
<h4 id="Docker_Containers_as_a_Service_28CaaS_29"><a href="#Docker_Containers_as_a_Service_28CaaS_29" class="headerlink" title="Docker Containers as a Service(CaaS)"></a>Docker Containers as a Service(CaaS)</h4><p>Achieve agility and control for Development and IT operations teams to build,ship,and run any app,anywhere </p>
<p>开发或者IT运营部门在任何地方对应用进行构建,ship都实现了灵活性和控制性</p>
<h6 id="Agility__u7075_u6D3B_u6027"><a href="#Agility__u7075_u6D3B_u6027" class="headerlink" title="Agility 灵活性"></a>Agility 灵活性</h6><p>Docker gives developers the freedom to define environments, and create and deploy apps faster and easier,and flexibility for IT ops to quickly response to change.</p>
<p>Docker使开发人员能够自由的定义环境,以及简单快速的创建和部署应用,同时提供了灵活性,IT运维也可以快速应对变化.</p>
<h6 id="Control__u63A7_u5236_u6027"><a href="#Control__u63A7_u5236_u6027" class="headerlink" title="Control 控制性"></a>Control 控制性</h6><p>Docker enables developers to own all the code from infrastructure to app , and the manageability for IT ops to standardize ,secure and scale the operating environment.</p>
<p>Docker能够让开发人员从基础设施到应用程序上获取所有的代码 , 能让IT运维对于操作环境的规范,安全,规模都易于管理.</p>
<h6 id="Portability__u53EF_u79FB_u690D_u6027"><a href="#Portability__u53EF_u79FB_u690D_u6027" class="headerlink" title="Portability 可移植性"></a>Portability 可移植性</h6><p>Docker gives you choice without complexity , from a laptop to team , to private infrastructure and public cloud provides.</p>
<p>Docker给你简单的选择,从个人电脑到团队,从私有基础设施到公有云服务提供商.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一直听说Docker怎么怎么厉害,不明所以,网上查了下,也只是简单了解.学技术还得去官网,尽管<a href="http://www.docker.com/" target="_blank" rel="external">Docker官网</a>都是英文,看的比较辛苦,不过]]>
    </summary>
    
      <category term="Docker" scheme="http://suqun.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[zookeeper客户端命令]]></title>
    <link href="http://suqun.github.io/2015/12/28/zookeeper%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%91%BD%E4%BB%A4/"/>
    <id>http://suqun.github.io/2015/12/28/zookeeper客户端命令/</id>
    <published>2015-12-28T15:24:14.000Z</published>
    <updated>2016-01-05T14:36:39.000Z</updated>
    <content type="html"><![CDATA[<h3 id="zkCli-sh"><a href="#zkCli-sh" class="headerlink" title="zkCli.sh"></a>zkCli.sh</h3><pre><code>连接zookeeper：./zkCli.sh -server ip:port

bin目录下输入命令`./zkCli.sh -server 192.168.1.101:2181`
</code></pre><h3 id="u5BA2_u6237_u7AEF_u547D_u4EE4"><a href="#u5BA2_u6237_u7AEF_u547D_u4EE4" class="headerlink" title="客户端命令"></a>客户端命令</h3><h4 id="help"><a href="#help" class="headerlink" title="help"></a><strong>help</strong></h4><pre><code>ZooKeeper -server host:port cmd args
stat path [watch]
set path data [version]
ls path [watch]
delquota [-n|-b] path
ls2 path [watch]
setAcl path acl
setquota -n|-b val path
history 
redo cmdno
printwatches on|off
delete path [version]
sync path
listquota path
rmr path
get path [watch]
create [-s] [-e] path data acl
addauth scheme auth
quit 
getAcl path
close 
connect host:port
</code></pre><a id="more"></a>
<h4 id="ls_path__5Bwatch_5D__u5217_u51FA_u5F53_u524D_u8282_u70B9_u7684_u5B50_u8282_u70B9"><a href="#ls_path__5Bwatch_5D__u5217_u51FA_u5F53_u524D_u8282_u70B9_u7684_u5B50_u8282_u70B9" class="headerlink" title="ls path [watch] 列出当前节点的子节点"></a><strong>ls path [watch]</strong> 列出当前节点的子节点</h4><pre><code>[zk: 192.168.1.101:2181(CONNECTED) 5] ls /zookeeper
[quota]
</code></pre><h4 id="stat_path__5Bwatch_5D__u83B7_u53D6_u8282_u70B9_u72B6_u6001_u4FE1_u606F"><a href="#stat_path__5Bwatch_5D__u83B7_u53D6_u8282_u70B9_u72B6_u6001_u4FE1_u606F" class="headerlink" title="stat path [watch] 获取节点状态信息"></a><strong>stat path [watch]</strong> 获取节点状态信息</h4><pre><code>[zk: 192.168.1.101:2181(CONNECTED) 6] stat /zookeeper
cZxid = 0x0                             //该节点被创建时的事务ID
ctime = Thu Jan 01 08:00:00 CST 1970    //创建时间
mZxid = 0x0                             //最后一次更新的事务ID   
mtime = Thu Jan 01 08:00:00 CST 1970    //最后一次更新时间
pZxid = 0x0                             //该节点的子节点列表最后一次被更新（创建或删除节点）的事务ID
cversion = -1                           //子节点的版本号
dataVersion = 0                         //子节点的数据版本号
aclVersion = 0                          //权限版本号
ephemeralOwner = 0x0                    //创建该临时节点的事务Id
dataLength = 0                          //当前节点存放的数据长度
numChildren = 1                         //当前节点所拥有的子节点的个数
</code></pre><h4 id="get_path__5Bwatch_5D__u83B7_u53D6_u8282_u70B9_u5B58_u50A8_u7684_u5185_u5BB9"><a href="#get_path__5Bwatch_5D__u83B7_u53D6_u8282_u70B9_u5B58_u50A8_u7684_u5185_u5BB9" class="headerlink" title="get path [watch] 获取节点存储的内容"></a><strong>get path [watch]</strong> 获取节点存储的内容</h4><pre><code>[zk: 192.168.1.101:2181(CONNECTED) 14] get /node_test
larry                             //节点存储的内容
cZxid = 0x400000002
ctime = Tue Dec 15 22:04:44 CST 2015
mZxid = 0x400000002
mtime = Tue Dec 15 22:04:44 CST 2015
pZxid = 0x400000002
cversion = 0
dataVersion = 0
aclVersion = 0
ephemeralOwner = 0x0
dataLength = 5
numChildren = 0
</code></pre><h4 id="ls2_path__5Bwatch_5D__u5217_u51FA_u5F53_u524D_u8282_u70B9_u7684_u5B50_u8282_u70B9_u5E76_u67E5_u770B_u5B50_u8282_u70B9_u7684_u72B6_u6001_u4FE1_u606F_uFF0C_u76F8_u5F53_u4E8Els_u548Cstat"><a href="#ls2_path__5Bwatch_5D__u5217_u51FA_u5F53_u524D_u8282_u70B9_u7684_u5B50_u8282_u70B9_u5E76_u67E5_u770B_u5B50_u8282_u70B9_u7684_u72B6_u6001_u4FE1_u606F_uFF0C_u76F8_u5F53_u4E8Els_u548Cstat" class="headerlink" title="ls2 path [watch] 列出当前节点的子节点并查看子节点的状态信息，相当于ls和stat"></a><strong>ls2 path [watch]</strong> 列出当前节点的子节点并查看子节点的状态信息，相当于ls和stat</h4><pre><code>[zk: 192.168.1.101:2181(CONNECTED) 9] ls /zookeeper
[quota]
[zk: 192.168.1.101:2181(CONNECTED) 10] ls2 /zookeeper
[quota]
cZxid = 0x0
ctime = Thu Jan 01 08:00:00 CST 1970
mZxid = 0x0
mtime = Thu Jan 01 08:00:00 CST 1970
pZxid = 0x0
cversion = -1
dataVersion = 0
aclVersion = 0
ephemeralOwner = 0x0
dataLength = 0
numChildren = 1
</code></pre><h4 id="create__5B-s_5D__5B-e_5D_path_data_acl__u521B_u5EFA_u6307_u4EE4"><a href="#create__5B-s_5D__5B-e_5D_path_data_acl__u521B_u5EFA_u6307_u4EE4" class="headerlink" title="create [-s] [-e] path data acl 创建指令"></a><strong>create [-s] [-e] path data acl</strong> 创建指令</h4><pre><code>- -s 表示创建的是顺序节点
- -e 表示创建的是临时节点
- path 创建节点的路径
- data 创建节点的内容
- acl 创建节点的acl权限

    //创建普通节点
    [zk: 192.168.1.101:2181(CONNECTED) 13] create /node_test larry 
    Created /node_test
    [zk: 192.168.1.101:2181(CONNECTED) 14] get /node_test
    larry
    cZxid = 0x400000002
    ctime = Tue Dec 15 22:04:44 CST 2015
    mZxid = 0x400000002
    mtime = Tue Dec 15 22:04:44 CST 2015
    pZxid = 0x400000002
    cversion = 0
    dataVersion = 0
    aclVersion = 0
    ephemeralOwner = 0x0
    dataLength = 5
    numChildren = 0

    //创建临时节点,退出重新登录
    [zk: 192.168.1.101:2181(CONNECTED) 1] ls /node_test
    []
    [zk: 192.168.1.101:2181(CONNECTED) 2] create -e /node_test/node_test_1 123456
    Created /node_test/node_test_1
    [zk: 192.168.1.101:2181(CONNECTED) 3] ls /node_test
    [node_test_1]
    [zk: 192.168.1.101:2181(CONNECTED) 4] quit
    Quitting...
    2015-12-15 22:13:13,291 [myid:] - INFO  [main:ZooKeeper@684] - Session: 0x151a5bedd2c0001 closed
    2015-12-15 22:13:13,293 [myid:] - INFO  [main-EventThread:ClientCnxn$EventThread@519] - EventThread shut down for session: 0x151a5bedd2c0001
    ➜  bin  sudo ./zkCli.sh -server 192.168.1.101:2181  //重新登录
    [zk: 192.168.1.101:2181(CONNECTED) 2] ls /node_test
    []

    //创建顺序节点
    [zk: 192.168.1.101:2181(CONNECTED) 3] create -s /node_test/note_test_1 123456 
    Created /node_test/note_test_10000000001
    [zk: 192.168.1.101:2181(CONNECTED) 4] create -s /node_test/note_test_1 123456 
    Created /node_test/note_test_10000000002
</code></pre><h4 id="set_path_data__5Bversion_5D__u4FEE_u6539_u6307_u4EE4"><a href="#set_path_data__5Bversion_5D__u4FEE_u6539_u6307_u4EE4" class="headerlink" title="set path data [version] 修改指令"></a><strong>set path data [version]</strong> 修改指令</h4><pre><code>- path 修改节点路径为path
- data 修改节点的值为data
- [version] 为节点内容设置版本号

    [zk: 192.168.1.101:2181(CONNECTED) 4] get /node_test
    larry
    cZxid = 0x400000002
    ctime = Tue Dec 15 22:04:44 CST 2015
    mZxid = 0x400000002
    mtime = Tue Dec 15 22:04:44 CST 2015
    pZxid = 0x40000000d
    cversion = 6
    dataVersion = 0
    aclVersion = 0
    ephemeralOwner = 0x0
    dataLength = 5
    numChildren = 2
    [zk: 192.168.1.101:2181(CONNECTED) 5] set /node_test 999999
    cZxid = 0x400000002
    ctime = Tue Dec 15 22:04:44 CST 2015
    mZxid = 0x40000000f
    mtime = Tue Dec 15 22:24:57 CST 2015
    pZxid = 0x40000000d
    cversion = 6
    dataVersion = 1
    aclVersion = 0
    ephemeralOwner = 0x0
    dataLength = 6
    numChildren = 2
    [zk: 192.168.1.101:2181(CONNECTED) 6] get /node_test 
    999999
    cZxid = 0x400000002
    ctime = Tue Dec 15 22:04:44 CST 2015
    mZxid = 0x40000000f
    mtime = Tue Dec 15 22:24:57 CST 2015
    pZxid = 0x40000000d
    cversion = 6
    dataVersion = 1
    aclVersion = 0
    ephemeralOwner = 0x0
    dataLength = 6
    numChildren = 2
    [zk: 192.168.1.101:2181(CONNECTED) 7] set /node_test 999999
    cZxid = 0x400000002
    ctime = Tue Dec 15 22:04:44 CST 2015
    mZxid = 0x400000010
    mtime = Tue Dec 15 22:31:27 CST 2015
    pZxid = 0x40000000d
    cversion = 6
    dataVersion = 2  //此处增加
    aclVersion = 0
    ephemeralOwner = 0x0
    dataLength = 6
    numChildren = 2
    [zk: 192.168.1.101:2181(CONNECTED) 8] set /node_test 999999 2
    cZxid = 0x400000002
    ctime = Tue Dec 15 22:04:44 CST 2015
    mZxid = 0x400000011
    mtime = Tue Dec 15 22:31:31 CST 2015
    pZxid = 0x40000000d
    cversion = 6
    dataVersion = 3  //修改的值相同，此处扔增加
    aclVersion = 0
    ephemeralOwner = 0x0
    dataLength = 6
    numChildren = 2
    [zk: 192.168.1.101:2181(CONNECTED) 9] set /node_test 999999 4    //版本号必须同上一个的版本号相同才不会报错，即上面为3，填写版本号为3才行
    version No is not valid : /node_test
    [zk: 192.168.1.101:2181(CONNECTED) 10] set /node_test 999999 3
    cZxid = 0x400000002
    ctime = Tue Dec 15 22:04:44 CST 2015
    mZxid = 0x400000013
    mtime = Tue Dec 15 22:31:42 CST 2015
    pZxid = 0x40000000d
    cversion = 6
    dataVersion = 4 // 版本号增加
    aclVersion = 0
    ephemeralOwner = 0x0
    dataLength = 6
    numChildren = 2
</code></pre><h4 id="delete_path__5Bversion_5D__u5220_u9664_u6307_u5B9A_u8DEF_u5F84_u7684_u8282_u70B9"><a href="#delete_path__5Bversion_5D__u5220_u9664_u6307_u5B9A_u8DEF_u5F84_u7684_u8282_u70B9" class="headerlink" title="delete path [version] 删除指定路径的节点"></a><strong>delete path [version]</strong> 删除指定路径的节点</h4><pre><code>[zk: 192.168.1.101:2181(CONNECTED) 12] ls /node_test
[note_test_10000000002, note_test_10000000001]
[zk: 192.168.1.101:2181(CONNECTED) 13] delete /node_test
Node not empty: /node_test //只能删除没有子节点的节点
[zk: 192.168.1.101:2181(CONNECTED) 14] delete /node_test/note_test_10000000001
[zk: 192.168.1.101:2181(CONNECTED) 15] 
</code></pre><h4 id="rmr_path__u5FAA_u73AF_u5220_u9664_u8DEF_u5F84_u4E0B_u7684_u8282_u70B9"><a href="#rmr_path__u5FAA_u73AF_u5220_u9664_u8DEF_u5F84_u4E0B_u7684_u8282_u70B9" class="headerlink" title="rmr path 循环删除路径下的节点"></a><strong>rmr path</strong> 循环删除路径下的节点</h4><pre><code>[zk: 192.168.1.101:2181(CONNECTED) 16] rmr /node_test
[zk: 192.168.1.101:2181(CONNECTED) 17] ls /
[zookeeper]
[zk: 192.168.1.101:2181(CONNECTED) 18] 
</code></pre><h4 id="setquota_-n_7C-b_val_path__u9650_u5236_u8282_u70B9_u7684_u503C_u7684_u957F_u5EA6_u6216_u5176_u5B50_u8282_u70B9_u7684_u4E2A_u6570"><a href="#setquota_-n_7C-b_val_path__u9650_u5236_u8282_u70B9_u7684_u503C_u7684_u957F_u5EA6_u6216_u5176_u5B50_u8282_u70B9_u7684_u4E2A_u6570" class="headerlink" title="setquota -n|-b val path 限制节点的值的长度或其子节点的个数"></a><strong>setquota -n|-b val path</strong> 限制节点的值的长度或其子节点的个数</h4><pre><code>- -n 限制节点(包含当前节点)的个数为val
- -b 限制节点值的长度为val
- path 要限制的节点路径

[zk: 192.168.1.101:2181(CONNECTED) 18] create node_test 123
Command failed: java.lang.IllegalArgumentException: Path must start with / character
[zk: 192.168.1.101:2181(CONNECTED) 19] create /node_test 123
Created /node_test
[zk: 192.168.1.101:2181(CONNECTED) 20] setquota -n 2 /node_test
Comment: the parts are option -n val 2 path /node_test
[zk: 192.168.1.101:2181(CONNECTED) 21] create /node_test/node_test_1 234
Created /node_test/node_test_1
[zk: 192.168.1.101:2181(CONNECTED) 22] create /node_test/node_test_2 345
Created /node_test/node_test_2
[zk: 192.168.1.101:2181(CONNECTED) 23] create /node_test/node_test_3 456
Created /node_test/node_test_3 //超额，不会抛出异常，只是在日志/opt/zookeeper/bin/zookeeper.out中记录信息
[zk: 192.168.1.101:2181(CONNECTED) 24] ls /node_test
[node_test_2, node_test_3, node_test_1]

zookeeper.out
2015-12-15 22:49:01,139 [myid:1] - WARN  [CommitProcessor:1:DataTree@389] - Quota exceeded: /node_test count=3 limit=2
2015-12-15 22:49:06,021 [myid:1] - WARN  [CommitProcessor:1:DataTree@389] - Quota exceeded: /node_test count=4 limit=2
</code></pre><h4 id="listquota_path__u67E5_u770B_u8282_u70B9_u914D_u989D_u60C5_u51B5"><a href="#listquota_path__u67E5_u770B_u8282_u70B9_u914D_u989D_u60C5_u51B5" class="headerlink" title="listquota path 查看节点配额情况"></a><strong>listquota path</strong> 查看节点配额情况</h4><pre><code>[zk: 192.168.1.101:2181(CONNECTED) 27] listquota /node_test
absolute path is /zookeeper/quota/node_test/zookeeper_limits
Output quota for /node_test count=2,bytes=-1   //配额信息 -1没有限制
Output stat for /node_test count=4,bytes=12    //当前节点状态信息，当前节点4个，限额2个，字节总长度12
[zk: 192.168.1.101:2181(CONNECTED) 28]
</code></pre><h4 id="delquota__5B-n_7C-b_5D_path__u5220_u9664_u914D_u989D_u4FE1_u606F"><a href="#delquota__5B-n_7C-b_5D_path__u5220_u9664_u914D_u989D_u4FE1_u606F" class="headerlink" title="delquota [-n|-b] path 删除配额信息"></a><strong>delquota [-n|-b] path</strong> 删除配额信息</h4><pre><code>[zk: 192.168.1.101:2181(CONNECTED) 28] delquota -n /node_test
[zk: 192.168.1.101:2181(CONNECTED) 29] listquota /node_test
absolute path is /zookeeper/quota/node_test/zookeeper_limits
Output quota for /node_test count=-1,bytes=-1
Output stat for /node_test count=4,bytes=12
[zk: 192.168.1.101:2181(CONNECTED) 30] 
</code></pre><h4 id="history__u5217_u51FA_u5DF2_u64CD_u4F5C_u7684_u6307_u4EE4_u8BB0_u5F55"><a href="#history__u5217_u51FA_u5DF2_u64CD_u4F5C_u7684_u6307_u4EE4_u8BB0_u5F55" class="headerlink" title="history 列出已操作的指令记录"></a><strong>history</strong> 列出已操作的指令记录</h4><pre><code>[zk: 192.168.1.101:2181(CONNECTED) 30] history
20 - setquota -n 2 /node_test
21 - create /node_test/node_test_1 234
22 - create /node_test/node_test_2 345
23 - create /node_test/node_test_3 456
24 - ls /node_test
25 - ls
26 - h
27 - listquota /node_test
28 - delquota -n /node_test
29 - listquota /node_test
30 - history
[zk: 192.168.1.101:2181(CONNECTED) 31] 
</code></pre><h4 id="redo_cmdno__u91CD_u65B0_u6267_u884Chistory_u4E2D_u7684_u547D_u4EE4"><a href="#redo_cmdno__u91CD_u65B0_u6267_u884Chistory_u4E2D_u7684_u547D_u4EE4" class="headerlink" title="redo cmdno 重新执行history中的命令"></a><strong>redo cmdno</strong> 重新执行history中的命令</h4><pre><code>[zk: 192.168.1.101:2181(CONNECTED) 31] redo 24
[node_test_2, node_test_3, node_test_1]
[zk: 192.168.1.101:2181(CONNECTED) 32] 
</code></pre><h4 id="connect_host_3Aport__u8FDE_u63A5_u5176_u4ED6_u670D_u52A1_u5668"><a href="#connect_host_3Aport__u8FDE_u63A5_u5176_u4ED6_u670D_u52A1_u5668" class="headerlink" title="connect host:port 连接其他服务器"></a><strong>connect host:port</strong> 连接其他服务器</h4><h4 id="close__u5173_u95EDconnect_u8FDE_u63A5_u7684_u670D_u52A1_u5668"><a href="#close__u5173_u95EDconnect_u8FDE_u63A5_u7684_u670D_u52A1_u5668" class="headerlink" title="close 关闭connect连接的服务器"></a><strong>close</strong> 关闭connect连接的服务器</h4><h4 id="quit__u9000_u51FAzookeeper_u5BA2_u6237_u7AEF_u8FDE_u63A5"><a href="#quit__u9000_u51FAzookeeper_u5BA2_u6237_u7AEF_u8FDE_u63A5" class="headerlink" title="quit 退出zookeeper客户端连接"></a><strong>quit</strong> 退出zookeeper客户端连接</h4>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="zkCli-sh"><a href="#zkCli-sh" class="headerlink" title="zkCli.sh"></a>zkCli.sh</h3><pre><code>连接zookeeper：./zkCli.sh -server ip:port

bin目录下输入命令`./zkCli.sh -server 192.168.1.101:2181`
</code></pre><h3 id="u5BA2_u6237_u7AEF_u547D_u4EE4"><a href="#u5BA2_u6237_u7AEF_u547D_u4EE4" class="headerlink" title="客户端命令"></a>客户端命令</h3><h4 id="help"><a href="#help" class="headerlink" title="help"></a><strong>help</strong></h4><pre><code>ZooKeeper -server host:port cmd args
stat path [watch]
set path data [version]
ls path [watch]
delquota [-n|-b] path
ls2 path [watch]
setAcl path acl
setquota -n|-b val path
history 
redo cmdno
printwatches on|off
delete path [version]
sync path
listquota path
rmr path
get path [watch]
create [-s] [-e] path data acl
addauth scheme auth
quit 
getAcl path
close 
connect host:port
</code></pre>]]>
    
    </summary>
    
      <category term="zookeeper" scheme="http://suqun.github.io/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[zookeeper环境搭建]]></title>
    <link href="http://suqun.github.io/2015/12/28/zookeeper%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://suqun.github.io/2015/12/28/zookeeper环境搭建/</id>
    <published>2015-12-28T14:40:00.000Z</published>
    <updated>2016-01-09T12:12:07.000Z</updated>
    <content type="html"><![CDATA[<h4 id="u96C6_u7FA4_u6A21_u5F0F_u5B89_u88C5"><a href="#u96C6_u7FA4_u6A21_u5F0F_u5B89_u88C5" class="headerlink" title="集群模式安装"></a>集群模式安装</h4><ul>
<li>设置3台CentOS虚拟机192.168.1.105/106/107 网络模式桥接</li>
<li>安装zookeeper到opt目录中<ul>
<li>cd /opt</li>
<li>wget zookeeperURL</li>
<li>tar xzvf zookeeper_3.**.gz</li>
</ul>
</li>
<li>安装JDK环境</li>
</ul>
<a id="more"></a>
<ul>
<li>配置<ul>
<li>cd zookeeper/conf/</li>
<li>cp zoo_sample.cfg zoo.cfg</li>
<li>vim zoo.cfg<ul>
<li>tickTime=2000</li>
<li>dataDir=/var/zookeeper</li>
<li>clientPort=2181</li>
<li>配置服务器 server.id=host:port:port</li>
<li>server.1=192.168.1.105:2888:3888</li>
<li>server.2=192.168.1.106:2888:3888</li>
<li>server.3=192.168.1.107:2888:3888</li>
<li>保存退出</li>
</ul>
</li>
</ul>
</li>
<li>将zoo.cfg 负责到其他2台服务器上<ul>
<li>scp zoo.cfg root@192.168.1.106:/opt/zookeeper/conf</li>
<li>scp zoo.cfg root@192.168.1.107:/opt/zookeeper/conf</li>
</ul>
</li>
<li>在var目录下创建zookeeper目录<ul>
<li>cd /var &amp;&amp; mkdir zookeeper</li>
</ul>
</li>
<li>在var/zookeeper目录下创建myid文件,内容为server.id的id值<ul>
<li>vim myid</li>
<li>1</li>
<li>wq!</li>
<li>其他2台服务器响应创建写入2，3</li>
</ul>
</li>
<li>启动zookeeper<ul>
<li>cd /opt/zookeeper</li>
<li>./zkServer.sh start</li>
<li>测试连接 telnet 192.168.105 2181 (yum install telnet)</li>
<li>stat (显示当前服务器不能对外提供服务，需要其他其他2台)</li>
</ul>
</li>
</ul>
<h4 id="u4F2A_u96C6_u7FA4_u6A21_u5F0F_u5B89_u88C5"><a href="#u4F2A_u96C6_u7FA4_u6A21_u5F0F_u5B89_u88C5" class="headerlink" title="伪集群模式安装"></a>伪集群模式安装</h4><ol>
<li><p>配置</p>
<ul>
<li>cd zookeeper/conf/</li>
<li>cp zoo_sample.cfg zk1.cfg</li>
<li>vim zk1.cfg<ul>
<li>tickTime=2000</li>
<li>dataDir=/var/zookeeper/zk1</li>
<li>clientPort=2181</li>
<li>server.1=192.168.1.105:2888:3888</li>
<li>server.2=192.168.1.105:2889:3889</li>
<li>server.3=192.168.1.105:2890:3890</li>
</ul>
</li>
<li>cp zk1.cfg zk2.cfg<ul>
<li>tickTime=2000</li>
<li>dataDir=/var/zookeeper/zk2</li>
<li>clientPort=2182</li>
<li>server.1=192.168.1.105:2888:3888</li>
<li>server.2=192.168.1.105:2889:3889</li>
<li>server.3=192.168.1.105:2890:3890</li>
</ul>
</li>
<li>cp zk1.cfg zk3.cfg<ul>
<li>tickTime=2000</li>
<li>dataDir=/var/zookeeper/zk3</li>
<li>clientPort=2183</li>
<li>server.1=192.168.1.105:2888:3888</li>
<li>server.2=192.168.1.105:2889:3889</li>
<li>server.3=192.168.1.105:2890:3890</li>
</ul>
</li>
<li>在var/zookeeper/zk1(zk2,zk3)目录下创建myid文件,内容为server.id的id值<ul>
<li>vim myid</li>
<li>1</li>
<li>wq!</li>
</ul>
</li>
</ul>
</li>
<li><p>启动zookeeper</p>
<ul>
<li>cd /opt/zookeeper</li>
<li>./zkServer.sh start zk1.cfg</li>
<li>./zkServer.sh start zk2.cfg</li>
<li>./zkServer.sh start zk3.cfg</li>
<li>查看节点状态<ul>
<li>./zkServer.sh status zk1.cfg</li>
<li>./zkServer.sh status zk2.cfg </li>
<li>./zkServer.sh status zk3.cfg </li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="u5355_u673A_u6A21_u5F0F_u5B89_u88C5"><a href="#u5355_u673A_u6A21_u5F0F_u5B89_u88C5" class="headerlink" title="单机模式安装"></a>单机模式安装</h4><ul>
<li>保留一台服务器，其他同集群安装配置<ul>
<li>server.1=192.168.1.105:2888:3888</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="u96C6_u7FA4_u6A21_u5F0F_u5B89_u88C5"><a href="#u96C6_u7FA4_u6A21_u5F0F_u5B89_u88C5" class="headerlink" title="集群模式安装"></a>集群模式安装</h4><ul>
<li>设置3台CentOS虚拟机192.168.1.105/106/107 网络模式桥接</li>
<li>安装zookeeper到opt目录中<ul>
<li>cd /opt</li>
<li>wget zookeeperURL</li>
<li>tar xzvf zookeeper_3.**.gz</li>
</ul>
</li>
<li>安装JDK环境</li>
</ul>]]>
    
    </summary>
    
      <category term="zookeeper" scheme="http://suqun.github.io/tags/zookeeper/"/>
    
      <category term="分布式" scheme="http://suqun.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[zookeeper概述]]></title>
    <link href="http://suqun.github.io/2015/12/27/zookeeper%E6%A6%82%E8%BF%B0/"/>
    <id>http://suqun.github.io/2015/12/27/zookeeper概述/</id>
    <published>2015-12-27T13:22:49.000Z</published>
    <updated>2016-01-09T12:11:57.000Z</updated>
    <content type="html"><![CDATA[<h4 id="zookeeper_u662F_u4EC0_u4E48"><a href="#zookeeper_u662F_u4EC0_u4E48" class="headerlink" title="zookeeper是什么"></a>zookeeper是什么</h4><p>zookeeper是源代码开放的<strong>分布式协调服务</strong> ，由雅虎创建，是Google<br>Chubby的开源实现。zookeeper是一个高性能的<strong>分布式数据一致性解决方案</strong> ，它将那些复杂的、容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并提供一系列简单易用的接口给用户使用</p>
<p>zookeeper 从设计模式角度来看，是一个<strong>基于观察者模式设计的分布式服务管理框架</strong>，它负责存储和管理大家都关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化，zookeeper 就将负责通知已经在 zookeeper 上注册的那些观察者做出相应的反应，从而实现集群中类似 Master/Slave 管理模式</p>
<a id="more"></a>
<h6 id="u77E5_u8BC6_u8981_u70B9"><a href="#u77E5_u8BC6_u8981_u70B9" class="headerlink" title="知识要点"></a>知识要点</h6><ul>
<li>源代码开放</li>
<li>分布式协调服务，解决分布式数据一致性问题<ul>
<li>顺序一致性</li>
<li>原子性</li>
<li>单一视图</li>
<li>可靠性</li>
<li>实时性</li>
</ul>
</li>
<li>高性能</li>
<li>通过调用zookeeper提供的接口来解决一些分布式应用中的实际问题</li>
</ul>
<h4 id="zookeeper_u7684_u5178_u578B_u5E94_u7528_u573A_u666F"><a href="#zookeeper_u7684_u5178_u578B_u5E94_u7528_u573A_u666F" class="headerlink" title="zookeeper的典型应用场景"></a>zookeeper的典型应用场景</h4><ul>
<li><p>数据发布/订阅</p>
<p>  <em>数据发布/订阅</em> 顾名思义就是一方把数据发布出来，另一方通过某种手段可以得到这些数据。通常数据订阅有两种方式：推模式和拉模式；<em>推模式</em>一般是服务器主动向客户端推送信息，<em>拉模式</em>是客户端主动去服务器获取数据（通常是采用定时轮询的方式）</p>
<p>  ZK采用两种方式相结合</p>
<p>  发布者将数据发布到ZK集群节点上，订阅者通过一定的方法告诉服务器，我对哪个节点的数据感兴趣，那服务器在这些节点的数据发生变化时，就通知客户端，客户端得到通知后可以去服务器获取数据信息</p>
</li>
<li><p>分布式协调/通知</p>
<ul>
<li><p>心跳检测</p>
<p>  在分布式系统中，我们常常需要知道某个机器是否可用，传统的开发中，可以通过Ping某个主机来实现，Ping得通说明对方是可用的，相反是不可用的，ZK 中我们让所有的机其都注册一个临时节点，我们判断一个机器是否可用，我们只需要判断这个节点在ZK中是否存在就可以了，不需要直接去连接需要检查的机器 ，降低系统的复杂度 </p>
</li>
</ul>
</li>
<li><p>统一命名服务（Name Service）</p>
<p>  分布式应用中，通常需要有一套完整的命名规则，既能够产生唯一的名称又便于人识别和记住，通常情况下用树形的名称结构是一个理想的选择，树形的名称结构是一个有层次的目录结构，既对人友好又不会重复。说到这里你可能想到了 JNDI，没错 zookeeper 的 Name Service 与 JNDI 能够完成的功能是差不多的，它们都是将有层次的目录结构关联到一定资源上，但是 zookeeper 的 Name Service 更加是广泛意义上的关联，也许你并不需要将名称关联到特定资源上，你可能只需要一个不会重复名称，就像数据库中产生一个唯一的数字主键一样。</p>
<p>  例如数据库表格ID，一般用得比较多的有两种ID，一种是自动增长的ID，一种是UUID(9291d71a-0354-4d8e-acd8-64f7393c64ae)，两种ID各自都有缺陷，自动增长的ID局限在单库单表中使用，不能在分布式中使用，UUID可以在分布式中使用但是由于ID没有规律难于理解，我们可以借用ZK来生成一个顺序增长的，可以在集群环境下使用的，命名易于理解的ID</p>
<p>  Name Service 已经是 zookeeper 内置的功能，你只要调用 zookeeper 的 API 就能实现。如调用 create 接口就可以很容易创建一个目录节点。</p>
</li>
<li><p>配置管理（Configuration Management）</p>
<p>  配置的管理在分布式应用环境中很常见，例如同一个应用系统需要多台 PC Server 运行，但是它们运行的应用系统的某些配置项是相同的，如果要修改这些相同的配置项，那么就必须同时修改每台运行这个应用系统的 PC Server，这样非常麻烦而且容易出错。<br>  像这样的配置信息完全可以交给 zookeeper 来管理，将配置信息保存在 zookeeper 的某个目录节点中，然后将所有需要修改的应用机器监控配置信息的状态，一旦配置信息发生变化，每台应用机器就会收到 zookeeper 的通知，然后从 zookeeper 获取新的配置信息应用到系统中。</p>
<p>  <img src="http://7xpk5e.com1.z0.glb.clouddn.com/configuration.gif" alt="配置管理结构图" title="配置管理结构图"></p>
</li>
<li><p>集群管理（Group Membership）</p>
<p>  zookeeper 能够很容易的实现集群管理的功能，如有多台 Server 组成一个服务集群，那么必须要一个“总管”知道当前集群中每台机器的服务状态，一旦有机器不能提供服务，集群中其它集群必须知道，从而做出调整重新分配服务策略。同样当增加集群的服务能力时，就会增加一台或多台 Server，同样也必须让“总管”知道。</p>
<p>  zookeeper 不仅能够帮你维护当前的集群中机器的服务状态，而且能够帮你选出一个“总管”，让这个总管来管理集群，这就是 zookeeper 的另一个功能 Leader Election。</p>
</li>
<li><p>分布式锁</p>
<p>  共享锁在同一个进程中很容易实现，但是在跨进程或者在不同 Server之间就不好实现了。zookeeper 却很容易实现这个功能</p>
</li>
<li><p>队列管理</p>
<p>  zookeeper 可以处理两种类型的队列：</p>
<ol>
<li>当一个队列的成员都聚齐时，这个队列才可用，否则一直等待所有成员到达，这种是同步队列。</li>
<li>队列按照 FIFO 方式进行入队和出队操作，例如实现生产者和消费者模型。</li>
</ol>
</li>
</ul>
<h2 id="u57FA_u672C_u6982_u5FF5"><a href="#u57FA_u672C_u6982_u5FF5" class="headerlink" title="基本概念"></a>基本概念</h2><h4 id="u96C6_u7FA4_u89D2_u8272"><a href="#u96C6_u7FA4_u89D2_u8272" class="headerlink" title="集群角色"></a>集群角色</h4><p>Leader，Follower，Observer</p>
<p>Leader服务器是整个zookeeper集群工作机制中的核心 </p>
<p>Follower服务器是zookeeper集群状态的跟随者</p>
<p>Observer服务器充当一个观察者的角色</p>
<h4 id="u4F1A_u8BDD"><a href="#u4F1A_u8BDD" class="headerlink" title="会话"></a>会话</h4><p>会话是指客户端和zookeeper服务器的连接，zookeeper中的会话叫Session，客户端靠与服务器建立一个TCP的长连接</p>
<p>来维持一个Session,客户端在启动的时候首先会与服务器建立一个TCP连接，通过这个连接，客户端能够通过心跳检测与服务器保持有效的会话，也能向ZK服务器发送请求并获得响应</p>
<h4 id="u6570_u636E_u6A21_u578B"><a href="#u6570_u636E_u6A21_u578B" class="headerlink" title="数据模型"></a>数据模型</h4><p>zookeeper 会维护一个具有层次关系的数据结构，它非常类似于一个标准的文件系统</p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/znode.gif" alt="数据模型" title="数据模型"></p>
<p>zookeeper 这种数据结构有如下这些特点：</p>
<ol>
<li>每个子目录项如 NameService 都被称作为 znode，这个 znode 是被它所在的路径唯一标识，如 Server1 这个 znode 的标识为 /NameService/Server1</li>
<li>znode 可以有子节点目录，并且每个 znode 可以存储数据，注意 EPHEMERAL 类型的目录节点不能有子节点目录</li>
<li>znode 是有版本的，每个 znode 中存储的数据可以有多个版本，也就是一个访问路径中可以存储多份数据</li>
<li>znode 可以是临时节点，一旦创建这个 znode 的客户端与服务器失去联系，这个 znode 也将自动删除，zookeeper 的客户端和服务器通信采用长连接方式，每个客户端和服务器通过心跳来保持连接，这个连接状态称为 session，如果 znode 是临时节点，这个 session 失效，znode 也就删除了</li>
<li>znode 的目录名可以自动编号，如 App1 已经存在，再创建的话，将会自动命名为 App2</li>
<li>znode 可以被监控，包括这个目录节点中存储的数据的修改，子节点目录的变化等，一旦变化可以通知设置监控的客户端，这个是 zookeeper 的核心特性，zookeeper 的很多功能都是基于这个特性实现的，后面在典型的应用场景中会有实例介绍</li>
</ol>
<h4 id="u7248_u672C"><a href="#u7248_u672C" class="headerlink" title="版本"></a>版本</h4><p>version 当前数据节点数据内容的版本号</p>
<p>cversion 当前数据节点子节点的版本号</p>
<p>aversion 当前数据节点ACL变更版本号</p>
<h4 id="ACL_u6743_u9650_u63A7_u5236"><a href="#ACL_u6743_u9650_u63A7_u5236" class="headerlink" title="ACL权限控制"></a>ACL权限控制</h4><p>ACL是Access Control Lists 的简写， zookeeper采用ACL策略来进行权限控制，有以下权限：</p>
<p>CREATE:创建子节点的权限</p>
<p>READ:获取节点数据和子节点列表的权限</p>
<p>WRITE:更新节点数据的权限</p>
<p>DELETE:删除子节点的权限</p>
<p>ADMIN:设置节点ACL的权限</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="zookeeper_u662F_u4EC0_u4E48"><a href="#zookeeper_u662F_u4EC0_u4E48" class="headerlink" title="zookeeper是什么"></a>zookeeper是什么</h4><p>zookeeper是源代码开放的<strong>分布式协调服务</strong> ，由雅虎创建，是Google<br>Chubby的开源实现。zookeeper是一个高性能的<strong>分布式数据一致性解决方案</strong> ，它将那些复杂的、容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并提供一系列简单易用的接口给用户使用</p>
<p>zookeeper 从设计模式角度来看，是一个<strong>基于观察者模式设计的分布式服务管理框架</strong>，它负责存储和管理大家都关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化，zookeeper 就将负责通知已经在 zookeeper 上注册的那些观察者做出相应的反应，从而实现集群中类似 Master/Slave 管理模式</p>]]>
    
    </summary>
    
      <category term="zookeeper" scheme="http://suqun.github.io/tags/zookeeper/"/>
    
      <category term="分布式" scheme="http://suqun.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
</feed>
