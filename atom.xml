<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[入耳箸心]]></title>
  <subtitle><![CDATA[成长路上的点滴记录]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://suqun.github.io/"/>
  <updated>2016-11-27T13:13:36.000Z</updated>
  <id>http://suqun.github.io/</id>
  
  <author>
    <name><![CDATA[Larry]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Java-NIO-SocketChannel]]></title>
    <link href="http://suqun.github.io/2016/11/27/Java-NIO-SocketChannel/"/>
    <id>http://suqun.github.io/2016/11/27/Java-NIO-SocketChannel/</id>
    <published>2016-11-27T13:12:38.000Z</published>
    <updated>2016-11-27T13:13:36.000Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="http://tutorials.jenkov.com/java-nio/socketchannel.html" target="_blank" rel="external">http://tutorials.jenkov.com/java-nio/socketchannel.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="http://tutorials.jenkov.com/java-nio/socketchannel.html" target="_blank" rel="external">http://tutorials.jenkov.com/java-nio/]]>
    </summary>
    
      <category term="Java NIO" scheme="http://suqun.github.io/tags/Java-NIO/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java NIO FileChannel]]></title>
    <link href="http://suqun.github.io/2016/11/22/Java-NIO-FileChannel/"/>
    <id>http://suqun.github.io/2016/11/22/Java-NIO-FileChannel/</id>
    <published>2016-11-21T16:14:33.000Z</published>
    <updated>2016-11-27T13:11:40.000Z</updated>
    <content type="html"><![CDATA[<p>原文：[<a href="http://tutorials.jenkov.com/java-nio/file-channel.html]{http://tutorials.jenkov.com/java-nio/file-channel.html}" target="_blank" rel="external">http://tutorials.jenkov.com/java-nio/file-channel.html]{http://tutorials.jenkov.com/java-nio/file-channel.html}</a></p>
<p>Java NIO中的FileChannel是一个连接文件的channel，可以使用它从文件中读取数据或向文件中写入数据。Java NIO的FileChannel是NIO的一个选择相对标准的Java IO API来说。</p>
<p>FileChannel可以设置成非阻塞模式，但是仍然会按照阻塞模式运行。</p>
<h2 id="u6253_u5F00FileChannel"><a href="#u6253_u5F00FileChannel" class="headerlink" title="打开FileChannel"></a>打开FileChannel</h2><p>在使用FileChannel时需要先打开它，但是不能直接打开。需要借助InputStream,OutputStream或者是RandomAccessFile。</p>
<p>举个🌰： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile aFile     = <span class="keyword">new</span> RandomAccessFile(<span class="string">"data/nio-data.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">FileChannel      inChannel = aFile.getChannel();</span><br></pre></td></tr></table></figure>
<h2 id="u4ECEFileChannel_u8BFB_u6570_u636E"><a href="#u4ECEFileChannel_u8BFB_u6570_u636E" class="headerlink" title="从FileChannel读数据"></a>从FileChannel读数据</h2><p>从FileChannel读数据可以调用<code>read()</code>方法。</p>
<p>举个🌰：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> bytesRead = inChannel.read(buf);</span><br></pre></td></tr></table></figure>
<p>首先给Buffer分配字节， FileChannel中的数据就是读到Buffer中。</p>
<p>其次，再调用<code>FileChannel.read()</code>方法。从FileChannel中将数据读入buffer。read()的整型返回值告诉我们已经写入Buffer的字节量。如果返回<code>-1</code>,就是读到了文件的结尾。</p>
<h2 id="FileChannel_u5199_u5165_u6570_u636E"><a href="#FileChannel_u5199_u5165_u6570_u636E" class="headerlink" title="FileChannel写入数据"></a>FileChannel写入数据</h2><p>Writing data to a FileChannel is done using the FileChannel.write() method, which takes a Buffer as parameter. Here is an example:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String newData = <span class="string">"New String to write to file..."</span> + System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line">buf.clear();</span><br><span class="line">buf.put(newData.getBytes());</span><br><span class="line"></span><br><span class="line">buf.flip();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(buf.hasRemaining()) &#123;</span><br><span class="line">    channel.write(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Notice how the FileChannel.write() method is called inside a while-loop. There is no guarantee of how many bytes the write() method writes to the FileChannel. Therefore we repeat the write() call until the Buffer has no further bytes to write.</p>
<h2 id="u5173_u95EDFileChannel"><a href="#u5173_u95EDFileChannel" class="headerlink" title="关闭FileChannel"></a>关闭FileChannel</h2><p>When you are done using a FileChannel you must close it. Here is how that is done:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.close();</span><br></pre></td></tr></table></figure>
<h2 id="FileChannel_Position"><a href="#FileChannel_Position" class="headerlink" title="FileChannel Position"></a>FileChannel Position</h2><p>When reading or writing to a FileChannel you do so at a specific position. You can obtain the current position of the FileChannel object by calling the position() method.</p>
<p>You can also set the position of the FileChannel by calling the position(long pos) method.</p>
<p>Here are two examples:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> pos channel.position();</span><br><span class="line"></span><br><span class="line">channel.position(pos +<span class="number">123</span>);</span><br></pre></td></tr></table></figure>
<p>If you set the position after the end of the file, and try to read from the channel, you will get -1 - the end-of-file marker.</p>
<p>If you set the position after the end of the file, and write to the channel, the file will be expanded to fit the position and written data. This may result in a “file hole”, where the physical file on the disk has gaps in the written data.</p>
<h2 id="FileChannel_Size"><a href="#FileChannel_Size" class="headerlink" title="FileChannel Size"></a>FileChannel Size</h2><p>The size() method of the FileChannel object returns the file size of the file the channel is connected to. Here is a simple example:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> fileSize = channel.size();</span><br></pre></td></tr></table></figure>
<h2 id="FileChannel_Truncate"><a href="#FileChannel_Truncate" class="headerlink" title="FileChannel Truncate"></a>FileChannel Truncate</h2><p>You can truncate a file by calling the FileChannel.truncate() method. When you truncate a file, you cut it off at a given length. Here is an example:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.truncate(<span class="number">1024</span>);</span><br></pre></td></tr></table></figure>
<p>This example truncates the file at 1024 bytes in length.</p>
<h2 id="FileChannel_Force"><a href="#FileChannel_Force" class="headerlink" title="FileChannel Force"></a>FileChannel Force</h2><p>The FileChannel.force() method flushes all unwritten data from the channel to the disk. An operating system may cache data in memory for performance reasons, so you are not guaranteed that data written to the channel is actually written to disk, until you call the force() method.</p>
<p>The force() method takes a boolean as parameter, telling whether the file meta data (permission etc.) should be flushed too.</p>
<p>Here is an example which flushes both data and meta data:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.force(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：[<a href="http://tutorials.jenkov.com/java-nio/file-channel.html]{http://tutorials.jenkov.com/java-nio/file-channel.html}" target="_bl]]>
    </summary>
    
      <category term="Java NIO" scheme="http://suqun.github.io/tags/Java-NIO/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java NIO Selector]]></title>
    <link href="http://suqun.github.io/2016/11/16/Java-NIO-Selector/"/>
    <id>http://suqun.github.io/2016/11/16/Java-NIO-Selector/</id>
    <published>2016-11-16T14:27:08.000Z</published>
    <updated>2016-11-21T16:10:19.000Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="http://tutorials.jenkov.com/java-nio/selectors.html" target="_blank" rel="external">http://tutorials.jenkov.com/java-nio/selectors.html</a></p>
<p><code>Selector</code>是Java NIO中用来检查一个或多个NIO通道的，决定哪个通道做好准备进行读写的组件。这样，一个单线程就可以管理多个通道，以便管理多个网络连接。</p>
<h2 id="u4E3A_u4F55_u4F7F_u7528Selector_3F"><a href="#u4E3A_u4F55_u4F7F_u7528Selector_3F" class="headerlink" title="为何使用Selector?"></a>为何使用Selector?</h2><p>使用单线程处理多通道的好处就是可以使用更少的线程处理多个通道。实际上可以使用只用一个线程处理多个通道。在操作系统中，线程切换开销很大。每个线程都会占用一些资源（内存）。因此，线程越少越好。</p>
<p>但是，当前操作系统和CPU多任务处理上已经非常好，多线程的开销已经变得很小了。如果一个CPU有多个内核，不使用多任务可能是在浪费CPU能力。不管怎么说，关于那种设计的讨论应该放在另一篇不同的文章中。在这里，只要知道使用Selector能够处理多个通道就足够了。</p>
<p>使用一个Selector处理3个channel的图解如下：</p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/JavaNIOSelectors.png" alt="
Java NIO: A Thread uses a Selector to handle 3 Channel&#39;s"></p>
<h2 id="Selector_u7684_u521B_u5EFA"><a href="#Selector_u7684_u521B_u5EFA" class="headerlink" title="Selector的创建"></a>Selector的创建</h2><p>调用<code>Selector.open()</code>方法创建一个selector。像这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Selector selector = Selector.open();</span><br></pre></td></tr></table></figure>
<h2 id="Channel_u6CE8_u518C_u5230Selector_u4E0A"><a href="#Channel_u6CE8_u518C_u5230Selector_u4E0A" class="headerlink" title="Channel注册到Selector上"></a>Channel注册到Selector上</h2><p>为了结合Selector使用Channel，首先要将Channel注册到Selector上。通过方法<code>SelectableChannel.register()</code>实现:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">channel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">SelectionKey key = channel.register(selector, SelectionKey.OP_READ);</span><br></pre></td></tr></table></figure>
<p>结合Selector使用时，Channel必须是非阻塞师的。这就意味着，你不能把FileChannel和Selector结合使用，因为FileChannel不能切换到非阻塞模式。Socket Channel确可以很好的结合Selector使用。</p>
<p><code>register()</code>方法的第二个参数需要注意下。这是个有趣的设置，意思是在通过Selector监听Channel时刚兴趣的事件。可以监听到以下四种事件：</p>
<ul>
<li>Connect</li>
<li>Accept</li>
<li>Read</li>
<li>Write</li>
</ul>
<p>一个channel触发了事件就是意味着该事件已就绪。因此，channel连接服务成功就是<code>Connect</code>就绪。服务socke channel准备接受进入的连接就是<code>Accept</code>就绪。服务socket channel已经准备好了可以读取的数据就是<code>Read</code>就绪。channel准备好可以写入数据就是<code>Write</code>就绪。</p>
<p>这四种事件用SelectionKey的常量表示： </p>
<ul>
<li>SelectionKey.OP_CONNECT</li>
<li>SelectionKey.OP_ACCEPT</li>
<li>SelectionKey.OP_READ</li>
<li>SelectionKey.OP_WRITE</li>
</ul>
<p>如果对多个事件感兴趣，那么可以用“位或”操作符将常量连接起来，像这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> interestSet = SelectionKey.OP_READ | SelectionKey.OP_WRITE;</span><br></pre></td></tr></table></figure>
<p>下面还会继续提到interest集合。</p>
<h2 id="SelectionKey"><a href="#SelectionKey" class="headerlink" title="SelectionKey"></a>SelectionKey</h2><p>通过前面示例可以看到，调用<code>register()</code>方法向selector上注册channel时返回<code>SelectionKey</code>对象。这个<code>SelectionKey</code>对象中包含很多有趣的属性。</p>
<ul>
<li>interest集合</li>
<li>ready 集合</li>
<li>Channel</li>
<li>Selector</li>
<li>附加对象（可选）</li>
</ul>
<p>下面会描述这些属性。</p>
<h3 id="Interest_u96C6_u5408"><a href="#Interest_u96C6_u5408" class="headerlink" title="Interest集合"></a>Interest集合</h3><p>就像向Selector注册通道一节中所描述的，interest集合是你所选择的感兴趣的事件集合。通过SelectionKey可以读写interest集合。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> interestSet = selectionKey.interestOps();</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> isInterestedInAccept  = interestSet &amp; SelectionKey.OP_ACCEPT;</span><br><span class="line"><span class="keyword">boolean</span> isInterestedInConnect = interestSet &amp; SelectionKey.OP_CONNECT;</span><br><span class="line"><span class="keyword">boolean</span> isInterestedInRead    = interestSet &amp; SelectionKey.OP_READ;</span><br><span class="line"><span class="keyword">boolean</span> isInterestedInWrite   = interestSet &amp; SelectionKey.OP_WRITE;</span><br></pre></td></tr></table></figure>
<p>可以看到，使用『位与』操作interest集合和给定的的SelectionKey常量，可以确定某个确定的世界是否在interest集合中。</p>
<h3 id="Ready_u96C6_u5408"><a href="#Ready_u96C6_u5408" class="headerlink" title="Ready集合"></a>Ready集合</h3><p>ready集合是channel已经准备就绪的channel集合。在一次<code>selection</code>以后，可以先获得ready集合。至于<code>selecton</code>，会再下面的章节解释。可以这样获取ready集合：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> readySet = selectionKey.readyOps();</span><br></pre></td></tr></table></figure>
<p>可以用像检测interest集合那样的方法，来检测channel中什么事件或操作已经就绪。但是，也可以使用以下四个方法，它们都会返回一个布尔类型：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">selectionKey.isAcceptable();</span><br><span class="line">selectionKey.isConnectable();</span><br><span class="line">selectionKey.isReadable();</span><br><span class="line">selectionKey.isWritable();</span><br></pre></td></tr></table></figure>
<h3 id="Channel_+_Selector"><a href="#Channel_+_Selector" class="headerlink" title="Channel + Selector"></a>Channel + Selector</h3><p>Accessing the channel + selector from the SelectionKey is trivial. Here is how it’s done:<br>从SelectionKey中获得channel和selector很简单，像这样就好:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Channel  channel  = selectionKey.channel();</span><br><span class="line">Selector selector = selectionKey.selector();</span><br></pre></td></tr></table></figure>
<h3 id="u9644_u52A0_u5BF9_u8C61"><a href="#u9644_u52A0_u5BF9_u8C61" class="headerlink" title="附加对象"></a>附加对象</h3><p>可以将一个对象附加到SelectionKey上。这是个识别给定的channel的简便方法，还可以附加更多信息上去。比如，附加个与channel一起使用的buffer，或者聚合更多数据的对象。例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">selectionKey.attach(theObject);</span><br><span class="line">Object attachedObj = selectionKey.attachment();</span><br></pre></td></tr></table></figure>
<p>也可以在注册时附加对象，像这样： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SelectionKey key = channel.register(selector, SelectionKey.OP_READ, theObject);</span><br></pre></td></tr></table></figure>
<h2 id="u901A_u8FC7Selector_u9009_u62E9Channel"><a href="#u901A_u8FC7Selector_u9009_u62E9Channel" class="headerlink" title="通过Selector选择Channel"></a>通过Selector选择Channel</h2><p>一旦向Selector注册了一个或多个channel，就可以调用任一<code>select()</code>方法。这些方法返回那些注册时感兴趣事件（connect，accept，read 或者 write）的channel。<br>也就是说，如果感兴趣的channel已对读数据做好准备，那么在调用<code>select()</code>方法以后，就会返回对读就绪的channel。</p>
<p>select方法有以下几种:</p>
<ol>
<li><code>int select()</code></li>
<li><code>int select(long timeout)</code></li>
<li><code>int selectNow()</code></li>
</ol>
<p><code>select()</code> 阻塞直到至少一个channel已经对监听事件做好准备。</p>
<p><code>select(long timeout)</code> 和<code>select()</code>一样，除了最长会阻塞timeout毫秒(参数)。</p>
<p><code>selectNow()</code> 不会阻塞，无论channel有没有准备好都会直接返回。（没有准备好的直接返回0）</p>
<p>select()方法返回的int值表示有多少通道已经就绪。亦即，自上次调用select()方法后有多少通道变成就绪状态。如果调用select()方法，因为有一个通道变成就绪状态，返回了1，若再次调用select()方法，如果另一个通道就绪了，它会再次返回1。如果对第一个就绪的channel没有做任何操作，现在就有两个就绪的通道，但在每次select()方法调用之间，只有一个通道就绪了。</p>
<h3 id="selectedKeys_28_29"><a href="#selectedKeys_28_29" class="headerlink" title="selectedKeys()"></a>selectedKeys()</h3><p>调用select()方法后，一旦其返回值表明一个或多个channel就绪，就可以通过<code>selectedKeys()</code>方法访问『selected key set』（已选择键集）中的就绪channel。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();</span><br></pre></td></tr></table></figure>
<p>调用<code>Channel.register()</code>向selector注册channel以后返回<code>SelectionKey</code>对象。这个对象就代表了注册到selector的channel。可以通过SelectionKey对象的<code>electedKeySet()</code>方法获得这些对象。</p>
<p>遍历已选择的键集获得就绪的channel： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();</span><br><span class="line"></span><br><span class="line">Iterator&lt;SelectionKey&gt; keyIterator = selectedKeys.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(keyIterator.hasNext()) &#123;</span><br><span class="line">    </span><br><span class="line">    SelectionKey key = keyIterator.next();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(key.isAcceptable()) &#123;</span><br><span class="line">        <span class="comment">// a connection was accepted by a ServerSocketChannel.</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isConnectable()) &#123;</span><br><span class="line">        <span class="comment">// a connection was established with a remote server.</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">        <span class="comment">// a channel is ready for reading</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isWritable()) &#123;</span><br><span class="line">        <span class="comment">// a channel is ready for writing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    keyIterator.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个循环遍历已选择键集中的每个键，并检测各个键所对应的通道的就绪事件。</p>
<p>注意在每次遍历后调用<code>keyIterator.remove()</code>方法。Selector不会从已选择键集中自动删除SelectionKey的实例。在处理完channel后必须调用此方法。下次channel会准备好，Selector将其重新添加到已选择的键集中。 （原文：Notice the keyIterator.remove() call at the end of each iteration. The Selector does not remove the SelectionKey instances from the selected key set itself. You have to do this, when you are done processing the channel. The next time the channel becomes “ready” the Selector will add it to the selected key set again.）</p>
<p>调用<code>SelectionKey.channel()</code>方法会返回需要处理的channel。比如ServerSocketChannel或者SocketChannel等。</p>
<h3 id="wakeUp_28_29_u65B9_u6CD5"><a href="#wakeUp_28_29_u65B9_u6CD5" class="headerlink" title="wakeUp()方法"></a>wakeUp()方法</h3><p>某个线程调用select()方法以后会被阻塞，即使没有就绪的channel，也可以使其从select()方法返回。只要让其它线程在第一个线程调用select()方法的那个对象上调用Selector.wakeup()方法即可。阻塞在select()方法上的线程会立马返回。</p>
<p>如果有其它线程调用了wakeup()方法，但当前没有线程阻塞在select()方法上，下个调用select()方法的线程会立即“醒来（wake up）”。</p>
<h3 id="close_28_29_u65B9_u6CD5"><a href="#close_28_29_u65B9_u6CD5" class="headerlink" title="close()方法"></a>close()方法</h3><p>用完Selector后调用其close()方法会关闭该Selector，且使注册到该Selector上的所有SelectionKey实例无效。通道本身并不会关闭。</p>
<h2 id="u5B8C_u6574_u7684Selector_u793A_u4F8B"><a href="#u5B8C_u6574_u7684Selector_u793A_u4F8B" class="headerlink" title="完整的Selector示例"></a>完整的Selector示例</h2><p>下面是一个完整的selector例子，open,register,监听等</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line">channel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">SelectionKey key = channel.register(selector, SelectionKey.OP_READ);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> readyChannels = selector.select();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(readyChannels == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();</span><br><span class="line"></span><br><span class="line">  Iterator&lt;SelectionKey&gt; keyIterator = selectedKeys.iterator();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(keyIterator.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">    SelectionKey key = keyIterator.next();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(key.isAcceptable()) &#123;</span><br><span class="line">        <span class="comment">// a connection was accepted by a ServerSocketChannel.</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isConnectable()) &#123;</span><br><span class="line">        <span class="comment">// a connection was established with a remote server.</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">        <span class="comment">// a channel is ready for reading</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isWritable()) &#123;</span><br><span class="line">        <span class="comment">// a channel is ready for writing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    keyIterator.remove();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="http://tutorials.jenkov.com/java-nio/selectors.html" target="_blank" rel="external">http://tutorials.jenkov.com/java-nio/sele]]>
    </summary>
    
      <category term="Java NIO" scheme="http://suqun.github.io/tags/Java-NIO/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java NIO Channel之间的数据传输]]></title>
    <link href="http://suqun.github.io/2016/11/10/Java-NIO-Channel-to-Channel-Transfers/"/>
    <id>http://suqun.github.io/2016/11/10/Java-NIO-Channel-to-Channel-Transfers/</id>
    <published>2016-11-10T03:05:11.000Z</published>
    <updated>2016-11-16T14:24:36.000Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="http://tutorials.jenkov.com/java-nio/channel-to-channel-transfers.html" target="_blank" rel="external">http://tutorials.jenkov.com/java-nio/channel-to-channel-transfers.html</a></p>
<p>在Java NIO 中channel之间可以直接相互传输。比如一个FileChannel类型的channel，FileChannel类提供<code>transferTo()</code>和<code>transferFrom()</code>两个方法做这个事情。</p>
<h2 id="transferFrom_28_29"><a href="#transferFrom_28_29" class="headerlink" title="transferFrom()"></a>transferFrom()</h2><p><code>FileChannel.transferFrom()</code>方法将一个channel的数据传入FileChannel。</p>
<p>代码🌰：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile fromFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"fromFile.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">FileChannel      fromChannel = fromFile.getChannel();</span><br><span class="line"></span><br><span class="line">RandomAccessFile toFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"toFile.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">FileChannel      toChannel = toFile.getChannel();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> position = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> count    = fromChannel.size();</span><br><span class="line"></span><br><span class="line">toChannel.transferFrom(fromChannel, position, count);</span><br></pre></td></tr></table></figure>
<p>position参数确定目标文件的传输初始位置，count参数确定传输的最大数量。channel中的字节数若是少于count，就读取全部字节。<br>另外，SocketChannel传输的是其内部此时此处的就绪的数据（SocketChannel后续可能还会有更多的可用数据）。因此，从SocketChannel传输数据时，有可能不能把全部的请求数据（不足count的数据）都传入FileChannel中。</p>
<h2 id="transferTo_28_29"><a href="#transferTo_28_29" class="headerlink" title="transferTo()"></a>transferTo()</h2><p><code>transferTo()</code>方法将FileChannel数据传入其他的channel中。</p>
<p>代码🌰：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile fromFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"fromFile.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">FileChannel      fromChannel = fromFile.getChannel();</span><br><span class="line"></span><br><span class="line">RandomAccessFile toFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"toFile.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">FileChannel      toChannel = toFile.getChannel();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> position = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> count    = fromChannel.size();</span><br><span class="line"></span><br><span class="line">fromChannel.transferTo(position, count, toChannel);</span><br></pre></td></tr></table></figure>
<p>和上面的例子很相似。区别在于调用方法的FileChannel对象不一样。</p>
<p>关于SocketChannel的问题在transferTo()方法中同样存在。SocketChannel会一直传输数据直到目标buffer被填满。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="http://tutorials.jenkov.com/java-nio/channel-to-channel-transfers.html" target="_blank" rel="external">http://tutorials.jenko]]>
    </summary>
    
      <category term="Java NIO" scheme="http://suqun.github.io/tags/Java-NIO/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java NIO Scatter / Gather]]></title>
    <link href="http://suqun.github.io/2016/11/09/Java-NIO-Scatter-Gather/"/>
    <id>http://suqun.github.io/2016/11/09/Java-NIO-Scatter-Gather/</id>
    <published>2016-11-09T15:09:19.000Z</published>
    <updated>2016-11-10T03:11:19.000Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="http://tutorials.jenkov.com/java-nio/scatter-gather.html" target="_blank" rel="external">http://tutorials.jenkov.com/java-nio/scatter-gather.html</a></p>
<p>Java NIO 从一开始就内嵌了scatter/gather的支持。scatter/gather是从channel中读取写入的操作概念。</p>
<p><strong>scatter</strong>：从channel中将数据读到多个buffers中的操作。也就是说，channel的分散器将channel中的数据分散到多个buffers。</p>
<p><strong>gather</strong>：将多个buffers中的数据写入一个channel中的操作。也就是说，channel的收集器，将多个buffers中的数据收集到channel中。</p>
<p>scatter/gatter经常用于需要将传输的数据分开处理的场合。比如，一个信息包含head和body，你可能会将消息体和消息头分散到不同的buffer中，这样你可以方便的处理消息头和消息体。</p>
<h2 id="Scattering_Reads"><a href="#Scattering_Reads" class="headerlink" title="Scattering Reads"></a>Scattering Reads</h2><p>Scattering Reads，将单个channel中的数据读到多个buffers中，下面是原理图示： </p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/java-nio-scatter-read.png" alt="java-nio-scatter-read"></p>
<p>代码🌰：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer header = ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line">ByteBuffer body   = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">ByteBuffer[] bufferArray = &#123; header, body &#125;;</span><br><span class="line">channel.read(bufferArray);</span><br></pre></td></tr></table></figure>
<p>注意buffer首先被插入到数组，然后再将数组作为channel.read() 的输入参数。read()方法按照buffer在数组中的顺序将从channel中读取的数据写入到buffer，当一个buffer被写满后，channel紧接着向另一个buffer中写。</p>
<p>Scattering Reads在移动下一个buffer前，必须填满当前的buffer，这也意味着它不适用于动态大小消息。换句话说，如果存在消息头和消息体，消息头必须完成填充（例如填满128byte），Scattering Reads才能正常工作。</p>
<h2 id="Gathering_Writes"><a href="#Gathering_Writes" class="headerlink" title="Gathering Writes"></a>Gathering Writes</h2><p>Gathering Writes：将多个buffers中的数据写入单个channel，下面是原理图示：</p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/java-nio-gather.png" alt="Gathering Write"></p>
<p>代码🌰：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer header = ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line">ByteBuffer body   = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//write data into buffers</span></span><br><span class="line">ByteBuffer[] bufferArray = &#123; header, body &#125;;</span><br><span class="line"></span><br><span class="line">channel.write(bufferArray);</span><br></pre></td></tr></table></figure></p>
<p>The array of buffers are passed into the write() method, which writes the buffers数组是write()方法的入参，write()方法会按照buffer在数组中的顺序，将数据写入到channel，注意只有position和limit之间的数据才会被写入。因此，如果一个buffer的容量为128byte，但是仅仅包含58byte的数据，那么这58byte的数据将被写入到channel中。因此与Scattering Reads相反，Gathering Writes能较好的处理动态消息。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="http://tutorials.jenkov.com/java-nio/scatter-gather.html" target="_blank" rel="external">http://tutorials.jenkov.com/java-nio]]>
    </summary>
    
      <category term="Java NIO" scheme="http://suqun.github.io/tags/Java-NIO/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IntelliJ 使用说明]]></title>
    <link href="http://suqun.github.io/2016/10/18/IntelliJ/"/>
    <id>http://suqun.github.io/2016/10/18/IntelliJ/</id>
    <published>2016-10-18T09:38:43.000Z</published>
    <updated>2016-10-20T02:49:19.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h3><p>Windows下载地址：<a href="https://www.jetbrains.com/idea/download/#section=windows" target="_blank" rel="external">https://www.jetbrains.com/idea/download/#section=windows</a></p>
<p>版本选择Ultimate</p>
<p>下载的文件直接双击一路next安装即可。安装结束以后运行起来后，通过Server方式破解</p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/%E7%A0%B4%E8%A7%A3.png" alt="破解"></p>
<p><a href="http://idea.iteblog.com/key.php" target="_blank" rel="external">http://idea.iteblog.com/key.php</a></p>
<h3 id="u9879_u76EE_u5F15_u5165"><a href="#u9879_u76EE_u5F15_u5165" class="headerlink" title="项目引入"></a>项目引入</h3><p>破解以后，一路默认启动起来。先创建个Project，Intellij里面的project相当于workplace，可以先建一个空的project的，将项目代码检出到project里面（也可以将原有的项目copy到project文件夹下，如果不想copy，直接import也可以），然后在里面import module</p>
<p>检出代码后的效果：<br><img src="http://7xpk5e.com1.z0.glb.clouddn.com/checkout.png" alt="intellij-checkout"></p>
<p>import后的效果：<br><img src="http://7xpk5e.com1.z0.glb.clouddn.com/import1.png" alt="import1"><br><img src="http://7xpk5e.com1.z0.glb.clouddn.com/import2.png" alt="import2"><br><img src="http://7xpk5e.com1.z0.glb.clouddn.com/import3.png" alt="import3"><br><img src="http://7xpk5e.com1.z0.glb.clouddn.com/import4.png" alt="import4"></p>
<h3 id="u914D_u7F6E"><a href="#u914D_u7F6E" class="headerlink" title="配置"></a>配置</h3><p>intellij的所有配置信息都在 File-&gt;Settings里面，请自行摸索。</p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/settings.png" alt="intellij-settings"></p>
<p>这里说说常用的几个配置在哪里。</p>
<p>1、项目结构</p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/structure1.png" alt="structure1"></p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/structure2.png" alt="structure2"><br>这里面可以配置module的语言版本，添加jdk，jar引入等</p>
<p>2、maven</p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/maven1.png" alt="maven1"></p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/maven2.png" alt="maven2"></p>
<p>3、Server</p>
<p>以tomcat为例</p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/Server1.png" alt="tomcat1"></p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/Server2.png" alt="tomcat2"></p>
<p>配置好Server的基本信息，完成这一步保存，然后添加具体的Server</p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/Server3.png" alt="tomcat3"></p>
<p>添加本地Server，Server标签页更改端口等配置信息</p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/Server4.png" alt="tomcat4"></p>
<p>Deployment里面部署war包，点击加号，选择</p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/Server5.png" alt="tomcat5"></p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/Server6.png" alt="tomcat6"></p>
<h3 id="u5916_u89C2_u5B57_u4F53_u6837_u5F0F_u4FEE_u6539"><a href="#u5916_u89C2_u5B57_u4F53_u6837_u5F0F_u4FEE_u6539" class="headerlink" title="外观字体样式修改"></a>外观字体样式修改</h3><p>通过File-&gt;Import Setting可以直接导入Intellij的配置信息。我这里有个jar包，直接导入即可</p>
<p>jar地址：<a href="https://pan.baidu.com/s/1kU6DxZL" target="_blank" rel="external">https://pan.baidu.com/s/1kU6DxZL</a></p>
<p>导入重启即可，调整了字体大小，文件注释模板，默认UTF-8，使用了sublime类似的主题。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h3><p>Windows下载地址：<a href="https://www.jetbrains.com/idea/]]>
    </summary>
    
      <category term="IntelliJ" scheme="http://suqun.github.io/tags/IntelliJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git 常用命令]]></title>
    <link href="http://suqun.github.io/2016/10/18/gitcommands/"/>
    <id>http://suqun.github.io/2016/10/18/gitcommands/</id>
    <published>2016-10-18T08:38:01.000Z</published>
    <updated>2016-10-18T08:53:34.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u57FA_u672C_u547D_u4EE4"><a href="#u57FA_u672C_u547D_u4EE4" class="headerlink" title="基本命令"></a>基本命令</h3><p>代码检出：git clone 地址</p>
<p>文件修改添加到暂存区：git add readme.txt </p>
<p>文件提交：git commit -m “备注” </p>
<p>查看工作区当前状态：git status</p>
<p>查看差异：git diff 文件名</p>
<p>查看历史：git log –pretty=oneline</p>
<p>查看历史提交commit id：git log –pretty=oneline –abbrev-commit</p>
<p>恢复当前版本：git reset –hard HEAD</p>
<p>恢复上一个版本：git reset –hard HEAD^<br>（上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100）</p>
<p>恢复指定版本：git reset –hard 3628164</p>
<p>查看命令历史：git reflog</p>
<p>查看工作区和版本库区别：git diff HEAD – readme.txt</p>
<p>撤销修改：git checkout – readme.txt</p>
<p>撤销缓存区文件：git reset HEAD readme.txt</p>
<p>删除文件：git rm test.txt</p>
<h3 id="u5206_u652F_u547D_u4EE4"><a href="#u5206_u652F_u547D_u4EE4" class="headerlink" title="分支命令"></a>分支命令</h3><p>查看分支：git branch</p>
<p>创建分支：git branch <name></name></p>
<p>切换分支：git checkout <name></name></p>
<p>创建+切换分支：git checkout -b <name></name></p>
<p>推送远程分支：git push origin <name></name></p>
<p>创建远程分支：git checkout -b dev origin/dev</p>
<p>git checkout -b paytest_20151202_online origin/paytest_20151202_online</p>
<p>合并某分支到当前分支：git merge <name></name></p>
<p>合并分支禁用Fast forward：git merge –no-ff -m “备注” dev</p>
<p>删除分支：git branch -d <name></name></p>
<p>删除远程分支：git push origin –delete <branchname></branchname></p>
<p>强制删除分支：git branch -D <name></name></p>
<p>查看分支历史：git log –graph –pretty=oneline –abbrev-commit</p>
<p>分支合并图：git log –graph</p>
<p>储藏工作区：git stash</p>
<p>查看储藏的工作区：git stash list</p>
<p>恢复并删除储藏工作区：git stash pop</p>
<p>恢复指定工作区：git stash apply stash@{0}</p>
<p>恢复储藏工作区：git stash apply</p>
<p>删除储藏工作区：git stash drop</p>
<p>查询远程库详细信息：git remote -v</p>
<p>推送分支：git push origin dev</p>
<p>抓取最新文件：git pull 分支名</p>
<p>取远程分支：git pull origin 分支名</p>
<p>指定分支与远程分支链接：git branch –set-upstream dev origin/dev</p>
<h3 id="u6807_u7B7E_u547D_u4EE4"><a href="#u6807_u7B7E_u547D_u4EE4" class="headerlink" title="标签命令"></a>标签命令</h3><p>创建标签：git tag v1.0</p>
<p>删除本地标签：git tag -d v0.1</p>
<p>删除远程标签：git push origin :refs/tags0.9</p>
<p>删除远程标签：git push origin –delete tag <tagname></tagname></p>
<p>查看标签：git tag</p>
<p>指定commit id创建标签：git tag v0.9 6224937</p>
<p>指定标签信息：git tag -a <tagname> -m “blablabla…”</tagname></p>
<p>可以用PGP签名标签：git tag -s <tagname> -m “blablabla…”</tagname></p>
<p>查看标签信息：git show 标签名</p>
<p>推送标签到远程：git push origin v1.0</p>
<p>推送所有标签到远程：git push origin –tags</p>
<h3 id="u5176_u4ED6"><a href="#u5176_u4ED6" class="headerlink" title="其他"></a>其他</h3><p>配置别名：git config –global alias.st status</p>
<p>在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。</p>
<p>撤銷git add . =&gt; git rm -r –cached .</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u57FA_u672C_u547D_u4EE4"><a href="#u57FA_u672C_u547D_u4EE4" class="headerlink" title="基本命令"></a>基本命令</h3><p>代码检出：git clone 地址</p>
<p]]>
    </summary>
    
      <category term="git" scheme="http://suqun.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java应用结合Jenkins，docker部署到Kubernetes]]></title>
    <link href="http://suqun.github.io/2016/10/17/docker-jenkins/"/>
    <id>http://suqun.github.io/2016/10/17/docker-jenkins/</id>
    <published>2016-10-17T08:44:51.000Z</published>
    <updated>2016-10-24T15:25:46.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Jenkins_u5B89_u88C5"><a href="#Jenkins_u5B89_u88C5" class="headerlink" title="Jenkins安装"></a>Jenkins安装</h3><p>1、下载Jenkins war包安装，下载地址 <a href="/jenkins.io">jenkins.io</a>。这里使用的是Jenkins2.24版本</p>
<p>2、启动Jenkins</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JENKINS_HOME=~/.jenkins java -jar ~/Downloads/jenkins-<span class="number">2.24</span>.war --httpPort=<span class="number">9090</span></span><br></pre></td></tr></table></figure>
<p>启动后，日志会提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*************************************************************&#10;*************************************************************&#10;*************************************************************&#10; &#10;Jenkins initial setup is required. An admin user has been created and a password generated.&#10;Please use the following password to proceed to installation:&#10; &#10;3521fbc3d40448efa8942f8e464b2dd9&#10; &#10;This may also be found at: /Users/arungupta/.jenkins/secrets/initialAdminPassword&#10; &#10;*************************************************************&#10;*************************************************************&#10;*************************************************************</span><br></pre></td></tr></table></figure></p>
<p>访问localhost:9090，输入上面提示的密码，然后根据提示，安装推荐的插件，并创建用户</p>
<h3 id="Jenkins_u63D2_u4EF6_u5B89_u88C5"><a href="#Jenkins_u63D2_u4EF6_u5B89_u88C5" class="headerlink" title="Jenkins插件安装"></a>Jenkins插件安装</h3><p>1、maven配置<br>在 系统管理-&gt;Global Tool Configuration-&gt;Maven 中配置Maven信息<br><img src="http://7xpk5e.com1.z0.glb.clouddn.com/jenkis-maven3.png" alt="maven3"></p>
<p>2、其他插件安装<br>在 系统管理-&gt;管理插件-&gt;可选插件中搜索 docker pipe ，选择CloudBees Docker Pipeline进行安装，安装后重启Jenkins</p>
<h3 id="u521B_u5EFAJenkins_u4EFB_u52A1"><a href="#u521B_u5EFAJenkins_u4EFB_u52A1" class="headerlink" title="创建Jenkins任务"></a>创建Jenkins任务</h3><p>新建任务docker-pipeline</p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/docker-pipeline.png" alt="docker-pipeline"></p>
<p>选择Pipeline后，点击Ok后对任务进行配置。配置页中，可以根据自己需要进行设置。都比较简单一看就知道。我这里测试的是代码SCM使用的SVN，再Pipeline项选择Pipeline script from scm进行如下设置</p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/pipeline-from-scm.png" alt="pipeline-from-scm"></p>
<p>其中script path中设置的Jenkinsfile为具体的构建步骤，在项目地址的目录中。</p>
<p>当然也可以直接选择 Pipeline script，直接在脚本中设置构建步骤</p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/pipeline-script.png" alt="pipeline-script"></p>
<p>脚本中主要的就是构建步骤，从scm检出项目，mvn测试打包，生成docker镜像，将docker镜像上传到镜像仓库，然后登录K8s的master上，部署新的镜像包。</p>
<p>来看看Jenkinsfile，里面是如何描述上面的步骤的。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node &#123;&#10;    checkout scm&#10;    env.PATH = &#34;$&#123;tool &#39;Maven3&#39;&#125;/bin:$&#123;env.PATH&#125;&#34;&#10;    stage(&#39;Package&#39;) &#123;&#10;        dir(&#39;RpcServerSample&#39;) &#123;&#10;            sh &#39;mvn clean package -DskipTests&#39;&#10;        &#125;&#10;    &#125;&#10;&#10;    stage(&#39;Run Tests&#39;) &#123;&#10;        dir(&#39;RpcServerSample&#39;) &#123;&#10;                sh &#34;mvn test&#34;&#10;        &#125;&#10;    &#125;&#10;&#10;    stage(&#39;Build Image&#39;) &#123;&#10;        dir(&#39;RpcServerSample&#39;) &#123;&#10;            docker.build(&#34;daocloud.io/suqun/docker-jenkins-pipeline:v1&#34;).push()&#10;        &#125;&#10;    &#125;&#10;&#10;    stage(&#39;Deploy&#39;) &#123;&#10;        //&#26367;&#25442;rpcserver.yaml&#30340;&#38236;&#20687;&#29256;&#26412;&#21495;&#65292;&#24453;&#23436;&#25104;&#10;&#10;        dir(&#39;RpcServerSample&#39;) &#123;&#10;            //scp rpcserver.yaml &#21040; k8s&#30340;master&#19978;&#10;            sh &#39;sshpass -p vagrant scp rpcserver.yaml vagrant@192.168.1.10:/home/vagrant/rpcserver.yaml&#39;&#10;&#10;            //&#36828;&#31243;&#30331;&#24405;k8s&#38598;&#32676;master&#20027;&#26426;,&#26356;&#26032;&#38236;&#20687;&#65292;&#36825;&#37324;&#38754;&#35201;&#36827;&#34892;&#21028;&#26029;&#65292;&#31532;&#19968;&#27425;create&#10;            sh &#39;sshpass -p vagrant ssh vagrant@192.168.1.10 &#34;kubectl create -f /home/vagrant/rpcserver.yaml&#34;&#39;&#10;        &#125;&#10;    &#125;&#10;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>docker.build语句通过RpcServerSample路径下的Dockerfile创建镜像</p>
<p>Dockerfile<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM daocloud.io/java:<span class="number">7</span></span><br><span class="line">MAINTAINER <span class="string">"Larry Su &lt;larrys@wicresoft.com&gt;"</span></span><br><span class="line">ADD target/RpcServerSample-<span class="number">1.0</span>-SNAPSHOT-jar-with-dependencies.jar /usr/src/myapp/RpcServerSample.jar</span><br><span class="line">WORKDIR /usr/src/myapp</span><br><span class="line">CMD [<span class="string">"java"</span>,<span class="string">"-jar"</span>, <span class="string">"RpcServerSample.jar"</span>]</span><br></pre></td></tr></table></figure></p>
<p>rpcserver.yaml是K8s中的Deployment和Service</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1&#10;kind: Service&#10;metadata:&#10;  name: rpcserversample&#10;  labels:&#10;    app: rpcserversample&#10;spec:&#10;  # if your cluster supports it, uncomment the following to automatically create&#10;  # an external load-balanced IP for the frontend service.&#10;  #type: NodePort&#10;  ports:&#10;    # the port that this service should serve on&#10;  - port: 9001&#10;  selector:&#10;    app: rpcserversample&#10;---&#10;apiVersion: extensions/v1beta1&#10;kind: Deployment&#10;metadata:&#10;  name: rpcserversample&#10;  # these labels can be applied automatically&#10;  # from the labels in the pod template if not set&#10;  labels:&#10;    app: rpcserversample&#10;spec:&#10;  # this replicas value is default&#10;  # modify it according to your case&#10;  replicas: 2&#10;  # selector can be applied automatically&#10;  # from the labels in the pod template if not set&#10;  # selector:&#10;  #   matchLabels:&#10;  #     app: guestbook&#10;  #     tier: frontend&#10;  template:&#10;    metadata:&#10;      labels:&#10;        app: rpcserversample&#10;    spec:&#10;      containers:&#10;      - name: rpcserversample&#10;        image: daocloud.io/suqun/rpcserversample:v1&#10;        resources:&#10;          requests:&#10;            cpu: 100m&#10;            memory: 100Mi&#10;        ports:&#10;        - containerPort: 80</span><br></pre></td></tr></table></figure>
<p>这里有些Jenkins pipeline最佳实践，可以参考:<a href="http://www.weixinla.com/document/41174312.html" target="_blank" rel="external">Jenkins管道最佳实践Top 10</a></p>
<p>脚本写的比较烂，只是大概的流程，待完善。</p>
<h3 id="u6784_u5EFA"><a href="#u6784_u5EFA" class="headerlink" title="构建"></a>构建</h3><p>进入任务，点击立即构建后结果如下</p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/Jenkins-build.png" alt="result"></p>
<p>然后可以登录K8s集群的master主机，通过<code>kubectl get po,svc</code> 检查是否部署成功。</p>
<p>参考：<a href="https://dzone.com/articles/deployment-pipeline-using-docker-jenkins-java-and" target="_blank" rel="external">Deployment Pipeline Using Docker, Jenkins, Java, and Couchbase</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Jenkins_u5B89_u88C5"><a href="#Jenkins_u5B89_u88C5" class="headerlink" title="Jenkins安装"></a>Jenkins安装</h3><p>1、下载Jenkins war包安装，下载地]]>
    </summary>
    
      <category term="Docker" scheme="http://suqun.github.io/tags/Docker/"/>
    
      <category term="Jenkins" scheme="http://suqun.github.io/tags/Jenkins/"/>
    
      <category term="K8s" scheme="http://suqun.github.io/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用kubeadm在CentOS7上安装Kubernetes集群]]></title>
    <link href="http://suqun.github.io/2016/09/27/dockerjavamicroservice4/"/>
    <id>http://suqun.github.io/2016/09/27/dockerjavamicroservice4/</id>
    <published>2016-09-27T02:52:03.000Z</published>
    <updated>2016-10-24T15:23:42.000Z</updated>
    <content type="html"><![CDATA[<p>Kubernetes1.4版本提供kubeadm命令进行简化k8s集群的安装，只要使用2个简单命令就可以完成安装。 安装kubernetes以后，使用<code>kubeadm init</code>启动master，使用<code>kubeadm joins</code>把node添加到集群里。下面是根据官方博客<a href="http://kubernetes.io/docs/getting-started-guides/kubeadm/" target="_blank" rel="external">Installing Kubernetes on Linux with kubeadm</a>练习的记录。</p>
<h4 id="u4F7F_u7528vagrant_u521B_u5EFA_u4E24_u4E2Acentos7"><a href="#u4F7F_u7528vagrant_u521B_u5EFA_u4E24_u4E2Acentos7" class="headerlink" title="使用vagrant创建两个centos7"></a>使用vagrant创建两个centos7</h4><p>在k8s-centos7-cluster文件夹下创建Vagrantfile文件。Vagrantfile配置如下：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">boxes = [</span><br><span class="line">  &#123; <span class="symbol">:name</span> =&gt; <span class="symbol">:master</span>,<span class="symbol">:ip</span> =&gt; <span class="string">'192.168.1.20'</span>,<span class="symbol">:forward</span> =&gt; <span class="number">80</span>,<span class="symbol">:cpus</span> =&gt; <span class="number">1</span>,<span class="symbol">:mem</span> =&gt; <span class="number">1024</span>&#125;,</span><br><span class="line">  &#123; <span class="symbol">:name</span> =&gt; <span class="symbol">:node1</span>,<span class="symbol">:ip</span> =&gt; <span class="string">'192.168.1.21'</span>,<span class="symbol">:forward</span> =&gt; <span class="number">80</span>,<span class="symbol">:cpus</span> =&gt; <span class="number">1</span>,<span class="symbol">:mem</span> =&gt; <span class="number">1024</span>&#125;,</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"><span class="constant">VAGRANTFILE_API_VERSION</span> = <span class="string">"2"</span></span><br><span class="line"></span><br><span class="line"><span class="constant">Vagrant</span>.configure(<span class="constant">VAGRANTFILE_API_VERSION</span>) <span class="keyword">do</span> |config|</span><br><span class="line">    boxes.each <span class="keyword">do</span> |opts|</span><br><span class="line">        config.vm.define opts[<span class="symbol">:name</span>] <span class="keyword">do</span> |config|</span><br><span class="line">            config.vm.box       = <span class="string">"centos7"</span></span><br><span class="line">            config.vm.boot_timeout = <span class="number">360</span></span><br><span class="line">            config.ssh.username = <span class="string">"vagrant"</span></span><br><span class="line">            config.ssh.password = <span class="string">"vagrant"</span></span><br><span class="line">            config.vm.synced_folder <span class="string">"."</span>, <span class="string">"/vagrant"</span>, <span class="symbol">disabled:</span><span class="keyword">true</span></span><br><span class="line">            config.vm.network  <span class="string">"public_network"</span>, <span class="symbol">ip:</span> opts[<span class="symbol">:ip</span>]</span><br><span class="line">            <span class="comment">#config.vm.network "forwarded_port", guest: 80, host: 8080</span></span><br><span class="line">            config.vm.hostname = <span class="string">"%s.vagrant"</span> % opts[<span class="symbol">:name</span>].to_s</span><br><span class="line">            config.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |vb|</span><br><span class="line">                vb.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--cpus"</span>, opts[<span class="symbol">:cpus</span>] ] <span class="keyword">if</span> opts[<span class="symbol">:cpus</span>]</span><br><span class="line">                vb.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--memory"</span>, opts[<span class="symbol">:mem</span>] ] <span class="keyword">if</span> opts[<span class="symbol">:mem</span>]</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">#config.vm.provision "shell", inline: $update_script</span></span><br><span class="line">            <span class="comment">#config.vm.provision "shell", path: opts[:provision] if opts[:provision]</span></span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p>
<p>在Vagrantfile文件目录下，创建两个CentOS7系统，一个作为master，一个作为node<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  k8s-centos7-cluster vagrant up</span><br><span class="line">Bringing machine <span class="string">'master'</span> up with <span class="string">'virtualbox'</span> provider...</span><br><span class="line">Bringing machine <span class="string">'node1'</span> up with <span class="string">'virtualbox'</span> provider...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>Ok，下面我们开始在CentOS7中安装k8s集群</p>
<h4 id="u5B89_u88C5kubelet_u548Ckuebadm"><a href="#u5B89_u88C5kubelet_u548Ckuebadm" class="headerlink" title="安装kubelet和kuebadm"></a>安装kubelet和kuebadm</h4><p>在所有的机子上都必须安装docker，kubelet，kubectl，kubeadm，无论是master还是node。并且使用root权限进行安装。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  k8s-centos7-cluster vagrant ssh master <span class="comment">#输入密码登录master</span></span><br><span class="line">[vagrant@master ~]$ </span><br><span class="line">[vagrant@master ~]$ sudo su -</span><br></pre></td></tr></table></figure>
<p>登录master，切换到root用户，然后执行下面的命令:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cat &#60;&#60;EOF &#62; /etc/yum.repos.d/k8s.repo&#10;[kubelet]&#10;name=kubelet&#10;baseurl=http://files.rm-rf.ca/rpms/kubelet/&#10;enabled=1&#10;gpgcheck=0&#10;EOF&#10;# yum install docker kubelet kubeadm kubectl kubernetes-cni&#10;# systemctl enable docker &#38;&#38; systemctl start docker&#10;# systemctl enable kubelet &#38;&#38; systemctl start kubelet</span><br></pre></td></tr></table></figure>
<p>等待下载后安装。<br>安装完成后，可以使用<code>systemctl status</code> 查看安装好的组件服务状态。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># systemctl status docker</span></span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Tue <span class="number">2016</span>-<span class="number">09</span>-<span class="number">27</span> <span class="number">04</span>:<span class="number">57</span>:<span class="number">44</span> UTC; <span class="number">41</span>s ago</span><br></pre></td></tr></table></figure>
<h4 id="u521D_u59CB_u5316master"><a href="#u521D_u59CB_u5316master" class="headerlink" title="初始化master"></a>初始化master</h4><p>在master上运行控制组件，包含etcd（集群的数据库），API server（kubectl 客户端沟通用）。这些组件都在pod中通过kubelet启动运行。<br>初始化master，选择上面实现安装过kubelet和kubeadm的主机，然后运行下面的命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubeadm init --use-kubernetes-version v1.4.0-beta.11</span></span><br></pre></td></tr></table></figure>
<p>运行后，会下载安装集群用的数据库和控制组件，需要等待一些时间，输出内容如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;master/tokens&gt; generated token: <span class="string">"88958f.2068ff49c1675f8c"</span></span><br><span class="line">&lt;master/pki&gt; created keys and certificates <span class="keyword">in</span> <span class="string">"/etc/kubernetes/pki"</span></span><br><span class="line">&lt;util/kubeconfig&gt; created <span class="string">"/etc/kubernetes/kubelet.conf"</span></span><br><span class="line">&lt;util/kubeconfig&gt; created <span class="string">"/etc/kubernetes/admin.conf"</span></span><br><span class="line">&lt;master/apiclient&gt; created API client configuration</span><br><span class="line">&lt;master/apiclient&gt; created API client, waiting <span class="keyword">for</span> the control plane to become ready</span><br></pre></td></tr></table></figure>
<p>未完待续。。。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Kubernetes1.4版本提供kubeadm命令进行简化k8s集群的安装，只要使用2个简单命令就可以完成安装。 安装kubernetes以后，使用<code>kubeadm init</code>启动master，使用<code>kubeadm joins</code>]]>
    </summary>
    
      <category term="Docker" scheme="http://suqun.github.io/tags/Docker/"/>
    
      <category term="K8s" scheme="http://suqun.github.io/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于Docker的java微服务(三) Kubernetes服务发现之环境变量]]></title>
    <link href="http://suqun.github.io/2016/09/26/dockerjavamicroservice3/"/>
    <id>http://suqun.github.io/2016/09/26/dockerjavamicroservice3/</id>
    <published>2016-09-26T09:14:49.000Z</published>
    <updated>2016-10-24T15:23:40.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>创建两个服务</li>
<li>将服务打包成镜像</li>
<li>k8s的service</li>
<li>k8s的deployment</li>
<li>简单测试</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li>创建两个服务</li>
<li>将服务打包成镜像</li>
<li>k8s的service</li>
<li>k8s的deployment</li>
<li>简单测试</li>
</ol>
]]>
    </summary>
    
      <category term="Docker" scheme="http://suqun.github.io/tags/Docker/"/>
    
      <category term="K8s" scheme="http://suqun.github.io/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于Docker的java微服务(二) CentOS7部署Kubernetes集群]]></title>
    <link href="http://suqun.github.io/2016/09/07/dockerjavamicroservice2/"/>
    <id>http://suqun.github.io/2016/09/07/dockerjavamicroservice2/</id>
    <published>2016-09-07T11:23:15.000Z</published>
    <updated>2016-10-24T15:23:39.000Z</updated>
    <content type="html"><![CDATA[<p>本文主要参考美团云的<a href="https://mos.meituan.com/library/37/how-to-setup-k8s-cluster-on-CentOS7/" target="_blank" rel="external">在CentOS7上部署Kubernetes集群</a></p>
<h3 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h3><p>Kubernetes(k8s)是Google开源的大规模容器集群管理系统, 本文将基于CentOS7自带的Kubernetes组件、分布式键值存储系统etcd以及Flannel实现的overlay网络来搭建一个简单的k8s集群。</p>
<h3 id="vagrant_u5B89_u88C5_u591A_u53F0CentOS7"><a href="#vagrant_u5B89_u88C5_u591A_u53F0CentOS7" class="headerlink" title="vagrant安装多台CentOS7"></a>vagrant安装多台CentOS7</h3><p>使用vagrant创建多个CentOS7虚拟机用于集群部署。vagrant的安装非常简单,网上一大堆教程，可以参考<a href="http://www.tuicool.com/articles/miE7vm6" target="_blank" rel="external">这里</a>。我使用的是1.8.5版本。同时还需要下载CentOS的box文件,<br>由于box文件都在国外的网站上下载速度缓慢,可以从我的云盘上下载<a href="https://pan.baidu.com/s/1jI6T4EE" target="_blank" rel="external">CentOS-7-x86_64-Minimal-1511.box</a>。<br>有了box文件后,执行以下命令添加box</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant add box CentOS-<span class="number">7</span>-x86_64-Minimal-<span class="number">1511</span>.box</span><br></pre></td></tr></table></figure>
<p>查看vagrant已添加的box</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box list</span><br></pre></td></tr></table></figure>
<p>创建单台CentOS很简单，需要下面的步骤</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkidr centos7</span><br><span class="line"><span class="built_in">cd</span> centos7</span><br><span class="line">vagrant init</span><br><span class="line">vagrant up</span><br></pre></td></tr></table></figure>
<p>vagrant init会初始化一个Vagrantfile的文件，CentOS的配置都是这个文件设定的。这里给出创建多台centos的Vagrantfile配置。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">boxes = [</span><br><span class="line">  &#123; <span class="symbol">:name</span> =&gt; <span class="symbol">:master</span>,<span class="symbol">:ip</span> =&gt; <span class="string">'192.168.253.7'</span>,<span class="symbol">:cpus</span> =&gt; <span class="number">1</span>,<span class="symbol">:mem</span> =&gt; <span class="number">1024</span>&#125;,</span><br><span class="line">  &#123; <span class="symbol">:name</span> =&gt; <span class="symbol">:worker1</span>,<span class="symbol">:ip</span> =&gt; <span class="string">'192.168.253.8'</span>,<span class="symbol">:cpus</span> =&gt; <span class="number">1</span>,<span class="symbol">:mem</span> =&gt; <span class="number">1024</span>&#125;,</span><br><span class="line">  &#123; <span class="symbol">:name</span> =&gt; <span class="symbol">:worker2</span>,<span class="symbol">:ip</span> =&gt; <span class="string">'192.168.253.9'</span>,<span class="symbol">:cpus</span> =&gt; <span class="number">1</span>,<span class="symbol">:mem</span> =&gt; <span class="number">1024</span>&#125;,</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"><span class="constant">VAGRANTFILE_API_VERSION</span> = <span class="string">"2"</span></span><br><span class="line"></span><br><span class="line"><span class="constant">Vagrant</span>.configure(<span class="constant">VAGRANTFILE_API_VERSION</span>) <span class="keyword">do</span> |config|</span><br><span class="line">    boxes.each <span class="keyword">do</span> |opts|</span><br><span class="line">        config.vm.define opts[<span class="symbol">:name</span>] <span class="keyword">do</span> |config|</span><br><span class="line">            config.vm.box       = <span class="string">"centos7"</span></span><br><span class="line">            config.vm.boot_timeout = <span class="number">360</span></span><br><span class="line">            config.ssh.username = <span class="string">"vagrant"</span></span><br><span class="line">            config.ssh.password = <span class="string">"vagrant"</span></span><br><span class="line">            config.vm.synced_folder <span class="string">"."</span>, <span class="string">"/vagrant"</span>, <span class="symbol">disabled:</span><span class="keyword">true</span></span><br><span class="line">            config.vm.network  <span class="string">"public_network"</span>, <span class="symbol">ip:</span> opts[<span class="symbol">:ip</span>]</span><br><span class="line">            config.vm.hostname = <span class="string">"%s.vagrant"</span> % opts[<span class="symbol">:name</span>].to_s</span><br><span class="line">            config.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |vb|</span><br><span class="line">                vb.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--cpus"</span>, opts[<span class="symbol">:cpus</span>] ] <span class="keyword">if</span> opts[<span class="symbol">:cpus</span>]</span><br><span class="line">                vb.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--memory"</span>, opts[<span class="symbol">:mem</span>] ] <span class="keyword">if</span> opts[<span class="symbol">:mem</span>]</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">#config.vm.provision "shell", inline: $update_script</span></span><br><span class="line">            <span class="comment">#config.vm.provision "shell", path: opts[:provision] if opts[:provision]</span></span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在这个文件的目录下执行<code>vagrant up</code>就可以创建3台虚拟机。我们把其中master作为k8s的Master节点，worker1，worker2作为k8s的Node节点来创建k8s集群。</p>
<h3 id="u73AF_u5883_u51C6_u5907"><a href="#u73AF_u5883_u51C6_u5907" class="headerlink" title="环境准备"></a>环境准备</h3><table>
<thead>
<tr>
<th>master</th>
<th style="text-align:center">worker1</th>
<th style="text-align:center">worker2</th>
</tr>
</thead>
<tbody>
<tr>
<td>192.168.253.7</td>
<td style="text-align:center">192.168.253.8</td>
<td style="text-align:center">192.168.253.9</td>
</tr>
<tr>
<td>kubernetes</td>
<td style="text-align:center">ntpd</td>
<td style="text-align:center">ntpd</td>
</tr>
<tr>
<td>etcd</td>
<td style="text-align:center">flannel</td>
<td style="text-align:center">flannel</td>
</tr>
<tr>
<td>ntpd</td>
<td style="text-align:center">kubernetes</td>
<td style="text-align:center">kubernetes</td>
</tr>
</tbody>
</table>
<p>Master节点禁用CentOS7自带防火墙，安装kubernetes、etcd、ntpd等软件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld &amp;&amp; sudo systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">sudo yum install -y kubernetes etcd ntp.x86_64</span><br></pre></td></tr></table></figure>
<p>Node节点同样禁用CentOS7自带防火墙，安装kubernetes、flannel、ntpd等软件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld &amp;&amp; sudo systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">sudo yum install -y ntp.x86_64 flannel kubernetes</span><br></pre></td></tr></table></figure>
<h3 id="Master_u914D_u7F6E"><a href="#Master_u914D_u7F6E" class="headerlink" title="Master配置"></a>Master配置</h3><p>修改etcd配置<code>/etc/etcd/etcd.conf</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">"http://0.0.0.0:2379"</span></span><br></pre></td></tr></table></figure>
<p>修改kubernetes全局配置<code>/etc/kubernetes/config</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KUBE_LOG_LEVEL=<span class="string">"--v=2"</span></span><br></pre></td></tr></table></figure>
<p>修改kubernetes apiserver的配置<code>/etc/kubernetes/apiserver</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">KUBE_API_ADDRESS=<span class="string">"--address=0.0.0.0"</span></span><br><span class="line">KUBE_API_PORT=<span class="string">"--port=8080"</span></span><br><span class="line">KUBELET_PORT=<span class="string">"--kubelet_port=10250"</span></span><br></pre></td></tr></table></figure>
<p>启动master的ntpd、etcd、kube-apiserver、kube-scheduler、kube-controller-manager服务，设置为开机启动，并查看启动后的状态。如果每一个服务都启动成功，那么sudo systemctl status $SRV显示的信息则包含Active: active (running)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> SRV <span class="keyword">in</span> ntpd etcd kube-apiserver kube-scheduler kube-controller-manager;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    sudo systemctl start <span class="variable">$SRV</span></span><br><span class="line">    sudo systemctl <span class="built_in">enable</span> <span class="variable">$SRV</span></span><br><span class="line">    sudo systemctl status <span class="variable">$SRV</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>修改etcd配置，在设定Node中flannel所使用的子网范围为172.17.1.0~172.17.254.0（每一个Node节点都有一个独立的flannel子网）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">etcdctl mk /coreos.com/network/config <span class="string">'&#123;"Network":"172.17.0.0/16", "SubnetMin": "172.17.1.0", "SubnetMax": "172.17.254.0"&#125;'</span></span><br></pre></td></tr></table></figure>
<h3 id="Node_u914D_u7F6E"><a href="#Node_u914D_u7F6E" class="headerlink" title="Node配置"></a>Node配置</h3><p>修改Node节点上flannel的配置<code>/etc/sysconfig/</code>flanneld，设定etcd的相关信息，其中192.168.253.7为Master的IP地址。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLANNEL_ETCD=<span class="string">"http://192.168.253.7:2379"</span></span><br></pre></td></tr></table></figure>
<p>修改Node节点kubernetes的全局配置文件<code>/etc/kubernetes/config</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">KUBE_LOG_LEVEL=<span class="string">"--v=2"</span></span><br><span class="line">KUBE_MASTER=<span class="string">"--master=http://192.168.253.7:8080"</span></span><br></pre></td></tr></table></figure>
<p>修改Node节点上kubernetes kubelet的配置<code>/etc/kubernetes/kubelet</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">KUBELET_ADDRESS=<span class="string">"--address=0.0.0.0"</span></span><br><span class="line">KUBELET_PORT=<span class="string">"--port=10250"</span></span><br><span class="line">KUBELET_API_SERVER=<span class="string">"--api_servers=http://192.168.253.7:8080"</span></span><br><span class="line">KUBELET_HOSTNAME=<span class="string">""</span></span><br></pre></td></tr></table></figure>
<p>启动Node节点上的相关服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> SRV <span class="keyword">in</span> ntpd flanneld docker kube-proxy kubelet;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    sudo systemctl start <span class="variable">$SRV</span></span><br><span class="line">    sudo systemctl <span class="built_in">enable</span> <span class="variable">$SRV</span></span><br><span class="line">    sudo systemctl status <span class="variable">$SRV</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p>
<p>类似Master节点，如果每一个服务都启动成功，那么sudo systemctl status $SRV显示的信息则包含Active: active (running)。</p>
<p>配置步骤都是参考<a href="https://mos.meituan.com/library/37/how-to-setup-k8s-cluster-on-CentOS7/" target="_blank" rel="external">美团云在CentOS7上部署Kubernetes集群</a>。<br>不巧的是，我在这一步上花了1周的时间。。。。Node节点上的flanneld和docker服务死活起不起来。<br>通过<code>systemctl status flanneld</code>，发现一直报错<code>Failed to retrieve network config</code>。</p>
<p><strong>解决方法</strong>：</p>
<p>修改Node节点上的flanneld配置 <code>/etc/sysconfig/flanneld</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLANNEL_ETCD_KEY=<span class="string">"/coreos.com/network"</span></span><br></pre></td></tr></table></figure>
<p>然后重新启动flanneld和docker服务即可。</p>
<h3 id="u6D4B_u8BD5"><a href="#u6D4B_u8BD5" class="headerlink" title="测试"></a>测试</h3><p>在Master上查看节点信息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@master ~]$ kubectl get nodes</span><br><span class="line">NAME              STATUS    AGE</span><br><span class="line">worker1.vagrant   Ready     <span class="number">4</span>m</span><br><span class="line">worker2.vagrant   Ready     <span class="number">10</span>s</span><br></pre></td></tr></table></figure>
<p>在Master节点查看flannel子网分配情况</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@master ~]$ etcdctl ls /coreos.com/network/subnets</span><br><span class="line">/coreos.com/network/subnets/<span class="number">172.17</span>.<span class="number">29.0</span>-<span class="number">24</span></span><br></pre></td></tr></table></figure>
<h3 id="Guestbook_u90E8_u7F72_u5230k8s_u4E2D"><a href="#Guestbook_u90E8_u7F72_u5230k8s_u4E2D" class="headerlink" title="Guestbook部署到k8s中"></a>Guestbook部署到k8s中</h3><p><a href="https://github.com/kubernetes/kubernetes/blob/release-1.2/examples/guestbook/README.md" target="_blank" rel="external">Guestbook example</a></p>
<p>部署的过程中遇到2个问题</p>
<ol>
<li><p>通过<code>kubectl create -f xxx.yaml</code>创建pod显示成功，但是通过 <code>kubectl get pod</code>命令确查询不到任何pod信息。解决方案可以参考：<a href="http://www.voidcn.com/blog/jinzhencs/article/p-5975011.html" target="_blank" rel="external"> kubenetes无法创建pod/创建RC时无法自动创建pod的问题</a></p>
</li>
<li><p>解决了上面的问题后，可以get到pod信息，但是node节点通过查询docker images并未发现任何镜像，原因是因为国内的网络问题，无法下载到镜像所致。可以手动pull<br>镜像：<code>registry.access.redhat.com/rhel7/pod-infrastructure</code>以及你所需的其他镜像。</p>
</li>
</ol>
<h3 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h3><p>这里的集群部署参考的是美团云分享的。都只是练手用的。</p>
<p>k8s部署还可以更简单，一键部署。使用vagrant+coreOs，安装完虚拟机后，Master节点c1会自动下在k8s所需的环境，奈何大陆的程序员比较苦逼，有墙的存在。在翻墙的情况下可以尝试一键部署k8s集群。详情请移步<a href="https://coreos.com/kubernetes/docs/latest/kubernetes-on-vagrant.html" target="_blank" rel="external">要翻才能看的到</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文主要参考美团云的<a href="https://mos.meituan.com/library/37/how-to-setup-k8s-cluster-on-CentOS7/" target="_blank" rel="external">在CentOS7上部署Kub]]>
    </summary>
    
      <category term="Docker" scheme="http://suqun.github.io/tags/Docker/"/>
    
      <category term="K8s" scheme="http://suqun.github.io/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于Docker的java微服务(一) 部署Chris Richardson的转账案例]]></title>
    <link href="http://suqun.github.io/2016/08/24/dockerjavamicroservice1/"/>
    <id>http://suqun.github.io/2016/08/24/dockerjavamicroservice1/</id>
    <published>2016-08-24T11:23:15.000Z</published>
    <updated>2016-10-24T15:24:15.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h3><p>本文主要参考<a href="http://www.infoq.com/cn/articles/Automate-Docker-Cloud-Java-Microservice-Deployment-with-DCHQ" target="_blank" rel="external">使用DCHQ自动部署和管理基于Docker的云/虚拟化环境Java微服务</a></p>
<p>最近在学习微服务,前两周了解基于Spring Cloud的微服务框架,这两天开始看看关于Docker的微服务。</p>
<p>Spring Cloud整合了Netflix开源的Eureka,Hystrix,Ribbon,Feign,ZUUL等,<br>是一个基于Spring Boot实现的云应用开发工具，它为基于JVM的云应用开发中的配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、<br>分布式会话和集群状态管理等操作提供了一种简单的开发方式(<a href="http://blog.didispace.com/springcloud1/" target="_blank" rel="external">参考DIDI</a>)。</p>
<p>那么Docker的微服务是什么样的呢。有空的同学可以看看Spring Cloud和Docker的比较<br><a href="http://www.infoq.com/cn/articles/netflix-oss-spring-cloud-kubernetes?utm_campaign=rightbar_v2&amp;utm_source=infoq&amp;utm_medium=articles_link&amp;utm_content=link_text" target="_blank" rel="external">Netflix OSS、Spring Cloud还是Kubernetes?</a>。<br>简单的说,就是基于Docker的调度器Kubernetes可以帮忙把大家从服务发现、负载均衡、容错等功能中解放出来,更专注于业务逻辑开发。</p>
<p>Kubernetes是个什么鬼?要了解它,我们得先了解下,我们开发好的项目是怎么在Docker上部署应用的,多个Docker容器又是如何管理的。<br>这篇文章是Chris Richardson针对事件溯源、CQRS和Docker所创建的转账<a href="https://github.com/cer/event-sourcing-examples" target="_blank" rel="external">案例</a>。</p>
<p>案例主要功能如下:</p>
<ul>
<li>基于一个初始的余额，创建新账户</li>
<li>查询某个账户，得到其余额</li>
<li>从一个账户到另一个账户进行转账</li>
</ul>
<p>我们就用这个例子,来了解下整个开发部署流程(<strong>仅仅是了解</strong>)。案例的具体业务逻辑介绍请移步<a href="https://github.com/cer/event-sourcing-examples" target="_blank" rel="external">event-sourcing-examples</a></p>
<h3 id="u83B7_u53D6Event_Store_u51ED_u8BC1"><a href="#u83B7_u53D6Event_Store_u51ED_u8BC1" class="headerlink" title="获取Event Store凭证"></a>获取Event Store凭证</h3><p>架构使用事件驱动的方式来确保数据的一致性,这里面使用的是Event Store。</p>
<p>在使用之前,需要获取Event Store凭证。<br>进入<a href="http://eventuate.io/" target="_blank" rel="external">Event Store</a>官网,注册个账号,过几个小时一般就会收到来自<a href="/chris@chrisrichardson.net">chris</a>的邮件。<br>邮件中有EVENTUATE_API_KEY_ID和EVENTUATE_API_KEY_SECRET,这个在后面的yml模板里会用到。</p>
<h3 id="gradle_u6784_u5EFA"><a href="#gradle_u6784_u5EFA" class="headerlink" title="gradle构建"></a>gradle构建</h3><p>从<a href="https://github.com/cer/event-sourcing-examples" target="_blank" rel="external">event-sourcing-examples</a>clone项目到本地。</p>
<p>直接下载下来的例子，部署测试的时候，会报几个错误，需要对代码做部分修改</p>
<ul>
<li>修改 xx-xx-side-service模块中build.gradle文件,添加如下内容<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jar &#123;</span><br><span class="line">    manifest &#123;</span><br><span class="line">        attributes <span class="string">'Main-Class'</span>: <span class="string">'net.chrisrichardson.eventstore.javaexamples.banking.web.main.XxxxSideServiceMain'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>添加这个解决部署时遇到的找不到manifest错误</p>
<ul>
<li>xx-xx-side-service主方法添加注解@SpringBootApplication</li>
</ul>
<p>主方法没有@SpringBootApplication这个注解，是无法启动spring boot滴。</p>
<p>修改后，使用gradle的assemble命令构建，构建成功后，模块的/build/libs会生成jar包。</p>
<h3 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h3><p>gradle构建完毕后，我们要把service模块的jar包放到一个docker镜像中，然后启动这个docker。<br>这里使用了docker-compose来生成启动镜像。</p>
<p>docker-compose的安装及介绍，请移步：<a href="https://yeasy.gitbooks.io/docker_practice/content/compose/" target="_blank" rel="external">Docker Compose 项目</a></p>
<h4 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h4><p>docker-compose管理调度docker容器默认是根据docker-compose.yml模板进行的。这个模板里定义了生成镜像部署镜像的一些步骤。</p>
<p>本案例的yml如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">accountscommandside:&#10;  image: openjdk:8u92-jdk-alpine&#10;  working_dir: /app&#10;  volumes:&#10;    - ./accounts-command-side-service/build/libs:/app&#10;  command: java -jar /app/accounts-command-side-service.jar&#10;  ports:&#10;    - &#34;8080:8080&#34;&#10;  environment:&#10;    EVENTUATE_API_KEY_ID: 5NJSVTRJ6UTYVL8U4RN8TKDRM&#10;    EVENTUATE_API_KEY_SECRET: fiAKWYEEj7EVxNi6yKXF8WDcVLbYA8Cu5RnFFKjwVOw&#10;&#10;transactionscommandside:&#10;  image: openjdk:8u92-jdk-alpine&#10;  working_dir: /app&#10;  volumes:&#10;    - ./transactions-command-side-service/build/libs:/app&#10;  command: java -jar /app/transactions-command-side-service.jar&#10;  ports:&#10;    - &#34;8082:8080&#34;&#10;  environment:&#10;    EVENTUATE_API_KEY_ID: 5NJSVTRJ6UTYVL8U4RN8TKDRM&#10;    EVENTUATE_API_KEY_SECRET: fiAKWYEEj7EVxNi6yKXF8WDcVLbYA8Cu5RnFFKjwVOw&#10;&#10;&#10;accountsqueryside:&#10;  image: openjdk:8u92-jdk-alpine&#10;  working_dir: /app&#10;  volumes:&#10;    - ./accounts-query-side-service/build/libs:/app&#10;  command: java -jar /app/accounts-query-side-service.jar&#10;  ports:&#10;    - &#34;8081:8080&#34;&#10;  links:&#10;    - mongodb&#10;  environment:&#10;    EVENTUATE_API_KEY_ID: 5NJSVTRJ6UTYVL8U4RN8TKDRM&#10;    EVENTUATE_API_KEY_SECRET: fiAKWYEEj7EVxNi6yKXF8WDcVLbYA8Cu5RnFFKjwVOw&#10;    SPRING_DATA_MONGODB_URI: mongodb://mongodb/mydb&#10;&#10;mongodb:&#10;  image: mongo:3.2.9&#10;  hostname: mongodb&#10;  command: mongod --smallfiles&#10;  ports:&#10;    - &#34;27017:27017&#34;</span><br></pre></td></tr></table></figure>
<p>这里面定义了4个容器内容，分别是accountscommandside，transactionscommandside，accountsqueryside，mongodb</p>
<ul>
<li>image：指定为镜像名称或镜像 ID。如果镜像在本地不存在，Compose 将会尝试拉取这个镜像</li>
<li>volumes：卷挂载路径设置，这里是将容器的/app路径挂载到宿主机/build/libs 路径上</li>
<li>command：覆盖容器启动后默认执行的命令，这里是默认直接启动spring boot项目</li>
<li>ports：暴露端口信息，格式如下<ul>
<li>宿主：容器 （HOST:CONTAINER）</li>
<li>容器（宿主会随机选择端口）</li>
</ul>
</li>
<li>links：链接到其它服务中的容器。使用服务名称（同时作为别名）或服务名称：服务别名 （SERVICE:ALIAS）格式都可以。 <ul>
<li>db</li>
<li>db:database</li>
<li>redis</li>
</ul>
</li>
<li>environment：设置环境变量</li>
</ul>
<p>替换成你自己的EVENTUATE_API_KEY_ID和EVENTUATE_API_KEY_SECRET，否则部署后运行测试，会报401未授权错误。</p>
<h4 id="docker-compse_up"><a href="#docker-compse_up" class="headerlink" title="docker-compse up"></a>docker-compse up</h4><p>设置好yml模板以后，使用docker-compse up来启动这4个容器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  java-spring git:(master) ✗ docker-compose up</span><br></pre></td></tr></table></figure>
<p>再开个shell，看下启动的四个容器的状态</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  java-spring git:(master) ✗ docker-compose ps</span><br><span class="line">                Name                              Command               State            Ports</span><br><span class="line">--------------------------------------------------------------------------------------------------------</span><br><span class="line">javaspring_accountscommandside_1       java -jar /app/accounts-co ...   Up      <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8080</span>-&gt;<span class="number">8080</span>/tcp</span><br><span class="line">javaspring_accountsqueryside_1         java -jar /app/accounts-qu ...   Up      <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8081</span>-&gt;<span class="number">8080</span>/tcp</span><br><span class="line">javaspring_mongodb_1                   /entrypoint.sh mongod --sm ...   Up      <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">27017</span>-&gt;<span class="number">27017</span>/tcp</span><br><span class="line">javaspring_transactionscommandside_1   java -jar /app/transaction ...   Up      <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8082</span>-&gt;<span class="number">8080</span>/tcp</span><br></pre></td></tr></table></figure>
<p>四个状态都是up，好了，访问服务测试下。</p>
<h3 id="u6D4B_u8BD5"><a href="#u6D4B_u8BD5" class="headerlink" title="测试"></a>测试</h3><p>先创建2个账户，每个都初始500美元<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  java-spring git:(master) ✗ curl -X POST -H <span class="string">"Content-Type: application/json"</span> -H <span class="string">"Cache-Control: no-cache"</span> <span class="operator">-d</span> <span class="string">'&#123;"initialBalance": 500&#125;'</span> <span class="string">"http://localhost:8080/accounts"</span></span><br><span class="line">&#123;<span class="string">"accountId"</span>:<span class="string">"00000156bfc1c044-0242ac1100460000"</span>&#125;%                                                                            </span><br><span class="line">➜  java-spring git:(master) ✗ curl -X POST -H <span class="string">"Content-Type: application/json"</span> -H <span class="string">"Cache-Control: no-cache"</span> <span class="operator">-d</span> <span class="string">'&#123;"initialBalance": 500&#125;'</span> <span class="string">"http://localhost:8080/accounts"</span></span><br><span class="line">&#123;<span class="string">"accountId"</span>:<span class="string">"00000156bfc1da88-0242ac1100960000"</span>&#125;%</span><br></pre></td></tr></table></figure></p>
<p>根据账户ID查询<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  java-spring git:(master) ✗ curl -X GET <span class="string">"http://localhost:8081/accounts/00000156bfc1c044-0242ac1100460000"</span></span><br><span class="line">&#123;<span class="string">"accountId"</span>:<span class="string">"00000156bfc1c044-0242ac1100460000"</span>,<span class="string">"balance"</span>:<span class="number">50000</span>&#125;%                                                        </span><br><span class="line">➜  java-spring git:(master) ✗ curl -X GET <span class="string">"http://localhost:8081/accounts/00000156bfc1da88-0242ac1100960000"</span></span><br><span class="line">&#123;<span class="string">"accountId"</span>:<span class="string">"00000156bfc1da88-0242ac1100960000"</span>,<span class="string">"balance"</span>:<span class="number">50000</span>&#125;%</span><br></pre></td></tr></table></figure></p>
<p>可以看到每个账户里都有50000美分。试试转账，然后再查询<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  java-spring git:(master) ✗ curl -X POST -H <span class="string">"Content-Type: application/json"</span> <span class="operator">-d</span> <span class="string">'&#123;"fromAccountId" : "00000156bfc1c044-0242ac1100460000", "toAccountId" : "00000156bfc1da88-0242ac1100960000", "amount" : 500&#125;'</span> <span class="string">"http://localhost:8082/transfers"</span></span><br><span class="line">&#123;<span class="string">"moneyTransferId"</span>:<span class="string">"00000156bfc75387-0242ac1100ac0000"</span>&#125;%                                                                                                                                                    </span><br><span class="line">➜  java-spring git:(master) ✗ curl -X GET <span class="string">"http://localhost:8081/accounts/00000156bfc1da88-0242ac1100960000"</span></span><br><span class="line">&#123;<span class="string">"accountId"</span>:<span class="string">"00000156bfc1da88-0242ac1100960000"</span>,<span class="string">"balance"</span>:<span class="number">50000</span>&#125;%                                                                                                                                          </span><br><span class="line">➜  java-spring git:(master) ✗ curl -X GET <span class="string">"http://localhost:8081/accounts/00000156bfc1c044-0242ac1100460000"</span></span><br><span class="line">&#123;<span class="string">"accountId"</span>:<span class="string">"00000156bfc1c044-0242ac1100460000"</span>,<span class="string">"balance"</span>:<span class="number">0</span>&#125;%                                                                                                                                              </span><br><span class="line">➜  java-spring git:(master) ✗ curl -X GET <span class="string">"http://localhost:8081/accounts/00000156bfc1da88-0242ac1100960000"</span></span><br><span class="line">&#123;<span class="string">"accountId"</span>:<span class="string">"00000156bfc1da88-0242ac1100960000"</span>,<span class="string">"balance"</span>:<span class="number">100000</span>&#125;%</span><br></pre></td></tr></table></figure></p>
<p>可以看到中间有个状态是不对的，这个基于事件驱动的，还没有自己看，应该是有延迟，后来再查询就是准确的了。事件驱动的后面会专门看看再整理篇文章。</p>
<h3 id="u7ED3_u8BED"><a href="#u7ED3_u8BED" class="headerlink" title="结语"></a>结语</h3><p>本篇主要描述了如何使用docker-compose构建基于docker的java微服务框架。后续会对里面的知识点做些详细的学习。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h3><p>本文主要参考<a href="http://www.infoq.com/cn/articles/Auto]]>
    </summary>
    
      <category term="CQRS" scheme="http://suqun.github.io/tags/CQRS/"/>
    
      <category term="Docker" scheme="http://suqun.github.io/tags/Docker/"/>
    
      <category term="Event-Sourcing" scheme="http://suqun.github.io/tags/Event-Sourcing/"/>
    
      <category term="Spring Boot" scheme="http://suqun.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring Cloud构建微服务架构（六）服务网关]]></title>
    <link href="http://suqun.github.io/2016/08/09/springcloud6/"/>
    <id>http://suqun.github.io/2016/08/09/springcloud6/</id>
    <published>2016-08-09T07:47:33.000Z</published>
    <updated>2016-10-24T15:31:50.000Z</updated>
    <content type="html"><![CDATA[<p>原文 : <a href="http://blog.didispace.com/springcloud5/" target="_blank" rel="external">Spring Cloud构建微服务架构（五）服务网关</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文 : <a href="http://blog.didispace.com/springcloud5/" target="_blank" rel="external">Spring Cloud构建微服务架构（五）服务网关</a></p>
]]>
    </summary>
    
      <category term="Spring Boot" scheme="http://suqun.github.io/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="http://suqun.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring Cloud构建微服务架构（五）分布式配置中心]]></title>
    <link href="http://suqun.github.io/2016/08/09/SpringCloud5/"/>
    <id>http://suqun.github.io/2016/08/09/SpringCloud5/</id>
    <published>2016-08-09T02:38:46.000Z</published>
    <updated>2016-10-24T15:31:50.000Z</updated>
    <content type="html"><![CDATA[<p>原文 : <a href="http://blog.didispace.com/springcloud4/" target="_blank" rel="external">Spring Cloud构建微服务架构（四）分布式配置中心</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文 : <a href="http://blog.didispace.com/springcloud4/" target="_blank" rel="external">Spring Cloud构建微服务架构（四）分布式配置中心</a></p>
]]>
    </summary>
    
      <category term="Spring Boot" scheme="http://suqun.github.io/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="http://suqun.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring Cloud构建微服务架构（四）集群]]></title>
    <link href="http://suqun.github.io/2016/08/05/Spring-Cloud%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%88%E5%9B%9B%EF%BC%89%E9%9B%86%E7%BE%A4/"/>
    <id>http://suqun.github.io/2016/08/05/Spring-Cloud构建微服务架构（四）集群/</id>
    <published>2016-08-05T02:07:59.000Z</published>
    <updated>2016-10-24T15:30:37.000Z</updated>
    <content type="html"><![CDATA[<p>前面三篇都分享自<a href="http://blog.didispace.com/" target="_blank" rel="external">程序猿DD</a>的博客,暂时(2016年08月05日)还没有更新关于Eureka集群的博客。<br>这里参考了<a href="https://segmentfault.com/blog/mumubin" target="_blank" rel="external">木木彬</a>的<a href="https://segmentfault.com/a/1190000006149891" target="_blank" rel="external">Spring Cloud实战(二)-Spring Cloud Eureka</a>博客内容。<br>对集群配置简单记录下,方便以后查阅。同时也期待<code>程序猿DD</code>更新更多更精彩的博客。</p>
<p>本文代码基于<a href="https://git.oschina.net/didispace/SpringBoot-Learning/tree/master/Chapter9-1-3?dir=1&amp;filepath=Chapter9-1-3&amp;oid=cc93af44af30b42320041332790d071ed72a2450&amp;sha=4329c564d673b6cf7a53893ad9770abb7a67b328" target="_blank" rel="external">程序猿DD / SpringBoot-Learning / Chapter9-1-3</a>进行集群配置。</p>
<p>Spring Cloud 官方文档上对集群配置介绍的非常简单，对Eureka Server进行<a href="http://cloud.spring.io/spring-cloud-static/docs/1.0.x/spring-cloud.html#_peer_awareness" target="_blank" rel="external">Peer Awareness</a>配置，这样多个服务端就可以关联到一起。好了，下面看看具体的配置。</p>
<h4 id="hosts_u4FEE_u6539"><a href="#hosts_u4FEE_u6539" class="headerlink" title="hosts修改"></a>hosts修改</h4><p>在hosts（路径：/etc/hosts）文件中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1       eureka-primary&#10;127.0.0.1       eureka-secondary&#10;127.0.0.1       eureka-tertiary</span><br></pre></td></tr></table></figure>
<h4 id="u670D_u52A1_u7AEF_u914D_u7F6E"><a href="#u670D_u52A1_u7AEF_u914D_u7F6E" class="headerlink" title="服务端配置"></a>服务端配置</h4><p>先注释掉application.properties中的配置，添加application.yml，在yml添加多个profiles,和instanceId，此时Eureka Server 同时也是个Eureka Client,需要设置eureka.client.serviceUrl.defaultZone,值是另外两个（这就是官网所说的<code>Peer Awareness</code>）:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---&#10;spring:&#10;  application:&#10;    name: eureka-server-clustered&#10;  profiles: primary&#10;server:&#10;  port: 1111&#10;eureka:&#10;  instance:&#10;    hostname: eureka-primary&#10;  client:&#10;    registerWithEureka: true&#10;    fetchRegistry: true&#10;    serviceUrl:&#10;      defaultZone: http://eureka-secondary:1112/eureka/,http://eureka-tertiary:1113/eureka/&#10;---&#10;spring:&#10;  application:&#10;    name: eureka-server-clustered&#10;  profiles: secondary&#10;server:&#10;  port: 1112&#10;eureka:&#10;  instance:&#10;    hostname: eureka-secondary&#10;  client:&#10;    registerWithEureka: true&#10;    fetchRegistry: true&#10;    serviceUrl:&#10;      defaultZone: http://eureka-secondary:1111/eureka/,http://eureka-tertiary:1113/eureka/&#10;---&#10;spring:&#10;  application:&#10;    name: eureka-server-clustered&#10;  profiles: tertiary&#10;server:&#10;  port: 1113&#10;eureka:&#10;  instance:&#10;    hostname: eureka-tertiary&#10;  client:&#10;    registerWithEureka: true&#10;    fetchRegistry: true&#10;    serviceUrl:&#10;      defaultZone: http://eureka-secondary:1111/eureka/,http://eureka-tertiary:1112/eureka/</span><br></pre></td></tr></table></figure>
<h4 id="u670D_u52A1_u7AEF_u542F_u52A8"><a href="#u670D_u52A1_u7AEF_u542F_u52A8" class="headerlink" title="服务端启动"></a>服务端启动</h4><p>配置完成，要分别启动3个Server，分别执行下面的命令即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  eureka-server git:(master) ✗ mvn clean &amp;&amp; mvn install</span><br><span class="line">➜  eureka-server git:(master) ✗ <span class="built_in">cd</span> target</span><br><span class="line">➜  target git:(master) ✗ java -Dspring.profiles.active=primary -jar eureka-server-<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  target git:(master) ✗ java -Dspring.profiles.active=secondary -jar eureka-server-<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  target git:(master) ✗ java -Dspring.profiles.active=tertiary -jar eureka-server-<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<p>我们访问其中一个服务地址<a href="http://localhost:1111/" target="_blank" rel="external">http://localhost:1111/</a> 可以看到如下内容，说明服务启动成功：</p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/eureka-server-1.png" alt="Eureka Server"></p>
<h4 id="u5BA2_u6237_u7AEF_u914D_u7F6E"><a href="#u5BA2_u6237_u7AEF_u914D_u7F6E" class="headerlink" title="客户端配置"></a>客户端配置</h4><p>服务端已准备就绪，客户端如何注册到多个服务地址呢？其实在服务端配置defaultZone时，指定多个地址，就告诉我们客户端也这么指定就可以啦。</p>
<p>修改compute-service的application.properties中的defaultZone值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#25351;&#23450;&#24494;&#26381;&#21153;&#30340;&#21517;&#31216;&#21518;&#32493;&#22312;&#35843;&#29992;&#30340;&#26102;&#20505;&#21482;&#38656;&#35201;&#20351;&#29992;&#35813;&#21517;&#31216;&#23601;&#21487;&#20197;&#36827;&#34892;&#26381;&#21153;&#30340;&#35775;&#38382;&#10;spring.application.name=compute-service&#10;#&#24212;&#29992;&#31471;&#21475;&#10;server.port=2222&#10;#&#25351;&#23450;&#26381;&#21153;&#27880;&#20876;&#20013;&#24515;&#30340;&#20301;&#32622;&#10;#eureka.client.serviceUrl.defaultZone=http://localhost:1111/eureka/&#10;eureka.client.serviceUrl.defaultZone=http://eureka-primary:1111/eureka/,http://eureka-secondary:1112/eureka/,http://eureka-tertiary:1113/eureka/</span><br></pre></td></tr></table></figure>
<h4 id="u542F_u52A8_u5BA2_u6237_u7AEF"><a href="#u542F_u52A8_u5BA2_u6237_u7AEF" class="headerlink" title="启动客户端"></a>启动客户端</h4><p>客户端默认端口是2222，我们启动2个客户端，另一个端口用2223好了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  compute-service git:(master) ✗ mvn clean &amp;&amp; mvn insatll</span><br><span class="line">➜  compute-service git:(master) ✗ <span class="built_in">cd</span> target</span><br><span class="line">➜  target git:(master) ✗ java -jar compute-service-<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  target git:(master) ✗ java -DServer.port=<span class="number">2223</span> -jar compute-service-<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<p>重新查看下<a href="http://localhost:1111/" target="_blank" rel="external">http://localhost:1111/</a></p>
<p><img src="http://7xpk5e.com1.z0.glb.clouddn.com/eureka-server-2.png" alt="client starting"></p>
<p>2个客户端启动成功了。</p>
<h4 id="u6D4B_u8BD5"><a href="#u6D4B_u8BD5" class="headerlink" title="测试"></a>测试</h4><p>启动消费者eureka-ribbon成功后，简单测试下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ curl localhost:<span class="number">3333</span>/add</span><br><span class="line"><span class="number">30</span>%</span><br></pre></td></tr></table></figure>
<p>一个客户端也打出了日志</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">11</span>:<span class="number">18</span>:<span class="number">23.554</span>  INFO <span class="number">5127</span> --- [nio-<span class="number">2223</span>-exec-<span class="number">1</span>] com.ow.wises.web.ComputeController       : /add, host:<span class="number">192.168</span>.<span class="number">1.145</span>, service_id:compute-service, result:<span class="number">30</span></span><br></pre></td></tr></table></figure>
<p>好了，就先这样了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前面三篇都分享自<a href="http://blog.didispace.com/" target="_blank" rel="external">程序猿DD</a>的博客,暂时(2016年08月05日)还没有更新关于Eureka集群的博客。<br>这里参考了<a hr]]>
    </summary>
    
      <category term="Eureka" scheme="http://suqun.github.io/tags/Eureka/"/>
    
      <category term="Netflix" scheme="http://suqun.github.io/tags/Netflix/"/>
    
      <category term="Ribbon" scheme="http://suqun.github.io/tags/Ribbon/"/>
    
      <category term="Spring Boot" scheme="http://suqun.github.io/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="http://suqun.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring Cloud构建微服务架构（三）断路器]]></title>
    <link href="http://suqun.github.io/2016/08/05/Spring-Cloud%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%88%E4%B8%89%EF%BC%89%E6%96%AD%E8%B7%AF%E5%99%A8/"/>
    <id>http://suqun.github.io/2016/08/05/Spring-Cloud构建微服务架构（三）断路器/</id>
    <published>2016-08-05T02:02:21.000Z</published>
    <updated>2016-10-24T15:29:33.000Z</updated>
    <content type="html"><![CDATA[<p>原文 : <a href="http://blog.didispace.com/springcloud3/" target="_blank" rel="external">Spring Cloud构建微服务架构（三）断路器</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文 : <a href="http://blog.didispace.com/springcloud3/" target="_blank" rel="external">Spring Cloud构建微服务架构（三）断路器</a></p>
]]>
    </summary>
    
      <category term="Eureka" scheme="http://suqun.github.io/tags/Eureka/"/>
    
      <category term="Hystrix" scheme="http://suqun.github.io/tags/Hystrix/"/>
    
      <category term="Netflix" scheme="http://suqun.github.io/tags/Netflix/"/>
    
      <category term="Spring Boot" scheme="http://suqun.github.io/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="http://suqun.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring Cloud构建微服务架构（二）服务消费者]]></title>
    <link href="http://suqun.github.io/2016/08/05/Spring-Cloud%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%88%E4%BA%8C%EF%BC%89%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9%E8%80%85/"/>
    <id>http://suqun.github.io/2016/08/05/Spring-Cloud构建微服务架构（二）服务消费者/</id>
    <published>2016-08-05T02:00:33.000Z</published>
    <updated>2016-10-24T15:30:13.000Z</updated>
    <content type="html"><![CDATA[<p>原文 : <a href="http://blog.didispace.com/springcloud2/" target="_blank" rel="external">Spring Cloud构建微服务架构（二）服务消费者</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文 : <a href="http://blog.didispace.com/springcloud2/" target="_blank" rel="external">Spring Cloud构建微服务架构（二）服务消费者</a></p>
]]>
    </summary>
    
      <category term="Eureka" scheme="http://suqun.github.io/tags/Eureka/"/>
    
      <category term="Feign" scheme="http://suqun.github.io/tags/Feign/"/>
    
      <category term="Netflix" scheme="http://suqun.github.io/tags/Netflix/"/>
    
      <category term="Ribbon" scheme="http://suqun.github.io/tags/Ribbon/"/>
    
      <category term="Spring Boot" scheme="http://suqun.github.io/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="http://suqun.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring Cloud构建微服务架构（一）服务注册与发现]]></title>
    <link href="http://suqun.github.io/2016/08/05/Spring-Cloud%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%88%E4%B8%80%EF%BC%89%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"/>
    <id>http://suqun.github.io/2016/08/05/Spring-Cloud构建微服务架构（一）服务注册与发现/</id>
    <published>2016-08-05T01:55:21.000Z</published>
    <updated>2016-10-24T15:29:33.000Z</updated>
    <content type="html"><![CDATA[<p>原文 : <a href="http://blog.didispace.com/springcloud1/" target="_blank" rel="external">Spring Cloud构建微服务架构（一）服务注册与发现</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文 : <a href="http://blog.didispace.com/springcloud1/" target="_blank" rel="external">Spring Cloud构建微服务架构（一）服务注册与发现</a></p>
]]>
    </summary>
    
      <category term="Eureka" scheme="http://suqun.github.io/tags/Eureka/"/>
    
      <category term="Netflix" scheme="http://suqun.github.io/tags/Netflix/"/>
    
      <category term="Spring Boot" scheme="http://suqun.github.io/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="http://suqun.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java NIO Buffer]]></title>
    <link href="http://suqun.github.io/2016/06/28/Java-NIO-Buffer/"/>
    <id>http://suqun.github.io/2016/06/28/Java-NIO-Buffer/</id>
    <published>2016-06-28T14:10:31.000Z</published>
    <updated>2016-10-28T15:06:45.000Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="http://tutorials.jenkov.com/java-nio/buffers.html" target="_blank" rel="external">http://tutorials.jenkov.com/java-nio/buffers.html</a></p>
<p>Java NIO Buffers是和NIO的Channels交互使用的。你知道的，数据是从Channel中读到Buffer里，数据从Buffer里写入到Channel中。 </p>
<p>Buffer本质上是可以读写数据的内存块。这个内存块被NIO的Buffer对象包裹，然后提供很多方法以便能够简单的操作这个内存块。</p>
<h4 id="Buffer_u57FA_u7840_u7528_u6CD5"><a href="#Buffer_u57FA_u7840_u7528_u6CD5" class="headerlink" title="Buffer基础用法"></a>Buffer基础用法</h4><p>使用Buffer读写数据基本上就4步：</p>
<ol>
<li>数据写入Buffer</li>
<li>调用 <code>buffer.flip()</code></li>
<li>从Buffer中读出数据</li>
<li>调用<code>buffer.clear()</code>或者<code>buffer.compact()</code>方法</li>
</ol>
<p>当你将数据写入buffer，buffer会一直留意你已经写了多少数据。一旦你需要读数据，你必须调用<code>flip()</code>方法将buffer从写模式切换到读模式中。进入读模式后，buffer允许你读取其中被写入的数据。</p>
<p>一旦你读完了所有的数据，你需要清空buffer，以备buffer可以继续被写入。这么做有两种方式：调用<code>clear()</code>方法或者调用<code>compact()</code>方法。<code>clear()</code>方法会清空buffer中的所有数据。<code>compact()</code>方法只会清楚掉你已经读过的数据。那些没读的数据会移到buffer的起始处，然后数据会接着这些未读数据后面继续写入。</p>
<p><strong>栗子</strong></p>
<p>下面是Buffer用法的🌰，用到的write，flip，read，clear等操作会作注释说明。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaNIOBuffer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String path = Thread.currentThread().getContextClassLoader().getResource(<span class="string">""</span>).getPath();</span><br><span class="line">        RandomAccessFile aFile = <span class="keyword">new</span> RandomAccessFile(path+<span class="string">"/nio-data.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">        FileChannel inChannel = aFile.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//create buffer with capacity of 48 bytes</span></span><br><span class="line">        ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> bytesRead = inChannel.read(buf); <span class="comment">//read into buffer.</span></span><br><span class="line">        <span class="keyword">while</span> (bytesRead != -<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">            buf.flip();  <span class="comment">//make buffer ready for read</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(buf.hasRemaining())&#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>) buf.get()); <span class="comment">// read 1 byte at a time</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            buf.clear(); <span class="comment">//make buffer ready for writing</span></span><br><span class="line">            bytesRead = inChannel.read(buf);</span><br><span class="line">        &#125;</span><br><span class="line">        aFile.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Buffer_Capacity_2C_Position_and_Limit"><a href="#Buffer_Capacity_2C_Position_and_Limit" class="headerlink" title="Buffer Capacity, Position and Limit"></a>Buffer Capacity, Position and Limit</h4><p>buffer本质上就是一个你写入数据，然后读取数据的内存块。这个内存块被NIO Buffer对象包裹后，提供了一系列简单操作内存块的方法。</p>
<p>Buffer有3个你需要了解的属性：</p>
<ul>
<li>capacity</li>
<li>position</li>
<li>imit</li>
</ul>
<p>position和limit的含义取决于Buffer处在读模式还是写模式。capacity含义一直都是一样的，和Buffer模式无关。</p>
<p>这是一个关于capacity，position和limit的说明，后面会对其进行说明。</p>
<p><img src="http://tutorials.jenkov.com/images/java-nio/buffers-modes.png" alt="buffers-modes"></p>
<h5 id="Capacity"><a href="#Capacity" class="headerlink" title="Capacity"></a>Capacity</h5><p>Buffer作为一个内存块是有固定的大小值，称之为『capacity』。你只能向Buffer中写入byte，long，char等类型数据。一旦Buffer满了，在向其写入数据之前你需要清空它（读取数据或者清空数据）</p>
<h5 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h5><p>向Buffer中写数据是从一个确定的position开始，初始的position是0。当byte，long等数据写入Buffer，position会向前移动到下一个可供插入数据的单元。position最大值为capacity-1。</p>
<p>从Buffer中读数据也是从一个给定的位置开始。当你将Buffer从写模式切换到读模式后，position的值重置为0。从Buffer中读数据就是从position读，读取后，position会向前移动到下一个可供读取的单元。</p>
<h5 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h5><p>写模式中，limit就是写入buffer的数据量。Limit等于buffer的capacity。</p>
<p>当切换到读模式后，limit就是buffer中可以读取的数据量。就是说，切换到读模式时，limit就是设置为写模式中position的值。也就是说，buffer中写入的数据都可以读取到。</p>
<h4 id="Buffer_u7684_u7C7B_u578B"><a href="#Buffer_u7684_u7C7B_u578B" class="headerlink" title="Buffer的类型"></a>Buffer的类型</h4><p>伴随Java NIO的Buffer类型有:</p>
<ul>
<li>ByteBuffer</li>
<li>MappedByteBuffer</li>
<li>CharBuffer</li>
<li>DoubleBuffer</li>
<li>FloatBuffer</li>
<li>IntBuffer</li>
<li>LongBuffer</li>
<li>ShortBuffer</li>
</ul>
<p>可以看到，这些Buffer类型表示了不同的数据类型。换句话说，就是可以通过char，short，int，long，float 或 double类型来操作缓冲区中的字节。</p>
<p>MappedByteBuffer有点特殊，在它的专门章节中再描述。</p>
<h4 id="Buffer_u7684_u5206_u914D"><a href="#Buffer_u7684_u5206_u914D" class="headerlink" title="Buffer的分配"></a>Buffer的分配</h4><p>在获取到Buffer对象后首先要去分配。每个Buffer类都有个<code>allocate()</code>方法。下面的例子是ByteBuffer分配capacity为48字节的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br></pre></td></tr></table></figure>
<p>Here is an example allocating a CharBuffer with space for 1024 characters:<br>下面是CharBuffer分配1024个字符的例子:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CharBuffer buf = CharBuffer.allocate(<span class="number">1024</span>);</span><br></pre></td></tr></table></figure></p>
<h4 id="u5411Buffer_u4E2D_u5199_u5165_u6570_u636E"><a href="#u5411Buffer_u4E2D_u5199_u5165_u6570_u636E" class="headerlink" title="向Buffer中写入数据"></a>向Buffer中写入数据</h4><p>向Buffer中写入数据有两种方式：</p>
<ul>
<li>从Channel中获取数据写入Buffer</li>
<li>通过buffer的<code>put()</code>方法写入数据</li>
</ul>
<p>从Channel中获取数据写入buffer的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> bytesRead = inChannel.read(buf);<span class="comment">//read into buffer.</span></span><br></pre></td></tr></table></figure></p>
<p>使用<code>put()</code>方法写入数据的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.put(<span class="number">127</span>);</span><br></pre></td></tr></table></figure>
<p>有不同的版本的<code>put()</code>方法，允许你使用不同的方式写入数据。比如，在特定的位置写入，写入字节或数组。查看JavaDoc获取buffer具体的实现。</p>
<h4 id="flip_28_29"><a href="#flip_28_29" class="headerlink" title="flip()"></a>flip()</h4><p><code>flip()</code>方法用来切换Buffer的读和写模式。调用<code>flip()</code>，设置position为0，设置limit为原来的position值。就是说，position现在用来标记读的位置，Limit用来标记可以读多少。</p>
<h4 id="u4ECEBuffer_u4E2D_u8BFB_u6570_u636E"><a href="#u4ECEBuffer_u4E2D_u8BFB_u6570_u636E" class="headerlink" title="从Buffer中读数据"></a>从Buffer中读数据</h4><p>从Buffer中读取数据有两种方式：</p>
<ul>
<li>将buffer中的数据读入到channel中</li>
<li>调用buffer自带的<code>get()</code>方法直接读</li>
</ul>
<p>举个🌰：将Buffer中的数据读到channel中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//read from buffer into channel.</span></span><br><span class="line"><span class="keyword">int</span> bytesWritten = inChannel.write(buf);</span><br></pre></td></tr></table></figure>
<p>举个🌰：使用<code>get()</code>方法读取Buffer<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> aByte = buf.get();</span><br></pre></td></tr></table></figure></p>
<p>有不同的版本的<code>get()</code>方法，允许你使用不同的方式写入数据。比如，在特定的位置写入，写入字节或数组。查看JavaDoc获取buffer具体的实现。</p>
<h4 id="rewind_28_29"><a href="#rewind_28_29" class="headerlink" title="rewind()"></a>rewind()</h4><p><code>Buffer.rewind()</code>重置position为0，这样就可以重新读buffer的数据。limit不受影响，始终可以标记buffer中可读的数据量。</p>
<h4 id="clear_28_29_and_compact_28_29"><a href="#clear_28_29_and_compact_28_29" class="headerlink" title="clear() and compact()"></a>clear() and compact()</h4><p>从Buffer中读完数据以后要做好Buffer写的准备。可以调用<code>clear()</code>方法或者<code>compact()</code>方法。</p>
<p>调用<code>clear()</code>方法会重置position的值为0，Limit的值为capacity。意思是，Buffer已经清空。Buffer中的数据并没有清楚掉。只是告诉你从Buffer的哪个位置可以写入数据。</p>
<p>如果存在没有读取的数据，调用<code>clear()</code>方法后，该数据会被标记为’遗忘的’，因为这些数据再也没有什么标记其实被读过的还是没被读过的。</p>
<p>如果你必须先向Buffer中写入数据，然后还想读那些没有被读过的数据。需要调用<code>compact()</code>方法代替<code>clear()</code>方法。</p>
<p><code>compact()</code>方法把所有没有读过的数据复制到Buffer的起始处。然后设置position的值为味道数据后面的值。Limit仍然设置为capacity。这样，Buffer就做好写的准备，而不必覆盖掉未读的数据。</p>
<h4 id="mark_28_29_and_reset_28_29"><a href="#mark_28_29_and_reset_28_29" class="headerlink" title="mark() and reset()"></a>mark() and reset()</h4><p>使用<code>Buffer.mark()</code>方法可以标记一个指定的position。这样再之后调用<code>Buffer.reset()</code>方法重置position到标记的地方。</p>
<p>举个🌰：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">buffer.mark();</span><br><span class="line"><span class="comment">//call buffer.get() a couple of times, e.g. during parsing.</span></span><br><span class="line">buffer.reset();  <span class="comment">//set position back to mark.</span></span><br></pre></td></tr></table></figure></p>
<h4 id="equals_28_29_and_compareTo_28_29"><a href="#equals_28_29_and_compareTo_28_29" class="headerlink" title="equals() and compareTo()"></a>equals() and compareTo()</h4><p>比较两个buffers仍然可以使用<code>equals()</code>和<code>compareTo()</code>方法。</p>
<h5 id="equals_28_29"><a href="#equals_28_29" class="headerlink" title="equals()"></a>equals()</h5><p>两个buffers相等，那么： </p>
<ul>
<li>有相同的类型（byte、char、int等）。</li>
<li>Buffer中剩余的byte、char等的个数相等。</li>
<li>Buffer中所有剩余的byte、char等都相同。</li>
</ul>
<p>就是说：equals只是比较Buffer的一部分，不是每一个在它里面的元素都比较。实际上，它只比较Buffer中的剩余元素。</p>
<h5 id="compareTo_28_29"><a href="#compareTo_28_29" class="headerlink" title="compareTo()"></a>compareTo()</h5><p>compareTo()方法比较两个Buffer的剩余元素(byte、char等)， 如果满足下列条件，则认为一个Buffer“小于”另一个Buffer：</p>
<ul>
<li>第一个不相等的元素小于另一个Buffer中对应的元素 。</li>
<li>所有元素都相等，但第一个Buffer比另一个先耗尽(第一个Buffer的元素个数比另一个少)。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="http://tutorials.jenkov.com/java-nio/buffers.html" target="_blank" rel="external">http://tutorials.jenkov.com/java-nio/buffer]]>
    </summary>
    
      <category term="Java NIO" scheme="http://suqun.github.io/tags/Java-NIO/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java NIO Channel]]></title>
    <link href="http://suqun.github.io/2016/06/26/Java-NIO-Channel/"/>
    <id>http://suqun.github.io/2016/06/26/Java-NIO-Channel/</id>
    <published>2016-06-26T13:04:43.000Z</published>
    <updated>2016-10-25T10:14:56.000Z</updated>
    <content type="html"><![CDATA[<p>Java NIO 的Channels有些像流，但是也有一些区别：</p>
<ul>
<li>可以向一个Channel即读又写。流是典型的单向的（写或者读）</li>
<li>Channels的读写是异步的</li>
<li>Channels总是读数据到Buffer中，或者将Buffer中的数据写入Channel</li>
</ul>
<p>上面提到的，从channel中读取数据至buffer中，将buffer中的数据写入channel中：</p>
<p><img src="http://tutorials.jenkov.com/images/java-nio/overview-channels-buffers.png" alt="Java NIO: Channels read data into Buffers, and Buffers write data into Channels"><br><strong>Java NIO: Channels read data into Buffers, and Buffers write data into Channels</strong></p>
<h4 id="Channel_Implementations"><a href="#Channel_Implementations" class="headerlink" title="Channel Implementations"></a>Channel Implementations</h4><p>在Java NIO中有一些比较重要的channel实现类：</p>
<ul>
<li>FileChannel</li>
<li>DatagramChannel</li>
<li>SocketChannel</li>
<li>ServerSocketChannel</li>
</ul>
<p><code>FileChannel</code>从文件中读取数据。<br><code>DatagramChannel</code>通过UDP读写网络中的数据。<br><code>SocketChannel</code>通过TCP读写网络中的数据。<br><code>ServerSocketChannel</code>可以监听新进来的TCP连接，像Web服务器那样，对每一个新进来的连接都会创建一个SocketChannel。</p>
<h4 id="Basic_Channel_Example"><a href="#Basic_Channel_Example" class="headerlink" title="Basic Channel Example"></a>Basic Channel Example</h4><p>下面是一个使用<code>FileChannel</code>读数据到Buffer中的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        RandomAccessFile accessFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"nio-data.txt"</span>,<span class="string">"rw"</span>);</span><br><span class="line">        FileChannel fileChannel = accessFile.getChannel();</span><br><span class="line"></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> bytesRead = fileChannel.read(buffer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (bytesRead != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Read "</span> + bytesRead);</span><br><span class="line">            buffer.flip();<span class="comment">//切换读写模式，此处是由写切换到下面的读</span></span><br><span class="line">            <span class="keyword">if</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>) buffer.get());</span><br><span class="line">            &#125;</span><br><span class="line">            buffer.clear();</span><br><span class="line">            bytesRead = fileChannel.read(buffer);</span><br><span class="line">        &#125;</span><br><span class="line">        accessFile.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意 buf.flip() 的调用，首先读取数据到Buffer，然后反转Buffer，接着再从Buffer中读取数据。下一节会深入讲解Buffer的更多细节。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Java NIO 的Channels有些像流，但是也有一些区别：</p>
<ul>
<li>可以向一个Channel即读又写。流是典型的单向的（写或者读）</li>
<li>Channels的读写是异步的</li>
<li>Channels总是读数据到Buffer中，或者将]]>
    </summary>
    
      <category term="Java NIO" scheme="http://suqun.github.io/tags/Java-NIO/"/>
    
  </entry>
  
</feed>
